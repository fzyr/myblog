<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-08-01T22:41:29+08:00</updated><id>/</id><title>SHUNMIAN</title><subtitle>Stylish Jekyll Theme</subtitle><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><entry><title>iOS 2D Game - SpriteKit入门(一)</title><link href="/01%20objective-c/2016/12/30/SpriteKit.html" rel="alternate" type="text/html" title="iOS 2D Game - SpriteKit入门(一)" /><published>2016-12-30T00:00:00+08:00</published><updated>2016-12-30T00:00:00+08:00</updated><id>/01%20objective-c/2016/12/30/SpriteKit</id><content type="html" xml:base="/01%20objective-c/2016/12/30/SpriteKit.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spritekit-&quot; id=&quot;markdown-toc-spritekit-&quot;&gt;1. SpriteKit 概览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sknodeskphysicsworld--skphysicsbodyskaction&quot; id=&quot;markdown-toc-sknodeskphysicsworld--skphysicsbodyskaction&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#skscene&quot; id=&quot;markdown-toc-skscene&quot;&gt;2.1.1 SKScene&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skspritenode&quot; id=&quot;markdown-toc-skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sklabelnode&quot; id=&quot;markdown-toc-sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skemitternode&quot; id=&quot;markdown-toc-skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skphysicsworld--skphysicsbody&quot; id=&quot;markdown-toc-skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#skphysicsworld&quot; id=&quot;markdown-toc-skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#skphysicsbody&quot; id=&quot;markdown-toc-skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skaction&quot; id=&quot;markdown-toc-skaction&quot;&gt;2.3. SKAction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;3.其它类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;4 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;spritekit-&quot;&gt;1. SpriteKit 概览&lt;/h2&gt;

&lt;p&gt;SpriteKit是Apple官方的2D游戏框架， 让开发者在iOS 和OS 平台上更高效的开发2D游戏。&lt;/p&gt;

&lt;p&gt;学习SpriteKit， 最权威的资料应该是苹果官方文档 -
&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html&quot;&gt;SpriteKit Programming Guide&lt;/a&gt;。 该文档很全面但是不适合初学者。 对于初学者， 理解SpriteKit背后的设计rationale才能更好的应用它。 那么SpriteKit的设计rationale是什么呢？&lt;/p&gt;

&lt;p&gt;对于一个2D游戏来说， 设计应该分为三个部分(以超级马里奥为例):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;View: 即视图显示，用于展示各个Sprite(精灵)，例如马里奥图片和子弹图片;&lt;/li&gt;
  &lt;li&gt;Physics Model:即物理模型， 包括质量， 体积(2D游戏是面积)， 密度， 碰撞， 地球引力等， 例如超级马里奥碰到水管会弹回来， 往上跳会下落。&lt;/li&gt;
  &lt;li&gt;Action:即 物理模型受到的外部作用力。例如超级马里奥里的空中台阶自己来回移动(开发者给其施加一个永恒的来回运动的作用力)。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这三个方面分别对应SpriteKit里面的SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction。&lt;/p&gt;

&lt;h2 id=&quot;sknodeskphysicsworld--skphysicsbodyskaction&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/h2&gt;
&lt;p&gt;### 2.1 SKNode###&lt;/p&gt;

&lt;p&gt;SKNode 是 SpriteKit 显示视图的Building Block。它能提供一个游戏视图的基本属性和方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKNode Class

属性:
.zPosition              // 视图的z方向的距离，用于标定重叠视图的显示顺序;
.xScale                 // x方向的视图放大倍数;
.yScale                 // y方向的视图放大倍数;
.alpha                  // 视图的alpha值;
.hidden                 // 视图是否隐藏;

方法:
-addChild:              // 增加子SKNode，与UIView 的 -addSubView: 类似;
-removeFromParent:      // 从父SKNode移除，与 UIView的removeFromSuperview 类似;
-runAction:             // 运行一个SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们一般不直接用它，它下面有几个子类，其中最常见的是以下4个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SKEffectNode: 用于缓存，渲染，加滤镜于图片。它的子类SKScene 用于展示所有的SKNode，是游戏场景;&lt;/li&gt;
  &lt;li&gt;SKSpriteNode: 用于展示精灵，如超级马里奥图片;&lt;/li&gt;
  &lt;li&gt;SKLabelNode: 用于展示单行文本，如游戏时间;&lt;/li&gt;
  &lt;li&gt;SKEmitterNode: 用于展示粒子，例如喷射火焰的岩浆;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们就这四个类做一个简单的介绍。&lt;/p&gt;

&lt;h4 id=&quot;skscene&quot;&gt;2.1.1 SKScene&lt;/h4&gt;
&lt;p&gt;SKScene 是游戏关口(level)，游戏中的一个场景，例如马里奥的第一关和第二关分别是两个SKCene实例。在这个场景中，包含了所有其他SKNode(或者其子类)，比如马里奥(SKSpriteNode)，游戏时间(SKLabelNode)，喷射火焰的岩浆(SKEmitterNode)。它的主要属性和方法有:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKScene Class

属性:
.view                   // 关口的父视图，是一个SKView，用来展示各个SKScene关口;
.physicsWorld           // 世界的物理模型，是一个SKPhysicsWorld实例，这个后面会介绍;

方法:
-initWithSize:          // 初始化方法;
+SceneWithSize:         // 初始化类工厂方法;
-didMoveToView:         // 当SKScene实例被SKView展示时调用，类似UIView的-didMoveToSuperview;
-addChild:              // 增加子SKNode，如马里奥(SKSpriteNode);&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/h4&gt;
&lt;p&gt;SKSpriteNode是用来展示sprite，那么何为sprite呢，sprite有什么作用呢? Wiki中是这样定义的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sprite: two-dimensional image or animation that is integrated into a larger scene.Initially including just graphical objects handled &lt;strong&gt;separately&lt;/strong&gt; from the memory bitmap of a video display，this now includes various manners of graphical overlays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sprite是从整个display独立出来渲染的2D图片。如何理解这句话呢，在sprite出现之前，2D游戏要渲染一帧图片(比如马里奥在一个蓝天白云的背景前)，需要把整个图片(马里奥+背景)计算完后再渲染，其中背景的渲染在每一帧中都重复。sprite的出现正是为了避免这一重复。马里奥是一个sprite，他在一个固定的背景前跳跃，只需要将马里奥的每一帧渲染出来叠在背景(背景不需要重复计算渲染)即可，这就是为什么sprite被称为从整个display独立出来渲染的2D图片。sprite的思想在几十年前就已经有了，SpriteKit只是沿袭了2D游戏设计中运用sprite这一思想，用SKSpriteNode来表示sprite类。我们来看下SKSpriteNode的属性和方法&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKSpriteNode Class

属性:
.size                       // 大小;
.physicsBody                // 物体的物理模型，是一个SKPhysicsBody实例，这个后面会介绍;

方法:
+spriteNodeWithImageNamed:  // 类工厂方法，用图片创建sprite;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/h4&gt;
&lt;p&gt;SKLabelNode是SpriteKit用来展示text，它的方法和属性如下。有一点需要注意的是它只能显示单行文本。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKLabelNode Class

属性:
.fontSize               // 字体大小;
.color                  // 字体颜色;
.fontName               // 字体名字;

方法:
-initWithFontNamed:     // 通过字体名字初始化方法;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/h4&gt;
&lt;p&gt;SKEmitterNode是SpriteKit用来展示粒子系统的，下面介绍下它的常见使用方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;subclass一个SpriteKit Particles Files ( ctrl + N –&amp;gt; iOS，Resources，SpriteKit Particles Files –&amp;gt; choose 1 of the eight template –&amp;gt; save，你会得到一个.sks 和.png 文件，点击.sks文件:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_1.png&quot; alt=&quot;SKEmitterNode_1&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_2.png&quot; alt=&quot;SKEmitterNode_2&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_3.png&quot; alt=&quot;SKEmitterNode_3&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_4.png&quot; alt=&quot;SKEmitterNode_4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在.sks文件右侧调整各参数，例如有粒子平均产生率(BirthRate) 单位是个/秒。右边的range是一个分布，在平均产生率上 ±  range/2 分布。particle texture 是粒子的纹路，你可以选择自己加入的图片文件。&lt;/li&gt;
  &lt;li&gt;调整完成后如何在code中调用.sks文件呢:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKEmitterParticle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSKeyedUnarchiver&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unarchiveObjectWithFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;FireParticle&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;sks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;particleBirthRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 用NSBundle读取.sks 文件，然后可以进一步修改其属性。这样就完成了SpriteKit Particles Files 的子类化和应用。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/h3&gt;
&lt;p&gt;SpriteKit 里表示物理模型的有两个类，SKPhysicsWorld &amp;amp; SKPhysicsBody，前者属于SKScene，后者属于SKNode其他子类。SKPhysicsWorld 和 SKPhysicsBody 都继承与NSObject。我们先来看看SKPhysicsWorld。&lt;/p&gt;

&lt;h4 id=&quot;skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/h4&gt;
&lt;p&gt;对于一个物理世界来说，例如我们的地球，有一些属性决定了我们日常生活的基础，如重力加速度。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsWorld Class

属性:
.gravity:                   // 重力加速度了， 通过CGVectorMaker(0，-9.8)获得现实生活一个重力加速度。第一个参数是x轴，向右为正，第二个参数是y轴，向上为正;
.contactDelegate            // SKPhyicsContactDelegate 实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;又比如物体碰撞后的处理者，可以理解为物体碰撞后有一个裁判需要对此进行处理，在SpriteKit中是SKPhyicsContactDelegate。而SKPhysicsWorld 的contactDelegate属性就指向这样一个delegate，也就是说由物理世界充当裁判的角色。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsContactDelegate Class

方法:
-didBeginContact:       // 碰撞开始;
-didEndContact:         // 碰撞结束;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于SKPhysicsContactDelegate两个方法的使用我们后面介绍。&lt;/p&gt;

&lt;h4 id=&quot;skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/h4&gt;
&lt;p&gt;SKPhysicsBody代表物理模型里的物体，它有质量，体积(2D 游戏里是面积)，密度，线速度，角速度，自旋速度等。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsBody Class

属性:
.mass                       // 质量，单位kg;
.area                       // 面积，单位m*m;
.density                    // 密度，单位kg/m*m;
.friction                   // 表面粗糙度，0.0-1.0;
.restitution                // 碰撞时，反射速度/入射速度，0.0-1.0;
.linearDamping              // 物体线速度受液体或者气体(空气)摩擦的影响， 0.0-1.0;
.dynamic                    // YES，动态; NO，静态，与SKPhysicsWorld相连，不受碰撞影响;
.categoryBitMask            // 自身的contact &amp;amp; collision ID;
.contactTestBitMask         // 外界contact测试的ID集合;
.collisionBitMask           // 外界collision的ID集合;

方法:
+bodyWithRectangleOfSize:   // 创建Volume-physicsBody的一种类工厂方法;
+bodyWithEdgeLoopFromRect:  // 创建Edge-physicsBody的一种类工厂方法;
-applyImpulse:              // 被施加外部瞬时力;
-applyForce:                // 被施加外部永恒力;
-runAction:                 // 运行一个SKAction实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;.dynamics 是一个BOOL，设置为NO时，静止(可以理解为与SKPhyisicsWorld相连)，位置不受碰撞前后影响， 例如马里奥里的乌龟壳，碰到水管后反弹，水管静止，这里水管的dynamic就是NO， 乌龟壳的dynmaics就是YES。&lt;/p&gt;

&lt;p&gt;要创建一个在框里永远碰撞而不停下的ball，应设置如下friction，restituition， linearDamping:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restitution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearDamping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;SKPhysicsBody的创建分为两种，一种是Volume-physicsBody，就是有体积(2D里是面积)的物体，有体积意味着有质量，受牛顿定律影响;另一种是只有边缘没有体积的Edge-physicsBody，如上面那个装永动球的箱子，我们只关心箱子的边框，用 +bodyWithEdgeLoopFromRect: 创建它并设置其dynamics = NO 即可。&lt;/p&gt;

&lt;p&gt;下面重点要介绍的是接触和碰撞。
SpriteKit为每个物体在接触和碰撞时设定了一个身份证——categoryBitMask，该属性唯一标定了接触和碰撞时每个物体的身份，是一个32 bit的数，我们下面先看code再解释:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们设置了3种uint32_t的静态常量，分别代表马里奥，子弹，乌龟。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.categoryBitMask = MariaCategory;
tortoise.categoryBitMask = TortoiseCategory;
bullet.categoryBitMask = BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后分别给maria，tortoise以及bullte的categoryBitMask设置为相应值。同时我们需要在以下情形中判断contact发生并作出相应，如马里奥碰到乌龟，马里奥die;子弹碰到乌龟，乌龟die:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;maria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面将maria感兴趣的contact ID集设置为乌龟，乌龟设置为子弹和马里奥，子弹设置为乌龟。用32位非常便于取或操作，同时也限定了一个游戏场景里的碰撞接触的身份证只能有32个。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameScene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContactDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicsWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didBeginContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//我们来简单举一个子弹打到乌龟，乌龟die的contact测试。
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SKPhysicsBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;tortoise die: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样当子弹打到乌龟，GameScene 作为SKPhysicsContactDelegate就会响应-didBeginContact: 方法，然后判断情形，如果是，则打印出来”tortoise die:tortoise的object信息”。&lt;/p&gt;

&lt;p&gt;了解了categoryBitMask 和contactTestBitMask， 我们再来看collisionBitMask就简单了，它表示物体之间会不会intersect，也是32位数。默认是32个1，表示与任何物体碰撞都不会穿过那个物体。如果你需要将某个物体穿过另一个物体，比如子弹打到马里奥，直接穿过(当然游戏中不可能发生):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.collisionBitMask = ~BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后力的施加我们在SKAction里介绍。&lt;/p&gt;

&lt;h3 id=&quot;skaction&quot;&gt;2.3. SKAction&lt;/h3&gt;
&lt;p&gt;SKAction表示一个动作，由SKNode得 -runAction: 方法执行，它有几十个方法。下面列出几个比较典型的， 它的实例化大部分都是类工厂方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKAction Class

初始化方法:
+moveByX:y:duration:                    // 移动一个SKNode;
+rotationByAngule:duration:             // 转动一个SKNode;
+hide                                   // 隐藏一个SKNode， 对应的还有 +unhide;
+applyForce:duration:                   // 施加力;
+playSoundFileNamed:waitForCompletion:  // 播放音频文件;
+removeFromParent                       // 将SKNode从父node里移除;
+waitForDuration:                       // 等待的动作，在SKAction group和sequence里用到;

+group:                                 // 组合几个SKAction，从时间起点，这几个SKAction同时开始;
+sequence:                              // 串联几个SKAction，从时间起始点，下一个的开始在上一个结束后才执行;
+repeatActionForever:                   // 永远重复SKAction;
-reversedAction:                        // 逆向一个SKAction，如原来从左到右2秒，现在从右到左两秒;

+runBlock:queque:                       // 在队列里执行SKAction;
+customActionWithDuration:actionBlock:  // 定制SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;例如马里奥中需要一个空中台阶，“”从左到右2秒，等待0.5秒，从右到左2秒，等待0.5秒 ”的sequence永远运行下去，code如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveByX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reversedAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatActionForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;3.其它类&lt;/h2&gt;
&lt;p&gt;在SKView中，场景的不同切换要用到SKTransition，self指一个scene:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doorsOpenHorizontalWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winScene&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;4 总结&lt;/h2&gt;
&lt;p&gt;以上对于SKSpriteKit里的大部分常用类及其用法做了介绍，相信读者能够自己画出SKSpriteKit的类图关系，再回过头来跟着online的SKSpriteKit的tutorial做一遍的时候，自然就了然于心。后面还有一篇从各个小topic来看SKSpriteKit。&lt;/p&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="SpriteKit" /><summary>目录</summary></entry><entry><title>Redux</title><link href="/04%20web%20development/2016/10/05/Redux.html" rel="alternate" type="text/html" title="Redux" /><published>2016-10-05T00:00:00+08:00</published><updated>2016-10-05T00:00:00+08:00</updated><id>/04%20web%20development/2016/10/05/Redux</id><content type="html" xml:base="/04%20web%20development/2016/10/05/Redux.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-03-React入门/JS React Summary.png&quot; alt=&quot;JS React Summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Learning-React-Kirupa-Chinnathambi/dp/0134546318&quot;&gt;Learning React&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="Redux" /><summary>目录</summary></entry><entry><title>npm</title><link href="/04%20web%20development/2016/10/04/npm.html" rel="alternate" type="text/html" title="npm" /><published>2016-10-04T00:00:00+08:00</published><updated>2016-10-04T00:00:00+08:00</updated><id>/04%20web%20development/2016/10/04/npm</id><content type="html" xml:base="/04%20web%20development/2016/10/04/npm.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm是NodeJS Package Management的缩写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-04-npm/npm summary.png&quot; alt=&quot;npm summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="npm" /><summary>目录</summary></entry><entry><title>React入门</title><link href="/04%20web%20development/2016/10/03/React%E5%85%A5%E9%97%A8.html" rel="alternate" type="text/html" title="React入门" /><published>2016-10-03T00:00:00+08:00</published><updated>2016-10-03T00:00:00+08:00</updated><id>/04%20web%20development/2016/10/03/React入门</id><content type="html" xml:base="/04%20web%20development/2016/10/03/React%E5%85%A5%E9%97%A8.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-03-React入门/JS React Summary.png&quot; alt=&quot;JS React Summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Learning-React-Kirupa-Chinnathambi/dp/0134546318&quot;&gt;Learning React&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="React" /><summary>目录</summary></entry><entry><title>JavaScript进阶</title><link href="/04%20web%20development/2016/10/02/JavaScript%E8%BF%9B%E9%98%B6.html" rel="alternate" type="text/html" title="JavaScript进阶" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/04%20web%20development/2016/10/02/JavaScript进阶</id><content type="html" xml:base="/04%20web%20development/2016/10/02/JavaScript%E8%BF%9B%E9%98%B6.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#part-i-&quot; id=&quot;markdown-toc-part-i-&quot;&gt;Part I: 语法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#primitive-data-type&quot; id=&quot;markdown-toc-primitive-data-type&quot;&gt;1.0 Primitive Data Type&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#object&quot; id=&quot;markdown-toc-object&quot;&gt;1.1 Object&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#oop&quot; id=&quot;markdown-toc-oop&quot;&gt;1.2 OOP&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#prototype-chaining&quot; id=&quot;markdown-toc-prototype-chaining&quot;&gt;1.2.1 Prototype Chaining&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#function&quot; id=&quot;markdown-toc-function&quot;&gt;1.3 Function&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-ii-bom--dom&quot; id=&quot;markdown-toc-part-ii-bom--dom&quot;&gt;Part II: BOM &amp;amp; DOM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#bom&quot; id=&quot;markdown-toc-bom&quot;&gt;2.1 BOM&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;2.2 DOM&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#event&quot; id=&quot;markdown-toc-event&quot;&gt;2.2.1 Event&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#graphics&quot; id=&quot;markdown-toc-graphics&quot;&gt;2.2.2 Graphics&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-iii-other&quot; id=&quot;markdown-toc-part-iii-other&quot;&gt;Part III: Other&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#xml&quot; id=&quot;markdown-toc-xml&quot;&gt;3.1 XML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#json&quot; id=&quot;markdown-toc-json&quot;&gt;3.2 JSON&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ajax&quot; id=&quot;markdown-toc-ajax&quot;&gt;3.3 AJAX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#error-handling&quot; id=&quot;markdown-toc-error-handling&quot;&gt;3.4 Error Handling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;3.5 Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;part-i-&quot;&gt;Part I: 语法&lt;/h2&gt;

&lt;h3 id=&quot;primitive-data-type&quot;&gt;1.0 Primitive Data Type&lt;/h3&gt;

&lt;h3 id=&quot;object&quot;&gt;1.1 Object&lt;/h3&gt;

&lt;h3 id=&quot;oop&quot;&gt;1.2 OOP&lt;/h3&gt;

&lt;h4 id=&quot;prototype-chaining&quot;&gt;1.2.1 Prototype Chaining&lt;/h4&gt;

&lt;h3 id=&quot;function&quot;&gt;1.3 Function&lt;/h3&gt;

&lt;h2 id=&quot;part-ii-bom--dom&quot;&gt;Part II: BOM &amp;amp; DOM&lt;/h2&gt;

&lt;h3 id=&quot;bom&quot;&gt;2.1 BOM&lt;/h3&gt;

&lt;h3 id=&quot;dom&quot;&gt;2.2 DOM&lt;/h3&gt;

&lt;h4 id=&quot;event&quot;&gt;2.2.1 Event&lt;/h4&gt;

&lt;h4 id=&quot;graphics&quot;&gt;2.2.2 Graphics&lt;/h4&gt;

&lt;h2 id=&quot;part-iii-other&quot;&gt;Part III: Other&lt;/h2&gt;

&lt;h3 id=&quot;xml&quot;&gt;3.1 XML&lt;/h3&gt;

&lt;h3 id=&quot;json&quot;&gt;3.2 JSON&lt;/h3&gt;

&lt;h3 id=&quot;ajax&quot;&gt;3.3 AJAX&lt;/h3&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;3.4 Error Handling&lt;/h3&gt;

&lt;h3 id=&quot;debugging&quot;&gt;3.5 Debugging&lt;/h3&gt;

&lt;h2 id=&quot;summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-01-JavaScript入门/JS DOM 入门 summary.png&quot; alt=&quot;JS DOM 入门 summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apress.com/us/book/9781430233893&quot;&gt;DOM Scripting: Web Design with JavaScript and the Document Object Model&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_htmldom.asp&quot;&gt;JavaScript HTML DOM&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="javaScript" /><summary>目录</summary></entry><entry><title>JavaScript入门</title><link href="/04%20web%20development/2016/10/01/JavaScript%E5%85%A5%E9%97%A8.html" rel="alternate" type="text/html" title="JavaScript入门" /><published>2016-10-01T00:00:00+08:00</published><updated>2016-10-01T00:00:00+08:00</updated><id>/04%20web%20development/2016/10/01/JavaScript入门</id><content type="html" xml:base="/04%20web%20development/2016/10/01/JavaScript%E5%85%A5%E9%97%A8.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-01-JavaScript入门/JS DOM 入门 summary.png&quot; alt=&quot;JS DOM 入门 summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apress.com/us/book/9781430233893&quot;&gt;DOM Scripting: Web Design with JavaScript and the Document Object Model&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_htmldom.asp&quot;&gt;JavaScript HTML DOM&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="javaScript" /><summary>目录</summary></entry><entry><title>OC工具(一)：Object File Inspection Tools</title><link href="/01%20objective-c/2016/05/01/OC%E5%B7%A5%E5%85%B7(%E4%B8%80)_otool.html" rel="alternate" type="text/html" title="OC工具(一)：Object File Inspection Tools" /><published>2016-05-01T00:00:00+08:00</published><updated>2016-05-01T00:00:00+08:00</updated><id>/01%20objective-c/2016/05/01/OC工具(一)_otool</id><content type="html" xml:base="/01%20objective-c/2016/05/01/OC%E5%B7%A5%E5%85%B7(%E4%B8%80)_otool.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#accustoming-yourself-to-ojective-c&quot; id=&quot;markdown-toc-accustoming-yourself-to-ojective-c&quot;&gt;1 Accustoming yourself to Ojective-C&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#otool&quot; id=&quot;markdown-toc-otool&quot;&gt;1.1：otool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;2 Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;accustoming-yourself-to-ojective-c&quot;&gt;1 Accustoming yourself to Ojective-C&lt;/h2&gt;

&lt;h3 id=&quot;otool&quot;&gt;1.1：otool&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;otool&lt;/strong&gt;：Otool可以提取并显示ios下目标文件的相关信息，包括头部，加载命令，各个段，共享库，动态库等等。它拥有大量的命令选项，是一个功能强大的分析工具，当然还可以做反汇编的工具使用。下面是1个利用otool查看someProject.app里someProject的unix executable的所&lt;strong&gt;依赖的系统库路径检测&lt;/strong&gt;的例子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoreSimulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFDDEC82&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DD4D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BFD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9040&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F25DF276A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Containers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EF40B7F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B56C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AE1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCBF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9304&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DA548534&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtimeTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;otool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtimeTest&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//Unix executable
//输出
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;runtimeTest:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Frameworks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foundation&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Frameworks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoreFoundation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoreFoundation&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Frameworks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libobjc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dylib&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//objc和runtime
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dylib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;reference&quot;&gt;2 Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-02-object-file-inspection-tools.html&quot;&gt;《Friday Q&amp;amp;A 2011-12-02: Object File Inspection Tools》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="Effective Objective-C" /><summary>目录</summary></entry><entry><title>EOC(七)：The System Framework</title><link href="/01%20objective-c/2016/04/26/Effective-Objective-C-2.0(%E4%B8%83)_The-System-Framework.html" rel="alternate" type="text/html" title="EOC(七)：The System Framework" /><published>2016-04-26T00:00:00+08:00</published><updated>2016-04-26T00:00:00+08:00</updated><id>/01%20objective-c/2016/04/26/Effective Objective C  2.0(七)_The System Framework</id><content type="html" xml:base="/01%20objective-c/2016/04/26/Effective-Objective-C-2.0(%E4%B8%83)_The-System-Framework.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-system-framework&quot; id=&quot;markdown-toc-the-system-framework&quot;&gt;1 The System Framework&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#item-47familiarize-yourself-with-the-system-frameworks&quot; id=&quot;markdown-toc-item-47familiarize-yourself-with-the-system-frameworks&quot;&gt;Item 47：Familiarize Yourself with the System Frameworks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-48prefer-block-enumeration-to--for-loops&quot; id=&quot;markdown-toc-item-48prefer-block-enumeration-to--for-loops&quot;&gt;Item 48：Prefer Block Enumeration to  for loops&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-49use-toll-free-bridging-for-collections-with-custom-memory-management-semantics&quot; id=&quot;markdown-toc-item-49use-toll-free-bridging-for-collections-with-custom-memory-management-semantics&quot;&gt;Item 49：Use Toll-Free Bridging for Collections with Custom Memory-Management Semantics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-50use-nscache-instead-of-nsdictionary-for-caches&quot; id=&quot;markdown-toc-item-50use-nscache-instead-of-nsdictionary-for-caches&quot;&gt;Item 50：Use NSCache Instead of NSDictionary for Caches&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-51keep-initialize-and-load-implementations-lean&quot; id=&quot;markdown-toc-item-51keep-initialize-and-load-implementations-lean&quot;&gt;Item 51：Keep initialize and load Implementations Lean&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-52remember-that-nstimer-retains-its-target&quot; id=&quot;markdown-toc-item-52remember-that-nstimer-retains-its-target&quot;&gt;Item 52：Remember that NSTimer Retains Its Target&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;2 Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;the-system-framework&quot;&gt;1 The System Framework&lt;/h2&gt;

&lt;h3 id=&quot;item-47familiarize-yourself-with-the-system-frameworks&quot;&gt;Item 47：Familiarize Yourself with the System Frameworks&lt;/h3&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/01 Objectiev C/2016-04-26-EOC(七)：The System Framework/iOS Framework Overview.png&quot; alt=&quot;iOS Framework Overview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;item-48prefer-block-enumeration-to--for-loops&quot;&gt;Item 48：Prefer Block Enumeration to  for loops&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enumerating collections can be achieved in four ways. The for loop is the most basic, followed by enumeration using &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEnumerator&lt;/code&gt; and fast enumeration. The most modern and advanced way is using the block-enumeration methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Block enumeration alows you to perform the enumeration &lt;strong&gt;concurrently&lt;/strong&gt;, withou any additional code, by making use of GCD. This cannot easily be achieved with the other enumeration techniques.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Alter the block signature to indicate the precise types of objects if you know them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-49use-toll-free-bridging-for-collections-with-custom-memory-management-semantics&quot;&gt;Item 49：Use Toll-Free Bridging for Collections with Custom Memory-Management Semantics&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Toll-free bridging allows you to cast between Foundation’s Objective-C objects and CoreFoundation’s C data structures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dropping down to CoreFoundation to creat a collection allows you to specify various callbacks that are used when the colleciton handles its contents. Casting this through toll-free bridging allows you to end up with an Objective-C collection that has custom memory-management semantics.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-50use-nscache-instead-of-nsdictionary-for-caches&quot;&gt;Item 50：Use NSCache Instead of NSDictionary for Caches&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Consider using &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt; in the place of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt; objects being used as caches. Caches provide optimal pruning behavior, thread safety, and don’t copy keys, unlike a dictionary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the count limite and cost limits to manipulate the metrics that define when objects are pruned from the cache. But never rely on those metrics to be hard limits; they are purely guidance for the cache.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt; objects with a cache to provide autopurging data that is also automatically removed from the cache when purged.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Caches will make your applications more responsive if used correctly. Cache only data that is expensive to recalculate, such as data that needs to be fetched fromt he network or read from disk.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-51keep-initialize-and-load-implementations-lean&quot;&gt;Item 51：Keep initialize and load Implementations Lean&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Classes go through a load phase in which they have the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; method called on them if it has been implemented. This method may also be present in categories whereby the class load always happens before the category load. Unlike other mehtods, the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; method does not participate in overriding.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Before a class is used for the first time, it is sent the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; method. This method does participate in overriding, so it is usually best tocheck which class is being initialized.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Both implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; should be kept lean, which helps to keep applications responsive and reduces the likelihood that interdependency cycles will be introduced.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; methods for setting up global state that cannot be done at compile time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-52remember-that-nstimer-retains-its-target&quot;&gt;Item 52：Remember that NSTimer Retains Its Target&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; object retains its target until the time is invalidated either because it fires or through an explicit call to invalidate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retain cycles are easy to introduce through the use of repeating timers and do so if the target of a timer retains the timer. This may happen directly or indirectly through other objects in the object graph.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An extension to &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; to use blocks can be used to break the retain cycle. Until this is made part of the public &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; interface, the functionality must be added through a category.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;2 Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Effective-Objective-C-2-0-Specific-Development/dp/0321917014&quot;&gt;《Effective Objective-C 2.0: 52 Specific Ways to Improve Your iOS and OS X Programs (Effective Software Development Series)》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="Effective" /><summary>目录</summary></entry><entry><title>EOC(六)：Blocks and GCD</title><link href="/01%20objective-c/2016/04/25/Effective-Objective-C-2.0(%E5%85%AD)_Blocks-and-GCD.html" rel="alternate" type="text/html" title="EOC(六)：Blocks and GCD" /><published>2016-04-25T00:00:00+08:00</published><updated>2016-04-25T00:00:00+08:00</updated><id>/01%20objective-c/2016/04/25/Effective Objective C  2.0(六)_Blocks and GCD</id><content type="html" xml:base="/01%20objective-c/2016/04/25/Effective-Objective-C-2.0(%E5%85%AD)_Blocks-and-GCD.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#blocks-and-gcd&quot; id=&quot;markdown-toc-blocks-and-gcd&quot;&gt;1 Blocks and GCD&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#item-37understand-blocks&quot; id=&quot;markdown-toc-item-37understand-blocks&quot;&gt;Item 37：Understand Blocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-38create-typedefs-for-common-block-types&quot; id=&quot;markdown-toc-item-38create-typedefs-for-common-block-types&quot;&gt;Item 38：Create typedefs for Common Block Types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-39use-handler-blocks-to-reduce-code-separation&quot; id=&quot;markdown-toc-item-39use-handler-blocks-to-reduce-code-separation&quot;&gt;Item 39：Use Handler Blocks to Reduce Code Separation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-40avoid-retain-cycles-introduced-by-blocks-referencing-the-object-owning-them&quot; id=&quot;markdown-toc-item-40avoid-retain-cycles-introduced-by-blocks-referencing-the-object-owning-them&quot;&gt;Item 40：Avoid Retain Cycles Introduced by Blocks Referencing the Object Owning Them&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-41prefer-dispatch-queues-to-locks-for-synchronization&quot; id=&quot;markdown-toc-item-41prefer-dispatch-queues-to-locks-for-synchronization&quot;&gt;Item 41：Prefer Dispatch Queues to Locks for Synchronization&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-42prefer-gcd-to-performselector-and-friends&quot; id=&quot;markdown-toc-item-42prefer-gcd-to-performselector-and-friends&quot;&gt;Item 42：Prefer GCD to performSelector and Friends&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-43know-when-to-use-gcd-and-when-to-use-operation-queues&quot; id=&quot;markdown-toc-item-43know-when-to-use-gcd-and-when-to-use-operation-queues&quot;&gt;Item 43：Know When to Use GCD and When to Use Operation Queues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-44use-dispatch-groups-to-take-advantage-of-platform-scaling&quot; id=&quot;markdown-toc-item-44use-dispatch-groups-to-take-advantage-of-platform-scaling&quot;&gt;Item 44：Use Dispatch Groups to Take Advantage of Platform Scaling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-45use-dispatchonce-for-thread-safe-single-time-code-execution&quot; id=&quot;markdown-toc-item-45use-dispatchonce-for-thread-safe-single-time-code-execution&quot;&gt;Item 45：Use dispatch_once for Thread-Safe Single-Time Code Execution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-46avoid-dispatchgetcurrentqueue&quot; id=&quot;markdown-toc-item-46avoid-dispatchgetcurrentqueue&quot;&gt;Item 46：Avoid dispatch_get_current_queue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;2 Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;blocks-and-gcd&quot;&gt;1 Blocks and GCD&lt;/h2&gt;

&lt;h3 id=&quot;item-37understand-blocks&quot;&gt;Item 37：Understand Blocks&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Blocks are lexical closures for C, C++, and Objective-C&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blocks can optionally take parameters and optionally return values.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blocks can be stack allocated, heap allocated, or global. A stack-allocated block can be copied onto the heap, at which point it is reference counted just like standard Objective-C objects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-38create-typedefs-for-common-block-types&quot;&gt;Item 38：Create typedefs for Common Block Types&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use type definitions to make it easier to use block variables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Always follow the naming conventions when defining new types such that you do not clash with other types.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t be afraid to define multiple types for the same block signature. You may want to refactor one  place that uses a certain block type by changing the block signature but not another.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-39use-handler-blocks-to-reduce-code-separation&quot;&gt;Item 39：Use Handler Blocks to Reduce Code Separation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Handler blocks have the benefit of being associated with an object directly rather than delegation, which often requires switching based on the object if multiple instances are being observed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When designing an API that uses handler blocks, consider passing a queue as a parameter, to designate the queue on which the block should be enqueued.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-40avoid-retain-cycles-introduced-by-blocks-referencing-the-object-owning-them&quot;&gt;Item 40：Avoid Retain Cycles Introduced by Blocks Referencing the Object Owning Them&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Be aware of the potential problem of retain cycles introduced by blocks that capture objects that directly or indirectly retain the block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure that retain cycles are broken at an opportune moment, but never leave responsibility to the consumer of your API.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-41prefer-dispatch-queues-to-locks-for-synchronization&quot;&gt;Item 41：Prefer Dispatch Queues to Locks for Synchronization&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch queues can be used to provide synchronization semantics and offer a simpler alternative to @symchronized blocks or NSLock objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mixing synchronous and asynchronous dispatches can provide the same syncrhonized behavior as with normal blocking but withou blocking the calling thread in the asynchronous dispatches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conurrent queues and barrier blocks can be used to make synchronized behavior more efficient, such as &lt;strong&gt;Reader vs Writer Problem&lt;/strong&gt; , &lt;a href=&quot;/01%20objective-c/2016/04/03/OC-Concurrency(二)_GCD-part-I_用法详解.html#using-dispatch-barriers&quot;&gt;see more&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;dispatch_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSomeString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 	
	&lt;span class=&quot;n&quot;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;item-42prefer-gcd-to-performselector-and-friends&quot;&gt;Item 42：Prefer GCD to performSelector and Friends&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The performSelector family of methods is potentially dangerous with respect to memory management. If it has no way of determining what selector is going to be performed, the ARC compiler cannot insert the appropriate memory-management calls.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The family of methods is very limited with respect to the return type and the number of parameters that can be sent to the method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The methods that allow performing a selector on a different thread are better replaced with certain GCD calls using blocks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Using performSelector:withObject:afterDelay:
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;afterDelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Prefer using dispatch_after
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;item-43know-when-to-use-gcd-and-when-to-use-operation-queues&quot;&gt;Item 43：Know When to Use GCD and When to Use Operation Queues&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch queues are not the only solution to multithreading and task management.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Operation queues provide a high-level, Objective-C API that can do most of what plain GCD do. Operation can do extra operation such as &lt;strong&gt;Cancelling perations&lt;/strong&gt;,&lt;strong&gt;Operation dependencies&lt;/strong&gt;,&lt;strong&gt;Key-Value Observing of operation properties&lt;/strong&gt;,&lt;strong&gt;Operation priorities&lt;/strong&gt;,&lt;strong&gt;Reuse of operations&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-44use-dispatch-groups-to-take-advantage-of-platform-scaling&quot;&gt;Item 44：Use Dispatch Groups to Take Advantage of Platform Scaling&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch groups are used to group a set of tasks. You can optionally be notified when the group finishes executing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch groups can be used to execute multiple tasks concurrently through a concurrent dispatch queue. In this case, GCD handles the scheduling of multiple tasks at the same time, based on system resources. Writing this yourself would require a lot of code. &lt;a href=&quot;/01%20objective-c/2016/04/03/OC-Concurrency(二)_GCD-part-I_用法详解.html#using-dispatch-barriers&quot;&gt;See more&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-45use-dispatchonce-for-thread-safe-single-time-code-execution&quot;&gt;Item 45：Use dispatch_once for Thread-Safe Single-Time Code Execution&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Thread-safe single-code execution is a common task. GCD provides an easy-to-use tool for this with the dispatch_once funtion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The token should be declared in static or global scope such that it is the same token being passed in for each block that should executed once.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-46avoid-dispatchgetcurrentqueue&quot;&gt;Item 46：Avoid dispatch_get_current_queue&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt; function does not in general perform how you would expect. It has been deprecated and should now be used only for debugging.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Queue-specific data can be used to solve the usual reason for using &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queueu&lt;/code&gt;, which is to avoid dealocks owing to nonreentrant code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;2 Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Effective-Objective-C-2-0-Specific-Development/dp/0321917014&quot;&gt;《Effective Objective-C 2.0: 52 Specific Ways to Improve Your iOS and OS X Programs (Effective Software Development Series)》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="Effective" /><summary>目录</summary></entry><entry><title>EOC(五)：Memory Management</title><link href="/01%20objective-c/2016/04/24/Effective-Objective-C-2.0(%E4%BA%94)_Memory-Management.html" rel="alternate" type="text/html" title="EOC(五)：Memory Management" /><published>2016-04-24T00:00:00+08:00</published><updated>2016-04-24T00:00:00+08:00</updated><id>/01%20objective-c/2016/04/24/Effective Objective C  2.0(五)_Memory Management</id><content type="html" xml:base="/01%20objective-c/2016/04/24/Effective-Objective-C-2.0(%E4%BA%94)_Memory-Management.html">&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#memory-management&quot; id=&quot;markdown-toc-memory-management&quot;&gt;1 Memory Management&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#item-29understand-reference-counting&quot; id=&quot;markdown-toc-item-29understand-reference-counting&quot;&gt;Item 29：Understand Reference Counting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-30user-arc-to-make-reference-counting-easier&quot; id=&quot;markdown-toc-item-30user-arc-to-make-reference-counting-easier&quot;&gt;Item 30：User ARC to Make Reference Counting Easier&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-31release-references-and-clean-up-observation-state-only-in-dealloc&quot; id=&quot;markdown-toc-item-31release-references-and-clean-up-observation-state-only-in-dealloc&quot;&gt;Item 31：Release References and Clean Up Observation State Only in dealloc&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-32beware-of-memory-management-with-exception-safe-code&quot; id=&quot;markdown-toc-item-32beware-of-memory-management-with-exception-safe-code&quot;&gt;Item 32：Beware of Memory Management with Exception-Safe Code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-33use-weak-references-to-avoid-retain-cycles&quot; id=&quot;markdown-toc-item-33use-weak-references-to-avoid-retain-cycles&quot;&gt;Item 33：Use Weak References to Avoid Retain Cycles&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-34use-autorelease-pool-blocks-to-reduce-high-memory-waterline&quot; id=&quot;markdown-toc-item-34use-autorelease-pool-blocks-to-reduce-high-memory-waterline&quot;&gt;Item 34：Use Autorelease Pool Blocks to Reduce High-Memory Waterline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-35use-zombies-to-help-debug-memory-management-problems&quot; id=&quot;markdown-toc-item-35use-zombies-to-help-debug-memory-management-problems&quot;&gt;Item 35：Use Zombies to Help Debug Memory-Management Problems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#item-36avoid-using-retaincount&quot; id=&quot;markdown-toc-item-36avoid-using-retaincount&quot;&gt;Item 36：Avoid Using retainCount&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;2 Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;memory-management&quot;&gt;1 Memory Management&lt;/h2&gt;

&lt;h3 id=&quot;item-29understand-reference-counting&quot;&gt;Item 29：Understand Reference Counting&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Reference-counting memory management is based on a counter that is incremented and decremented. An object is created with a count of at least 1. An object with a positive retain count is alive. When the retain count drops to 0, the object is destroyed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As it goes through its life cycle, an object is retained and released by other objects holding references to it. Retaining and releasing increments and decrements the retain count respectively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-30user-arc-to-make-reference-counting-easier&quot;&gt;Item 30：User ARC to Make Reference Counting Easier&lt;/h3&gt;

&lt;ol&gt;

&lt;li&gt; Method-Naming Rules Applied by ARC. &lt;code&gt;alloc&lt;/code&gt;,&lt;code&gt;new&lt;/code&gt;,&lt;code&gt;copy&lt;/code&gt;,&lt;code&gt;mutableCopy&lt;/code&gt; methods return an object owned by the caller method. 


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
    * The method name begins with &#39;new&#39;, and since &#39;person&#39; * already has an unbalanced +1 retain count from the
    * &#39;alloc&#39;, no retains, releases, or autoreleases are
    * required when returning.
    */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somePerson&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
    * The method name does not begin with one of the &quot;owning&quot;
    * prefixes, therefore ARC will add an autorelease when
    * returning &#39;person&#39;.
    * The equivalent manual reference counting statement is:
    *
    */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;somePerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
    * At this point, &#39;personOne&#39; and &#39;personTwo&#39; go out of scope, therefore ARC needs to clean them up as required. 
    * - &#39;personOne&#39; was returned as owned by this block of code, so it needs to be released.
    * - &#39;personTwo&#39; was returned not owned by this block of code, so it does not need to be released. 
    * The equivalent manual reference counting cleanup code is:
    * [personOne release];
    */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/li&gt;


&lt;li&gt; Memory-Management Semantics of Variables. &lt;code&gt;_strong&lt;/code&gt;,&lt;code&gt;_unsafe_unretained&lt;/code&gt;,&lt;code&gt;__weak&lt;/code&gt;,&lt;code&gt;_autoreleasing&lt;/code&gt;.
&lt;/li&gt;

&lt;li&gt; ARC Handling of Instance Variables. ARC also handles the memory management of instance variables. Doing so requires ARC to automatically generate the required cleanup code during deallocation. 


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dealloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_bar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dealloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;/li&gt;

&lt;li&gt; Overriding the Memory-Management Methods  &lt;/li&gt;

&lt;/ol&gt;

&lt;h3 id=&quot;item-31release-references-and-clean-up-observation-state-only-in-dealloc&quot;&gt;Item 31：Release References and Clean Up Observation State Only in dealloc&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; method should be used only to release references to other objects and to unregister anything that needs to be, such as &lt;strong&gt;Key-Value Observing(KVO)&lt;/strong&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt; notifications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If an object holds onto system resources, such as file descriptors, there should be a method for releasing these resources. It should be the contract with the consumer of such a class to call this &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; method when finished using the resources.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Method calls should be avoided in &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; methods in case those methods try to perform asynchronous work or end up assuming that the object is in a normal state, which it won’t be.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-32beware-of-memory-management-with-exception-safe-code&quot;&gt;Item 32：Beware of Memory Management with Exception-Safe Code&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When exceptions are caught, care should be taken to ensure that any required cleanup is done for objects created within the try block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By default, ARC does not emit code that handles cleanup when exceptions are thrown. This can be enabled with a compiler flag but produces code that is larger and comes with a runtime cost.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-33use-weak-references-to-avoid-retain-cycles&quot;&gt;Item 33：Use Weak References to Avoid Retain Cycles&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Retain cycles can be avoided by making certain references weak.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Weak references may or may not be autonilling. Autonilling is a new feature introduced with ARC and is implemented in the runtime. Autonilling weak references are always safe to read, as they will never contain a reference to a deallocated object.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-34use-autorelease-pool-blocks-to-reduce-high-memory-waterline&quot;&gt;Item 34：Use Autorelease Pool Blocks to Reduce High-Memory Waterline&lt;/h3&gt;

&lt;ol&gt;

&lt;li&gt; Autoreleas pools are arranged in a stack, with an object being added to the topmost pool when it is sent the autorelease message. &lt;/li&gt;

&lt;li&gt; Correct application of autorelease pools can help reduce the high-memory waterline of an application.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databaseRecords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@autoreleasepool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOCPerson&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/li&gt;

&lt;li&gt; Modern autorelease pools using the new &lt;code&gt;@autoreleasepool {} &lt;/code&gt; syntax are cheap. &lt;/li&gt;

&lt;/ol&gt;

&lt;h3 id=&quot;item-35use-zombies-to-help-debug-memory-management-problems&quot;&gt;Item 35：Use Zombies to Help Debug Memory-Management Problems&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When an object is deallocated, it can optionally be turned into a zombie instead of being deallocated. This feature is turned on by using the envrionment flag NSZombieEnabled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An object is turend into a zombie by manipulating its isa pointer to change the object’s class to a special zombie class. A zombie class responds to all selectors by aborting the application after printing a message to indicate what message was sent to what object.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;item-36avoid-using-retaincount&quot;&gt;Item 36：Avoid Using retainCount&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The retain count of an object might seem useful but usually is not, because the absolute retain count at any given time does not give a complete picture of an object’s lifetime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When ARC came along, the &lt;code class=&quot;highlighter-rouge&quot;&gt;retainCount&lt;/code&gt; method was deprecated, and using it causes a compiler error to be emitted.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;2 Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Effective-Objective-C-2-0-Specific-Development/dp/0321917014&quot;&gt;《Effective Objective-C 2.0: 52 Specific Ways to Improve Your iOS and OS X Programs (Effective Software Development Series)》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shunmian</name><email>shunmian@gmail.com</email></author><category term="Effective" /><summary>目录</summary></entry></feed>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>SHUNMIAN</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
			<item>
				<title>CircleCI</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-circle-ci&quot; id=&quot;markdown-toc-1-circle-ci&quot;&gt;1. Circle CI&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-what-is-circle-ci&quot; id=&quot;markdown-toc-11-what-is-circle-ci&quot;&gt;1.1 What is Circle CI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-how-to-integrate-circle-ci-to-your-repository&quot; id=&quot;markdown-toc-12-how-to-integrate-circle-ci-to-your-repository&quot;&gt;1.2 How to integrate Circle CI to your repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-circle-ci&quot;&gt;1. Circle CI&lt;/h2&gt;

&lt;h3 id=&quot;11-what-is-circle-ci&quot;&gt;1.1 What is Circle CI&lt;/h3&gt;

&lt;p class=&quot;img_middle_lg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-24 Continous Integartion/2018-05-16-CircleCI/What is CircleCI.png&quot; alt=&quot;Vim summary&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-how-to-integrate-circle-ci-to-your-repository&quot;&gt;1.2 How to integrate Circle CI to your repository&lt;/h3&gt;

&lt;p&gt;TBC.&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;《CircleCI Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Wed, 16 May 2018 00:00:00 +0800</pubDate>
				<link>/-24%20continous%20integration/2018/05/16/CircleCI.html</link>
				<guid isPermaLink="true">/-24%20continous%20integration/2018/05/16/CircleCI.html</guid>
			</item>
		
			<item>
				<title>Jest</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-test-框架原型&quot; id=&quot;markdown-toc-1-test-框架原型&quot;&gt;1. Test 框架原型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-基本数据结构测试&quot; id=&quot;markdown-toc-11-基本数据结构测试&quot;&gt;1.1 基本数据结构测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-异步测试&quot; id=&quot;markdown-toc-12-异步测试&quot;&gt;1.2 异步测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-group测试&quot; id=&quot;markdown-toc-13-group测试&quot;&gt;1.3 Group测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-mock测试&quot; id=&quot;markdown-toc-14-mock测试&quot;&gt;1.4 Mock测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-test-coveraage-report-intepration&quot; id=&quot;markdown-toc-15-test-coveraage-report-intepration&quot;&gt;1.5 Test Coveraage Report Intepration&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-test-框架原型&quot;&gt;1. Test 框架原型&lt;/h2&gt;

&lt;h3 id=&quot;11-基本数据结构测试&quot;&gt;1.1 基本数据结构测试&lt;/h3&gt;

&lt;h3 id=&quot;12-异步测试&quot;&gt;1.2 异步测试&lt;/h3&gt;

&lt;h3 id=&quot;13-group测试&quot;&gt;1.3 Group测试&lt;/h3&gt;

&lt;h3 id=&quot;14-mock测试&quot;&gt;1.4 Mock测试&lt;/h3&gt;

&lt;p&gt;TBC.&lt;/p&gt;

&lt;h3 id=&quot;15-test-coveraage-report-intepration&quot;&gt;1.5 Test Coveraage Report Intepration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Statements:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Branches:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functions:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lines:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;《Jest Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Mon, 16 Apr 2018 00:00:00 +0800</pubDate>
				<link>/-23%20test/2018/04/16/Jest.html</link>
				<guid isPermaLink="true">/-23%20test/2018/04/16/Jest.html</guid>
			</item>
		
			<item>
				<title>Vim</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-vim-总结&quot; id=&quot;markdown-toc-1-vim-总结&quot;&gt;1. Vim 总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-vim-总结&quot;&gt;1. Vim 总结&lt;/h2&gt;

&lt;p class=&quot;img_middle_lg&quot;&gt;&lt;img src=&quot;/assets/images/posts/20_TextEditor/2017-10-01-Vim/vim-cheat-sheet-advanced.png&quot; alt=&quot;Vim summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/vim-commands-cheat-sheet/&quot;&gt;《Vim Masterclass》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sun, 01 Oct 2017 00:00:00 +0800</pubDate>
				<link>/-20%20text%20editor/2017/10/01/Vim.html</link>
				<guid isPermaLink="true">/-20%20text%20editor/2017/10/01/Vim.html</guid>
			</item>
		
			<item>
				<title>iOS 2D Game - SpriteKit入门(一)</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-spritekit-概览&quot; id=&quot;markdown-toc-1-spritekit-概览&quot;&gt;1. SpriteKit 概览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot; id=&quot;markdown-toc-2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sknode&quot; id=&quot;markdown-toc-21-sknode&quot;&gt;2.1 SKNode&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#211-skscene&quot; id=&quot;markdown-toc-211-skscene&quot;&gt;2.1.1 SKScene&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#212-skspritenode&quot; id=&quot;markdown-toc-212-skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#213-sklabelnode&quot; id=&quot;markdown-toc-213-sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#214-skemitternode&quot; id=&quot;markdown-toc-214-skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-skphysicsworld--skphysicsbody&quot; id=&quot;markdown-toc-22-skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#221-skphysicsworld&quot; id=&quot;markdown-toc-221-skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#222-skphysicsbody&quot; id=&quot;markdown-toc-222-skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-skaction&quot; id=&quot;markdown-toc-23-skaction&quot;&gt;2.3. SKAction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3其它类&quot; id=&quot;markdown-toc-3其它类&quot;&gt;3.其它类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-总结&quot; id=&quot;markdown-toc-4-总结&quot;&gt;4 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-spritekit-概览&quot;&gt;1. SpriteKit 概览&lt;/h2&gt;

&lt;p&gt;SpriteKit是Apple官方的2D游戏框架， 让开发者在iOS 和OS 平台上更高效的开发2D游戏。&lt;/p&gt;

&lt;p&gt;学习SpriteKit， 最权威的资料应该是苹果官方文档 -
&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html&quot;&gt;SpriteKit Programming Guide&lt;/a&gt;。 该文档很全面但是不适合初学者。 对于初学者， 理解SpriteKit背后的设计rationale才能更好的应用它。 那么SpriteKit的设计rationale是什么呢？&lt;/p&gt;

&lt;p&gt;对于一个2D游戏来说， 设计应该分为三个部分(以超级马里奥为例):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;View: 即视图显示，用于展示各个Sprite(精灵)，例如马里奥图片和子弹图片;&lt;/li&gt;
  &lt;li&gt;Physics Model:即物理模型， 包括质量， 体积(2D游戏是面积)， 密度， 碰撞， 地球引力等， 例如超级马里奥碰到水管会弹回来， 往上跳会下落。&lt;/li&gt;
  &lt;li&gt;Action:即 物理模型受到的外部作用力。例如超级马里奥里的空中台阶自己来回移动(开发者给其施加一个永恒的来回运动的作用力)。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这三个方面分别对应SpriteKit里面的SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction。&lt;/p&gt;

&lt;h2 id=&quot;2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/h2&gt;
&lt;h3 id=&quot;21-sknode&quot;&gt;2.1 SKNode&lt;/h3&gt;

&lt;p&gt;SKNode 是 SpriteKit 显示视图的Building Block。它能提供一个游戏视图的基本属性和方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKNode Class

属性:
.zPosition              // 视图的z方向的距离，用于标定重叠视图的显示顺序;
.xScale                 // x方向的视图放大倍数;
.yScale                 // y方向的视图放大倍数;
.alpha                  // 视图的alpha值;
.hidden                 // 视图是否隐藏;

方法:
-addChild:              // 增加子SKNode，与UIView 的 -addSubView: 类似;
-removeFromParent:      // 从父SKNode移除，与 UIView的removeFromSuperview 类似;
-runAction:             // 运行一个SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们一般不直接用它，它下面有几个子类，其中最常见的是以下4个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SKEffectNode: 用于缓存，渲染，加滤镜于图片。它的子类SKScene 用于展示所有的SKNode，是游戏场景;&lt;/li&gt;
  &lt;li&gt;SKSpriteNode: 用于展示精灵，如超级马里奥图片;&lt;/li&gt;
  &lt;li&gt;SKLabelNode: 用于展示单行文本，如游戏时间;&lt;/li&gt;
  &lt;li&gt;SKEmitterNode: 用于展示粒子，例如喷射火焰的岩浆;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们就这四个类做一个简单的介绍。&lt;/p&gt;

&lt;h4 id=&quot;211-skscene&quot;&gt;2.1.1 SKScene&lt;/h4&gt;
&lt;p&gt;SKScene 是游戏关口(level)，游戏中的一个场景，例如马里奥的第一关和第二关分别是两个SKCene实例。在这个场景中，包含了所有其他SKNode(或者其子类)，比如马里奥(SKSpriteNode)，游戏时间(SKLabelNode)，喷射火焰的岩浆(SKEmitterNode)。它的主要属性和方法有:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKScene Class

属性:
.view                   // 关口的父视图，是一个SKView，用来展示各个SKScene关口;
.physicsWorld           // 世界的物理模型，是一个SKPhysicsWorld实例，这个后面会介绍;

方法:
-initWithSize:          // 初始化方法;
+SceneWithSize:         // 初始化类工厂方法;
-didMoveToView:         // 当SKScene实例被SKView展示时调用，类似UIView的-didMoveToSuperview;
-addChild:              // 增加子SKNode，如马里奥(SKSpriteNode);&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;212-skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/h4&gt;
&lt;p&gt;SKSpriteNode是用来展示sprite，那么何为sprite呢，sprite有什么作用呢? Wiki中是这样定义的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sprite: two-dimensional image or animation that is integrated into a larger scene.Initially including just graphical objects handled &lt;strong&gt;separately&lt;/strong&gt; from the memory bitmap of a video display，this now includes various manners of graphical overlays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sprite是从整个display独立出来渲染的2D图片。如何理解这句话呢，在sprite出现之前，2D游戏要渲染一帧图片(比如马里奥在一个蓝天白云的背景前)，需要把整个图片(马里奥+背景)计算完后再渲染，其中背景的渲染在每一帧中都重复。sprite的出现正是为了避免这一重复。马里奥是一个sprite，他在一个固定的背景前跳跃，只需要将马里奥的每一帧渲染出来叠在背景(背景不需要重复计算渲染)即可，这就是为什么sprite被称为从整个display独立出来渲染的2D图片。sprite的思想在几十年前就已经有了，SpriteKit只是沿袭了2D游戏设计中运用sprite这一思想，用SKSpriteNode来表示sprite类。我们来看下SKSpriteNode的属性和方法&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKSpriteNode Class

属性:
.size                       // 大小;
.physicsBody                // 物体的物理模型，是一个SKPhysicsBody实例，这个后面会介绍;

方法:
+spriteNodeWithImageNamed:  // 类工厂方法，用图片创建sprite;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;213-sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/h4&gt;
&lt;p&gt;SKLabelNode是SpriteKit用来展示text，它的方法和属性如下。有一点需要注意的是它只能显示单行文本。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKLabelNode Class

属性:
.fontSize               // 字体大小;
.color                  // 字体颜色;
.fontName               // 字体名字;

方法:
-initWithFontNamed:     // 通过字体名字初始化方法;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;214-skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/h4&gt;
&lt;p&gt;SKEmitterNode是SpriteKit用来展示粒子系统的，下面介绍下它的常见使用方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;subclass一个SpriteKit Particles Files ( ctrl + N –&amp;gt; iOS，Resources，SpriteKit Particles Files –&amp;gt; choose 1 of the eight template –&amp;gt; save，你会得到一个.sks 和.png 文件，点击.sks文件:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_1.png&quot; alt=&quot;SKEmitterNode_1&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_2.png&quot; alt=&quot;SKEmitterNode_2&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_3.png&quot; alt=&quot;SKEmitterNode_3&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_4.png&quot; alt=&quot;SKEmitterNode_4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在.sks文件右侧调整各参数，例如有粒子平均产生率(BirthRate) 单位是个/秒。右边的range是一个分布，在平均产生率上 ±  range/2 分布。particle texture 是粒子的纹路，你可以选择自己加入的图片文件。&lt;/li&gt;
  &lt;li&gt;调整完成后如何在code中调用.sks文件呢:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKEmitterParticle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSKeyedUnarchiver&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unarchiveObjectWithFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;FireParticle&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;sks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;particleBirthRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 用NSBundle读取.sks 文件，然后可以进一步修改其属性。这样就完成了SpriteKit Particles Files 的子类化和应用。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/h3&gt;
&lt;p&gt;SpriteKit 里表示物理模型的有两个类，SKPhysicsWorld &amp;amp; SKPhysicsBody，前者属于SKScene，后者属于SKNode其他子类。SKPhysicsWorld 和 SKPhysicsBody 都继承与NSObject。我们先来看看SKPhysicsWorld。&lt;/p&gt;

&lt;h4 id=&quot;221-skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/h4&gt;
&lt;p&gt;对于一个物理世界来说，例如我们的地球，有一些属性决定了我们日常生活的基础，如重力加速度。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsWorld Class

属性:
.gravity:                   // 重力加速度了， 通过CGVectorMaker(0，-9.8)获得现实生活一个重力加速度。第一个参数是x轴，向右为正，第二个参数是y轴，向上为正;
.contactDelegate            // SKPhyicsContactDelegate 实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;又比如物体碰撞后的处理者，可以理解为物体碰撞后有一个裁判需要对此进行处理，在SpriteKit中是SKPhyicsContactDelegate。而SKPhysicsWorld 的contactDelegate属性就指向这样一个delegate，也就是说由物理世界充当裁判的角色。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsContactDelegate Class

方法:
-didBeginContact:       // 碰撞开始;
-didEndContact:         // 碰撞结束;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于SKPhysicsContactDelegate两个方法的使用我们后面介绍。&lt;/p&gt;

&lt;h4 id=&quot;222-skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/h4&gt;
&lt;p&gt;SKPhysicsBody代表物理模型里的物体，它有质量，体积(2D 游戏里是面积)，密度，线速度，角速度，自旋速度等。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsBody Class

属性:
.mass                       // 质量，单位kg;
.area                       // 面积，单位m*m;
.density                    // 密度，单位kg/m*m;
.friction                   // 表面粗糙度，0.0-1.0;
.restitution                // 碰撞时，反射速度/入射速度，0.0-1.0;
.linearDamping              // 物体线速度受液体或者气体(空气)摩擦的影响， 0.0-1.0;
.dynamic                    // YES，动态; NO，静态，与SKPhysicsWorld相连，不受碰撞影响;
.categoryBitMask            // 自身的contact &amp;amp; collision ID;
.contactTestBitMask         // 外界contact测试的ID集合;
.collisionBitMask           // 外界collision的ID集合;

方法:
+bodyWithRectangleOfSize:   // 创建Volume-physicsBody的一种类工厂方法;
+bodyWithEdgeLoopFromRect:  // 创建Edge-physicsBody的一种类工厂方法;
-applyImpulse:              // 被施加外部瞬时力;
-applyForce:                // 被施加外部永恒力;
-runAction:                 // 运行一个SKAction实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;.dynamics 是一个BOOL，设置为NO时，静止(可以理解为与SKPhyisicsWorld相连)，位置不受碰撞前后影响， 例如马里奥里的乌龟壳，碰到水管后反弹，水管静止，这里水管的dynamic就是NO， 乌龟壳的dynmaics就是YES。&lt;/p&gt;

&lt;p&gt;要创建一个在框里永远碰撞而不停下的ball，应设置如下friction，restituition， linearDamping:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restitution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearDamping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;SKPhysicsBody的创建分为两种，一种是Volume-physicsBody，就是有体积(2D里是面积)的物体，有体积意味着有质量，受牛顿定律影响;另一种是只有边缘没有体积的Edge-physicsBody，如上面那个装永动球的箱子，我们只关心箱子的边框，用 +bodyWithEdgeLoopFromRect: 创建它并设置其dynamics = NO 即可。&lt;/p&gt;

&lt;p&gt;下面重点要介绍的是接触和碰撞。
SpriteKit为每个物体在接触和碰撞时设定了一个身份证——categoryBitMask，该属性唯一标定了接触和碰撞时每个物体的身份，是一个32 bit的数，我们下面先看code再解释:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们设置了3种uint32_t的静态常量，分别代表马里奥，子弹，乌龟。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.categoryBitMask = MariaCategory;
tortoise.categoryBitMask = TortoiseCategory;
bullet.categoryBitMask = BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后分别给maria，tortoise以及bullte的categoryBitMask设置为相应值。同时我们需要在以下情形中判断contact发生并作出相应，如马里奥碰到乌龟，马里奥die;子弹碰到乌龟，乌龟die:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;maria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面将maria感兴趣的contact ID集设置为乌龟，乌龟设置为子弹和马里奥，子弹设置为乌龟。用32位非常便于取或操作，同时也限定了一个游戏场景里的碰撞接触的身份证只能有32个。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameScene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContactDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicsWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didBeginContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//我们来简单举一个子弹打到乌龟，乌龟die的contact测试。
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SKPhysicsBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;tortoise die: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样当子弹打到乌龟，GameScene 作为SKPhysicsContactDelegate就会响应-didBeginContact: 方法，然后判断情形，如果是，则打印出来”tortoise die:tortoise的object信息”。&lt;/p&gt;

&lt;p&gt;了解了categoryBitMask 和contactTestBitMask， 我们再来看collisionBitMask就简单了，它表示物体之间会不会intersect，也是32位数。默认是32个1，表示与任何物体碰撞都不会穿过那个物体。如果你需要将某个物体穿过另一个物体，比如子弹打到马里奥，直接穿过(当然游戏中不可能发生):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.collisionBitMask = ~BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后力的施加我们在SKAction里介绍。&lt;/p&gt;

&lt;h3 id=&quot;23-skaction&quot;&gt;2.3. SKAction&lt;/h3&gt;
&lt;p&gt;SKAction表示一个动作，由SKNode得 -runAction: 方法执行，它有几十个方法。下面列出几个比较典型的， 它的实例化大部分都是类工厂方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKAction Class

初始化方法:
+moveByX:y:duration:                    // 移动一个SKNode;
+rotationByAngule:duration:             // 转动一个SKNode;
+hide                                   // 隐藏一个SKNode， 对应的还有 +unhide;
+applyForce:duration:                   // 施加力;
+playSoundFileNamed:waitForCompletion:  // 播放音频文件;
+removeFromParent                       // 将SKNode从父node里移除;
+waitForDuration:                       // 等待的动作，在SKAction group和sequence里用到;

+group:                                 // 组合几个SKAction，从时间起点，这几个SKAction同时开始;
+sequence:                              // 串联几个SKAction，从时间起始点，下一个的开始在上一个结束后才执行;
+repeatActionForever:                   // 永远重复SKAction;
-reversedAction:                        // 逆向一个SKAction，如原来从左到右2秒，现在从右到左两秒;

+runBlock:queque:                       // 在队列里执行SKAction;
+customActionWithDuration:actionBlock:  // 定制SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;例如马里奥中需要一个空中台阶，“”从左到右2秒，等待0.5秒，从右到左2秒，等待0.5秒 ”的sequence永远运行下去，code如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveByX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reversedAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatActionForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3其它类&quot;&gt;3.其它类&lt;/h2&gt;
&lt;p&gt;在SKView中，场景的不同切换要用到SKTransition，self指一个scene:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doorsOpenHorizontalWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winScene&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;4-总结&quot;&gt;4 总结&lt;/h2&gt;
&lt;p&gt;以上对于SKSpriteKit里的大部分常用类及其用法做了介绍，相信读者能够自己画出SKSpriteKit的类图关系，再回过头来跟着online的SKSpriteKit的tutorial做一遍的时候，自然就了然于心。后面还有一篇从各个小topic来看SKSpriteKit。&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Dec 2016 00:00:00 +0800</pubDate>
				<link>/01%20objective-c/2016/12/30/SpriteKit.html</link>
				<guid isPermaLink="true">/01%20objective-c/2016/12/30/SpriteKit.html</guid>
			</item>
		
			<item>
				<title>Spring Framework</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-summary&quot; id=&quot;markdown-toc-1-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/03 Java/2016-11-11-Spring Framework/Spring Summary.png&quot; alt=&quot;Spring Summary.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/3897837/&quot;&gt;Spring 揭秘&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 11 Nov 2016 00:00:00 +0800</pubDate>
				<link>/03%20java/2016/11/11/Spring-Framework.html</link>
				<guid isPermaLink="true">/03%20java/2016/11/11/Spring-Framework.html</guid>
			</item>
		
			<item>
				<title>Core Java (Volume 1)</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-content&quot; id=&quot;markdown-toc-1-content&quot;&gt;1 Content&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#chapter-4-object-and-class&quot; id=&quot;markdown-toc-chapter-4-object-and-class&quot;&gt;Chapter 4: Object and Class&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#40-javac-and-java-command&quot; id=&quot;markdown-toc-40-javac-and-java-command&quot;&gt;4.0 &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#41-encapsulation-instance-field-polymorphism-instance-method-inheritance&quot; id=&quot;markdown-toc-41-encapsulation-instance-field-polymorphism-instance-method-inheritance&quot;&gt;4.1 Encapsulation (instance field), Polymorphism (instance method), Inheritance&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#42-relationship-between-classed&quot; id=&quot;markdown-toc-42-relationship-between-classed&quot;&gt;4.2 Relationship between classed&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#47-packages&quot; id=&quot;markdown-toc-47-packages&quot;&gt;4.7 Packages&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#48-the-class-path&quot; id=&quot;markdown-toc-48-the-class-path&quot;&gt;4.8 The Class Path&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#49-documentation-comments&quot; id=&quot;markdown-toc-49-documentation-comments&quot;&gt;4.9 Documentation Comments&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-inheritance&quot; id=&quot;markdown-toc-5-inheritance&quot;&gt;5 Inheritance&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#57-reflection&quot; id=&quot;markdown-toc-57-reflection&quot;&gt;5.7 Reflection&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-interface-lambda-inner-class-proxy&quot; id=&quot;markdown-toc-6-interface-lambda-inner-class-proxy&quot;&gt;6 Interface, Lambda, Inner Class, Proxy&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#61-interface-vs-abstract-class&quot; id=&quot;markdown-toc-61-interface-vs-abstract-class&quot;&gt;6.1 Interface vs Abstract Class&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#62-lambda&quot; id=&quot;markdown-toc-62-lambda&quot;&gt;6.2 Lambda&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-exceptions-assertions-logging&quot; id=&quot;markdown-toc-7-exceptions-assertions-logging&quot;&gt;7 Exceptions, Assertions, Logging&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#73-logging&quot; id=&quot;markdown-toc-73-logging&quot;&gt;7.3 Logging&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#8-generic-programming&quot; id=&quot;markdown-toc-8-generic-programming&quot;&gt;8 Generic Programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#9-collections&quot; id=&quot;markdown-toc-9-collections&quot;&gt;9 Collections&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#10-graphics-programming&quot; id=&quot;markdown-toc-10-graphics-programming&quot;&gt;10 Graphics Programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-event-handling&quot; id=&quot;markdown-toc-11-event-handling&quot;&gt;11 Event Handling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-user-interface-component-with-swing&quot; id=&quot;markdown-toc-12-user-interface-component-with-swing&quot;&gt;12 User Interface Component with Swing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-deploying-java-application&quot; id=&quot;markdown-toc-13-deploying-java-application&quot;&gt;13 Deploying Java Application&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-concurrency&quot; id=&quot;markdown-toc-14-concurrency&quot;&gt;14 Concurrency&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-others&quot; id=&quot;markdown-toc-2-others&quot;&gt;2 others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-content&quot;&gt;1 Content&lt;/h2&gt;

&lt;h3 id=&quot;chapter-4-object-and-class&quot;&gt;Chapter 4: Object and Class&lt;/h3&gt;

&lt;h4 id=&quot;40-javac-and-java-command&quot;&gt;4.0 &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command&lt;/h4&gt;

&lt;p&gt;In project root directory, run &lt;code class=&quot;highlighter-rouge&quot;&gt;javac MyClass.java&lt;/code&gt; to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;Myclass.java&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Myclass.class&lt;/code&gt; java bytecode, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;java MyClass&lt;/code&gt; to run  &lt;code class=&quot;highlighter-rouge&quot;&gt;Myclass.class&lt;/code&gt; on jvm.&lt;/p&gt;

&lt;h4 id=&quot;41-encapsulation-instance-field-polymorphism-instance-method-inheritance&quot;&gt;4.1 Encapsulation (instance field), Polymorphism (instance method), Inheritance&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Encapsulation (Information Hiding)&lt;/strong&gt;: instance field is the &lt;strong&gt;state&lt;/strong&gt; of an instance, which should be only accessed (read write) via instance method. If any instance field is changed from outside without calling the instance method, encapsulation is broken.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-03-React入门/JS React Summary.png&quot; alt=&quot;JS React Summary&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;42-relationship-between-classed&quot;&gt;4.2 Relationship between classed&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Dependence (“uses-a”);&lt;/li&gt;
  &lt;li&gt;Aggregation (“has-a”);&lt;/li&gt;
  &lt;li&gt;Inheritance (“is-a”);&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;47-packages&quot;&gt;4.7 Packages&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;you can only import &lt;code class=&quot;highlighter-rouge&quot;&gt;java.time.*&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;java.time&lt;/code&gt; is a single package rather than import &lt;code class=&quot;highlighter-rouge&quot;&gt;java.*&lt;/code&gt;,which means multiple package. In other words, a package is the largest unit for import.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;import with &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; key word: &lt;code class=&quot;highlighter-rouge&quot;&gt;import static java.lang.System.*&lt;/code&gt; allow you to call &lt;code class=&quot;highlighter-rouge&quot;&gt;out.println()&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;to export a class in a package, use &lt;code class=&quot;highlighter-rouge&quot;&gt;package com.mycompany&lt;/code&gt;(the package name) before declaring the class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;48-the-class-path&quot;&gt;4.8 The Class Path&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;classdir&lt;/code&gt; TBC&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;49-documentation-comments&quot;&gt;4.9 Documentation Comments&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;javadoc&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;5-inheritance&quot;&gt;5 Inheritance&lt;/h3&gt;

&lt;h4 id=&quot;57-reflection&quot;&gt;5.7 Reflection&lt;/h4&gt;

&lt;p&gt;More like &lt;code class=&quot;highlighter-rouge&quot;&gt;Objc&lt;/code&gt; &lt;strong&gt;Meta Class&lt;/strong&gt;, see &lt;a href=&quot;/01%20objective-c/2016/03/05/OC-Runtime(一)_Object-Model-Part-I_Object-Hierarchy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;6-interface-lambda-inner-class-proxy&quot;&gt;6 Interface, Lambda, Inner Class, Proxy&lt;/h3&gt;

&lt;h4 id=&quot;61-interface-vs-abstract-class&quot;&gt;6.1 Interface vs Abstract Class&lt;/h4&gt;

&lt;p&gt;One class cannot inheritant from multiple &lt;strong&gt;Abstract Class&lt;/strong&gt;, but can implement multiple &lt;strong&gt;Interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Interface can have &lt;strong&gt;static&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt; method.&lt;/p&gt;

&lt;h4 id=&quot;62-lambda&quot;&gt;6.2 Lambda&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Function Interface&lt;/strong&gt;: an interface with just one function declaration. One can create an instance by &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable r = () -&amp;gt; { task code }&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;7-exceptions-assertions-logging&quot;&gt;7 Exceptions, Assertions, Logging&lt;/h3&gt;

&lt;h4 id=&quot;73-logging&quot;&gt;7.3 Logging&lt;/h4&gt;

&lt;p&gt;7 Logging Levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SEVERE&lt;/li&gt;
  &lt;li&gt;WARNING&lt;/li&gt;
  &lt;li&gt;INFO&lt;/li&gt;
  &lt;li&gt;CONFIG&lt;/li&gt;
  &lt;li&gt;FINE&lt;/li&gt;
  &lt;li&gt;FINER&lt;/li&gt;
  &lt;li&gt;FINEST&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8-generic-programming&quot;&gt;8 Generic Programming&lt;/h3&gt;

&lt;h3 id=&quot;9-collections&quot;&gt;9 Collections&lt;/h3&gt;

&lt;p&gt;List, Set, Queue, Map&lt;/p&gt;

&lt;h3 id=&quot;10-graphics-programming&quot;&gt;10 Graphics Programming&lt;/h3&gt;

&lt;h3 id=&quot;11-event-handling&quot;&gt;11 Event Handling&lt;/h3&gt;

&lt;h3 id=&quot;12-user-interface-component-with-swing&quot;&gt;12 User Interface Component with Swing&lt;/h3&gt;

&lt;h3 id=&quot;13-deploying-java-application&quot;&gt;13 Deploying Java Application&lt;/h3&gt;

&lt;h3 id=&quot;14-concurrency&quot;&gt;14 Concurrency&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt; class, &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-others&quot;&gt;2 others&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Java native method ?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Factory method vs constructor: factory method can have different name while constructor must use the same name as class name; factory method can also return a subclass while constructor can only return that class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## 2 参考资料 ##&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Learning-React-Kirupa-Chinnathambi/dp/0134546318&quot;&gt;Learning React&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e&quot;&gt;React Higher Order Components in depth&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
				<link>/03%20java/2016/11/01/Core-Java-(Volume-1).html</link>
				<guid isPermaLink="true">/03%20java/2016/11/01/Core-Java-(Volume-1).html</guid>
			</item>
		
			<item>
				<title>Redux-Saga Part I：Basics</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-basic&quot; id=&quot;markdown-toc-1-basic&quot;&gt;1 Basic&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-using-saga-helpers&quot; id=&quot;markdown-toc-11-using-saga-helpers&quot;&gt;1.1 Using Saga Helpers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-declarative-effects&quot; id=&quot;markdown-toc-12-declarative-effects&quot;&gt;1.2 Declarative Effects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-dispatching-actions&quot; id=&quot;markdown-toc-13-dispatching-actions&quot;&gt;1.3 Dispatching Actions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-error-handling&quot; id=&quot;markdown-toc-14-error-handling&quot;&gt;1.4 Error Handling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-a-common-abstraction-effect&quot; id=&quot;markdown-toc-15-a-common-abstraction-effect&quot;&gt;1.5 A Common Abstraction: Effect&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-advanced&quot; id=&quot;markdown-toc-2-advanced&quot;&gt;2 Advanced&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-pulling-future-actions&quot; id=&quot;markdown-toc-21-pulling-future-actions&quot;&gt;2.1 Pulling future actions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-non-blocking-calls&quot; id=&quot;markdown-toc-22-non-blocking-calls&quot;&gt;2.2 Non-blocking calls&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-running-tasks-in-parallel&quot; id=&quot;markdown-toc-23-running-tasks-in-parallel&quot;&gt;2.3 Running tasks in parallel&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#24-starting-a-race-between-multiple-effects&quot; id=&quot;markdown-toc-24-starting-a-race-between-multiple-effects&quot;&gt;2.4 Starting a race between multiple Effects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#25-sequencing-sagas-using-yield&quot; id=&quot;markdown-toc-25-sequencing-sagas-using-yield&quot;&gt;2.5 Sequencing Sagas using yield*&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#26-composing-sagas&quot; id=&quot;markdown-toc-26-composing-sagas&quot;&gt;2.6 Composing Sagas&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#27-task-cancellation&quot; id=&quot;markdown-toc-27-task-cancellation&quot;&gt;2.7 Task cancellation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#28-redux-sagas-fork-model&quot; id=&quot;markdown-toc-28-redux-sagas-fork-model&quot;&gt;2.8 Redux-saga’s fork model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#29-common-concurrency-patterns&quot; id=&quot;markdown-toc-29-common-concurrency-patterns&quot;&gt;2.9 Common Concurrency Patterns&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#210-examples-of-testing-sagas&quot; id=&quot;markdown-toc-210-examples-of-testing-sagas&quot;&gt;2.10 Examples of Testing Sagas&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#211-connecting-sagas-to-external-inputoutput&quot; id=&quot;markdown-toc-211-connecting-sagas-to-external-inputoutput&quot;&gt;2.11 Connecting Sagas to external Input/Output&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#212-using-channels&quot; id=&quot;markdown-toc-212-using-channels&quot;&gt;2.12 Using Channels&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-basic&quot;&gt;1 Basic&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A Saga&lt;/strong&gt; is a Long Lived Transaction that can be written as a sequence of sub-transactions T1,T2,Tn. The sub-transactions has a compensating Transaction C1,C2,Cn. Ci semantically undoes Ti. Saga Gurantee either T1,T2,..Tn or T1,T2 … Tj, Cj, … C2, C1. Saga is a failure management pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Generator&lt;/strong&gt;: 函数声明和执行。函数声明两个关键字，&lt;code class=&quot;highlighter-rouge&quot;&gt;function*&lt;/code&gt;表示返回值是&lt;code class=&quot;highlighter-rouge&quot;&gt;generator&lt;/code&gt;, yield表示该地方分段执行；函数执行1个关键字，&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;，表示执行到声明时yield的地方。生成器对象是由一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Generator Function&lt;/code&gt;(迭代器工厂) 返回的,并且它符合&lt;strong&gt;可迭代协议&lt;/strong&gt;(继承链上有1个对象必须实现迭代器协议)和&lt;strong&gt;迭代器协议(实现&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;函数，该函数返回&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;属性)&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Iterator(迭代器)&lt;/strong&gt;： 1个符合&lt;strong&gt;迭代器协议&lt;/strong&gt;的对象，即有&lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;方法，该方法返回两个属性&lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ya'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'yo'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'ya'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;11-using-saga-helpers&quot;&gt;1.1 Using Saga Helpers&lt;/h3&gt;

&lt;h3 id=&quot;12-declarative-effects&quot;&gt;1.2 Declarative Effects&lt;/h3&gt;

&lt;h3 id=&quot;13-dispatching-actions&quot;&gt;1.3 Dispatching Actions&lt;/h3&gt;

&lt;h3 id=&quot;14-error-handling&quot;&gt;1.4 Error Handling&lt;/h3&gt;

&lt;h3 id=&quot;15-a-common-abstraction-effect&quot;&gt;1.5 A Common Abstraction: Effect&lt;/h3&gt;

&lt;p&gt;Effect vs Promise&lt;/p&gt;

&lt;p&gt;Effect creation (description) vs Effect execution&lt;/p&gt;

&lt;p&gt;put({type: ‘INCREMENT’}) // =&amp;gt; { PUT: {type: ‘INCREMENT’} }			creation(description)
call(delay, 1000)        // =&amp;gt; { CALL: {fn: delay, args: [1000]}}  creation(description)&lt;/p&gt;

&lt;p&gt;saga-middleware&lt;/p&gt;

&lt;p&gt;the above effect execution&lt;/p&gt;

&lt;p&gt;Effect creation (description, command object) makes effect testable&lt;/p&gt;

&lt;h2 id=&quot;2-advanced&quot;&gt;2 Advanced&lt;/h2&gt;

&lt;h3 id=&quot;21-pulling-future-actions&quot;&gt;2.1 Pulling future actions&lt;/h3&gt;

&lt;p&gt;takeEvery vs take&lt;/p&gt;

&lt;p&gt;takeEvery, action is pushed into saga. takeEvery can only allow you to write the handler when certain action is happen&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeEvery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-saga/effects'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;watchAndLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeEvery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'state after'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;take action is pulled by saga. take allow you to write when the action is happen and also handler.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-saga/effects'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;watchAndLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'state after'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;22-non-blocking-calls&quot;&gt;2.2 Non-blocking calls&lt;/h3&gt;

&lt;h3 id=&quot;23-running-tasks-in-parallel&quot;&gt;2.3 Running tasks in parallel&lt;/h3&gt;

&lt;h3 id=&quot;24-starting-a-race-between-multiple-effects&quot;&gt;2.4 Starting a race between multiple Effects&lt;/h3&gt;

&lt;h3 id=&quot;25-sequencing-sagas-using-yield&quot;&gt;2.5 Sequencing Sagas using yield*&lt;/h3&gt;

&lt;h3 id=&quot;26-composing-sagas&quot;&gt;2.6 Composing Sagas&lt;/h3&gt;

&lt;h3 id=&quot;27-task-cancellation&quot;&gt;2.7 Task cancellation&lt;/h3&gt;

&lt;h3 id=&quot;28-redux-sagas-fork-model&quot;&gt;2.8 Redux-saga’s fork model&lt;/h3&gt;

&lt;h3 id=&quot;29-common-concurrency-patterns&quot;&gt;2.9 Common Concurrency Patterns&lt;/h3&gt;

&lt;h3 id=&quot;210-examples-of-testing-sagas&quot;&gt;2.10 Examples of Testing Sagas&lt;/h3&gt;

&lt;h3 id=&quot;211-connecting-sagas-to-external-inputoutput&quot;&gt;2.11 Connecting Sagas to external Input/Output&lt;/h3&gt;

&lt;h3 id=&quot;212-using-channels&quot;&gt;2.12 Using Channels&lt;/h3&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/04 Web/JS/2016-10-03-React入门/JS React Summary.png&quot; alt=&quot;JS React Summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;Redux-Saga&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xDuwrtwYHu8&quot;&gt;Applying the Saga Pattern&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot;&gt;Original Paper&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/jj591569.aspx&quot;&gt;A Saga on Sagas&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://python.jobbole.com/86258/&quot;&gt;可迭代对象 vs 迭代器 vs 生成器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 26 Oct 2016 00:00:00 +0800</pubDate>
				<link>/04%20web%20development/2016/10/26/Redux-Saga-Part-I-Basics.html</link>
				<guid isPermaLink="true">/04%20web%20development/2016/10/26/Redux-Saga-Part-I-Basics.html</guid>
			</item>
		
			<item>
				<title>Redux Part V：Other</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-other&quot; id=&quot;markdown-toc-1-other&quot;&gt;1 Other&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-glossary&quot; id=&quot;markdown-toc-11-glossary&quot;&gt;1.1 Glossary&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111-state&quot; id=&quot;markdown-toc-111-state&quot;&gt;1.1.1 State&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112-action&quot; id=&quot;markdown-toc-112-action&quot;&gt;1.1.2 Action&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#113-reducer&quot; id=&quot;markdown-toc-113-reducer&quot;&gt;1.1.3 Reducer&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#114-dispatching-function&quot; id=&quot;markdown-toc-114-dispatching-function&quot;&gt;1.1.4 Dispatching Function&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#115-action-creator&quot; id=&quot;markdown-toc-115-action-creator&quot;&gt;1.1.5 Action Creator&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#116-async-action&quot; id=&quot;markdown-toc-116-async-action&quot;&gt;1.1.6 Async Action&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#117-middleware&quot; id=&quot;markdown-toc-117-middleware&quot;&gt;1.1.7 Middleware&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#118-store&quot; id=&quot;markdown-toc-118-store&quot;&gt;1.1.8 Store&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#119-store-creator&quot; id=&quot;markdown-toc-119-store-creator&quot;&gt;1.1.9 Store creator&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1110-store-enhancer&quot; id=&quot;markdown-toc-1110-store-enhancer&quot;&gt;1.1.10 Store enhancer&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-api-reference&quot; id=&quot;markdown-toc-12-api-reference&quot;&gt;1.2 API Reference&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#121-createstorereducer-preloadedstateenhancer&quot; id=&quot;markdown-toc-121-createstorereducer-preloadedstateenhancer&quot;&gt;1.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateStore(reducer, [preloadedState],[enhancer])&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#122-store&quot; id=&quot;markdown-toc-122-store&quot;&gt;1.2.2 Store&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#1221-getstate&quot; id=&quot;markdown-toc-1221-getstate&quot;&gt;1.2.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1222-dispatchaction&quot; id=&quot;markdown-toc-1222-dispatchaction&quot;&gt;1.2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1223-subscribelistener&quot; id=&quot;markdown-toc-1223-subscribelistener&quot;&gt;1.2.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(listener)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1224-replacereducernextreducer&quot; id=&quot;markdown-toc-1224-replacereducernextreducer&quot;&gt;1.2.2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;replaceReducer(nextReducer)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#123-combinereducersreducers&quot; id=&quot;markdown-toc-123-combinereducersreducers&quot;&gt;1.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers(reducers)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#124-applymiddlewaremiddlewares&quot; id=&quot;markdown-toc-124-applymiddlewaremiddlewares&quot;&gt;1.2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware(...middlewares)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#125-bindactioncreatorsactioncreators-dispatch&quot; id=&quot;markdown-toc-125-bindactioncreatorsactioncreators-dispatch&quot;&gt;1.2.5 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindActionCreators(actionCreators, dispatch)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#126-composefunctions&quot; id=&quot;markdown-toc-126-composefunctions&quot;&gt;1.2.6 &lt;code class=&quot;highlighter-rouge&quot;&gt;compose(...functions)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-change-log&quot; id=&quot;markdown-toc-13-change-log&quot;&gt;1.3 Change Log&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-patrons&quot; id=&quot;markdown-toc-14-patrons&quot;&gt;1.4 Patrons&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-feedback&quot; id=&quot;markdown-toc-15-feedback&quot;&gt;1.5 Feedback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-参考资料&quot; id=&quot;markdown-toc-5-参考资料&quot;&gt;5 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-other&quot;&gt;1 Other&lt;/h2&gt;

&lt;h3 id=&quot;11-glossary&quot;&gt;1.1 Glossary&lt;/h3&gt;

&lt;p&gt;This a glossary of the core terms in Redux, along with their type signatures. The typs are documented using &lt;a href=&quot;http://flowtype.org/docs/quick-reference.html&quot;&gt;Flow notation&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;111-state&quot;&gt;1.1.1 State&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; (also called the state tree) is a broad term, but in the Redux API it usually refers to the single state value that is managed by the store and returned &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt;. It represents the entire state of a Redux application, which is often a deeply nested object.&lt;/p&gt;

&lt;p&gt;By convention, the top-level state is an object or some other key-value collection like a Map, but technically it can be any types. Still, you should do your best to keep the state serializable. Don’t put anything inside it that you can’t easily turn into JSON.&lt;/p&gt;

&lt;h4 id=&quot;112-action&quot;&gt;1.1.2 Action&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An action is a plain object that represents in intention to change the state. Actions are the only way to get data into the store. Any data, whether from UI events, network callbacks, or other sources such as WebSockets needs to eventually de dispatched as actions.&lt;/p&gt;

&lt;p&gt;Actions must have a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; field that indicates the type of action being performed. Types can be defined as constants and imported from another module. It’s better to use strings for &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; than &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;Symbols&lt;/a&gt; becuase strings are &lt;strong&gt;serializable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other than &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, the structure of an action is really up to you. If you’re interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions should be constructed.&lt;/p&gt;

&lt;p&gt;See also &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;async action&lt;/a&gt; below.&lt;/p&gt;

&lt;h4 id=&quot;113-reducer&quot;&gt;1.1.3 Reducer&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;strong&gt;reducer&lt;/strong&gt; (also called a reducing function) is a function that accepts an accumulation and a value and returns a new accumulation. They are used to reduce a collection of values down to a single value.&lt;/p&gt;

&lt;p&gt;Reducers are not unique to Redux-they are a fundamental concept in functional programming. Even most non-functional languages, like JavaScript, have a built-in API for reducing. In JavaScript, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.reducer()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Redux, the accumulated state is the state object, and the values being accumulated are actions. Reducers calculate a new state given the previous state and an action. They must be pure functions – functions that return the exact same output for given inputs. They should also be free of side-ffects. This is what enables exciting features like hot reloading and time travel.&lt;/p&gt;

&lt;p&gt;Reducers are the mot important concept in Redux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not put PAI calls into reducers&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;114-dispatching-function&quot;&gt;1.1.4 Dispatching Function&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Action&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;strong&gt;dispatching function&lt;/strong&gt; (or simply dispatch function) is a function that accepts an action or an &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;async action&lt;/a&gt;; it then may or may not dispatch one or more actions to the store.&lt;/p&gt;

&lt;p&gt;We must distinguish between dispatching functions in general and the base &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function provided by the store instance without any middleware.&lt;/p&gt;

&lt;p&gt;The base dispatch function always synchronously sends an aciton to the store’s reducer, along with the previous state returned by the store to calculate a new state. It expects action to be plain objects ready to be consumed by the reducer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/Glossary.html#middleware&quot;&gt;Middlware&lt;/a&gt; wraps the base dispatch function. It allows the dispatch function to handle &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;async actions&lt;/a&gt; in addition to actions. Middleware may transform, delay, ignore, or otherwise interpret actions or async actions before passing them to the next middleware. See below for more information.&lt;/p&gt;

&lt;h4 id=&quot;115-action-creator&quot;&gt;1.1.5 Action Creator&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncAction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An &lt;strong&gt;action creator&lt;/strong&gt; is, quite simply, a funciton that creates an action. Do not confuse the two terms –  again, an action is a payload of information and an action creator is a &lt;strong&gt;factory&lt;/strong&gt; that creats an action&lt;/p&gt;

&lt;p&gt;Calling an action creator only produces an action, but does not dispatch it. You need to call the store’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function to actually cause the mutation. Sometimes we say &lt;strong&gt;bound action&lt;/strong&gt; creators to mean functions that call an action creator and immeidately dispatch its result to a specific store instance.&lt;/p&gt;

&lt;p&gt;If an action creator needs to read the current state, perform an API call, or cause a side effect, like a routing transition, it should return an &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;async action&lt;/a&gt; instead of an action.&lt;/p&gt;

&lt;h4 id=&quot;116-async-action&quot;&gt;1.1.6 Async Action&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An async action is a value that is sent to dispatching funciton, but is not yet ready for consumption by the reducer. It will be transformed by &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#middleware&quot;&gt;middleware&lt;/a&gt; into an action (or a series of actions) before being sent to the base &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; funciton. Async actions may have different types, depending ont he midddlware you use. They are often asynchronous primitives, like a Promise or a thunk, which are not passed to the reducer immediately, but trigger action dispatches once an operation has completed.&lt;/p&gt;

&lt;h4 id=&quot;117-middleware&quot;&gt;1.1.7 Middleware&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MiddlewareAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;geState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MiddlewareAPI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;strong&gt;middleware&lt;/strong&gt; is a higher-order function that composes a &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#dispatching-function&quot;&gt;disaptch function&lt;/a&gt; to return a new dispatch function. It often turns &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;aysnc actions&lt;/a&gt; into actions.&lt;/p&gt;

&lt;p&gt;Middleware is composable using funciton composition. It is useful for logging actions, performing side effects like routing, or turning an asynchronous API call into a seris of synchronous actions.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://redux.js.org/docs/api/applyMiddleware.html&quot;&gt;applyMiddleware(…middlewares)&lt;/a&gt; for a detailed look at middleware&lt;/p&gt;

&lt;h4 id=&quot;118-store&quot;&gt;1.1.8 Store&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatch&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replaceReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;strong&gt;store&lt;/strong&gt; is an object that holds the application’s state tree. There should only be a single store in Redux app, as the composition happens on the reducer level.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/Store.html#dispatch&quot;&gt;dispatch(action)&lt;/a&gt;  is the base dispatch function described above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/Store.html#getState&quot;&gt;getState()&lt;/a&gt; returns the current state of the store.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/Store.html#subscribe&quot;&gt;subscribe(listener)&lt;/a&gt; registers a function to be called on state changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/Store.html#replaceReducer&quot;&gt;replaceReducer(nextReducer)&lt;/a&gt; can be used to implement hot reloading and code splitting. Most likely you won’t use it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the complete &lt;a href=&quot;http://redux.js.org/docs/api/Store.html#dispatch&quot;&gt;store API reference&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4 id=&quot;119-store-creator&quot;&gt;1.1.9 Store creator&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoreCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preloadedState&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A store creator is a funciton that creates a Redux store. Like with dispatching funciton, we must distinguish the base store creator, &lt;a href=&quot;http://redux.js.org/docs/api/createStore.html&quot;&gt;createStore(reducer, preloadedState)&lt;/a&gt; exported from the Redux package, from store creators that returned from the store enhancers.&lt;/p&gt;

&lt;h4 id=&quot;1110-store-enhancer&quot;&gt;1.1.10 Store enhancer&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoreEnhancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoreCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoreCreator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A store enhancer is a higher-order function that composes a store creator to return a new, enhanced store creator. This is similar to middleware in that it allows you to alter the store interface in a composable way.&lt;/p&gt;

&lt;p&gt;Store enhancers are much the same concept as higher-order componenets in React, which are also occaasionally called “component enhancers”.&lt;/p&gt;

&lt;p&gt;Because a store is not an instace, but rather a plain-object collection of functions, copies can be easily created and modified without mutating the original store. There is an example in &lt;a href=&quot;http://redux.js.org/docs/api/compose.html&quot;&gt;compose&lt;/a&gt; documentation demonstrating that.&lt;/p&gt;

&lt;p&gt;Most likely you’ll never write a store enhancer, but you may the the one provided by the &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;developer tools&lt;/a&gt;. It is what makes time travel possible without the app being aware it is happening. Amusingly, the &lt;a href=&quot;http://redux.js.org/docs/api/applyMiddleware.html&quot;&gt;Redux middleware implementation&lt;/a&gt; is itself a store enhancer.&lt;/p&gt;

&lt;h3 id=&quot;12-api-reference&quot;&gt;1.2 API Reference&lt;/h3&gt;

&lt;p&gt;The Redux API surface is tiny. Redux defines a set of contracts for you to implement (such as &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#reducer&quot;&gt;reducers&lt;/a&gt;) and provides a few helper functions to tie these contracts together.&lt;/p&gt;

&lt;p&gt;This section documents the complete Redux API. Keep in mind that Redux is only concerned with managing the state. In a real app, you’ll also want to use UI bindings like &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;121-createstorereducer-preloadedstateenhancer&quot;&gt;1.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateStore(reducer, [preloadedState],[enhancer])&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Create a Redux &lt;a href=&quot;http://redux.js.org/docs/api/Store.html&quot;&gt;store&lt;/a&gt; that holds the complete state tree of your app. These should only be a single store in your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; (Function): A &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#reducer&quot;&gt;reducer function&lt;/a&gt; that returns the next &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#state&quot;&gt;state tree&lt;/a&gt;, given the current state tree and an &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#action&quot;&gt;action&lt;/a&gt; to handle&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[preloadedState]&lt;/code&gt; (any): The initial state. You may optionally specify it to hydrate the state from the server in universal apps, or to restore a previously serialized user session. If you produced &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; with &lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;combineReducers&lt;/a&gt;, this must ba a plain object with the same shape as the keys passed to it. Otherwise, you are free to pass anything that your &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; can understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[enhancer]&lt;/code&gt; (Function): The store enhancer. You may optionally specify it to enhance the store with third-party capabilities such as middleware, time travel, persistence, etc. The only store enahncer that ships with Redux is &lt;a href=&quot;http://redux.js.org/docs/api/applyMiddleware.html&quot;&gt;applyMiddleware()&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;http://redux.js.org/docs/api/Store.html&quot;&gt;Store&lt;/a&gt;): An objects that holds the complete state of your app. The only way to change its state is by &lt;a href=&quot;http://redux.js.org/docs/api/Store.html#dispatch&quot;&gt;dispatching actions&lt;/a&gt;. You may also &lt;a href=&quot;http://redux.js.org/docs/api/Store.html#subscribe&quot;&gt;subscribe&lt;/a&gt; to the changes to the state to update the UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Use Redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Read the docs'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ 'Use Redux', 'Read the docs' ]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t create more than one store in an application! Instead, use &lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;combineReducers&lt;/a&gt; to create a single root reducer out of many.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is up to you to choose the state format. You can use plain objects or something like &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt;. If you’re not sure, start with plain objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your state is a plain object, make sure you never mutate it! For example, instead of returning something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign(state, newData)&lt;/code&gt; from your reducers, return &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign({},state, newData)&lt;/code&gt;. This way you don’t override the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;. You can also write &lt;code class=&quot;highlighter-rouge&quot;&gt;return {...state,...newData}&lt;/code&gt; if you enable the &lt;a href=&quot;http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html&quot;&gt;object spread operator proposal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For universal apps that run on the server, create a store intance with every request so that they are isolated. Dispatch a few data fetching actions to a store instance and wait for them to complete before rendering the app on the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When a store is created, Redux dispatches a dummy action to your reducer to populate the store with the initial state. You are not meant to handle the dummy action directly. Just remember that your reducer should return some kind of initial state if the state given to it as the first argument is &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, and you’re all set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To apply multiple store enhancers, you may use &lt;a href=&quot;http://redux.js.org/docs/api/compose.html&quot;&gt;compose()&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;122-store&quot;&gt;1.2.2 Store&lt;/h4&gt;

&lt;p&gt;A store holds the whole &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#state&quot;&gt;state tree&lt;/a&gt; of your application. The only way to change the state inside it is to dispatch an &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#action&quot;&gt;action&lt;/a&gt; on it.&lt;/p&gt;

&lt;p&gt;A store is not a class. It’s just an object with a few methods on it. To create it, pass your root &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#reducer&quot;&gt;reducing function&lt;/a&gt; to &lt;a href=&quot;http://redux.js.org/docs/api/createStore.html&quot;&gt;createStore&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A Note for Flux Users&lt;/strong&gt;: If you’re coming from Flux, there is a single important difference you need to understand. Redux doesn’t have a Dispatcher or support many stores. &lt;strong&gt;Instead, there is just a single store with a single root reducing function&lt;/strong&gt;. As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. You can use a helper like &lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;combinReducers&lt;/a&gt; to combine them. This is similar to how there is just one root component in a React app, but it is composed out of many small components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;1221-getstate&quot;&gt;1.2.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Returns the current state tree of your application. It is equal to the last value returned by the store’s reducer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(any): The current state tree of your application.&lt;/p&gt;

&lt;h5 id=&quot;1222-dispatchaction&quot;&gt;1.2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(action)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Dispatches an action. This is the only way to trigger a state change.&lt;/p&gt;

&lt;p&gt;The store’s reducing function will be called with the current &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; result and the given &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; synchronously. Its return value will be considered the next state. It will be returned form &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; from now on, and the change listeners will immediately be notified.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A Note for Flux Users&lt;/strong&gt;: If you attempt to call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; from inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;, it will throw with an error saying “Reducers may not dispatch actions.” This is similar to “Cannot dispatch in a middle of diaptch” error in Flux, but doesn’t cause the problems associated with it. In Flux, a dispatch is forbidden while Stores are handling the action and emitting udpates. This is unfortunate because it makes it impossible to dispatc actions from component lifecycle hooks or other benign places. In Redux, subscriptions are called after the root reducer has returned the new state, so you may dispatch in the subscription listeners. You are only disallowed to dispatch inside the reducers because they must have no side effects. If you want to cause a side effect in response to an action, the right place to do this is in the potentially aysnc &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#action-creator&quot;&gt;action creator&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; (Object): a plain object describing the change that makes sense for your application. Actions are the only way to get data ino the store, so any data, whether from the UI events, network callbacks, or other sources such as WebSockets needs to eventually be dispatched as actions. Actions must have a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; field that indicates the type of action being performed. Types can be defined as constants and imported from another module. It’s better to use strings for &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; than &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;Symbols&lt;/a&gt; because strings are serializable. Other than &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, the structure of an action object is really up to you. if you’re interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions could be constructed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Object): The dispatched action. The “vanilla” store implementation you get be calling &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; only supports plain object actions and hands them immediately to the reducer. Howevver, if you wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware&lt;/code&gt;, the middleware can interpret actions differently, and provide support for dispatching &lt;code class=&quot;highlighter-rouge&quot;&gt;async actions&lt;/code&gt;. Async actions are usually aysnchronous primitives like Promises, Obervables, or thunks.&lt;/p&gt;

&lt;p&gt;Middleware is created by the community and does not ship with Redux by default. You need to explicitly install packages like &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; or &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; to use it. You may also create your own middleware.&lt;/p&gt;

&lt;p&gt;To learn how to describe asynchronous API calls, read the current state inside action creators, perform side effects, or chain them to execute in a sequence, see the examples for &lt;a href=&quot;http://redux.js.org/docs/api/applyMiddleware.html&quot;&gt;applyMiddleware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Use Redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Read the docs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Read about the middleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;1223-subscribelistener&quot;&gt;1.2.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(listener)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Adds a change listener. It will be called any time an action is dispatched, and some part of the state tree may potentially have changed. You may then call &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; to read the current state tree inside the callback.&lt;/p&gt;

&lt;p&gt;You may call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; from a change listener, with the following caveats:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The listener should only call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; either in response to user actions or under specific condictions (e.g. dispatching an action when the store has specific field). Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; without any conditions is technically possible, however it lead to an infinite loop as every &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; call usually triggers the listener again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The subscriptions are snapshotted just before every &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; call. If you subscribe or unsubsribe while the listeners are being invoked, this will n ot have any effect on the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; that is currently in progress. However, the next &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; call, whether nested or not, will use a more recent snapshot of the subscritpion list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The listener should not expect to see all state changes, as the state might have been udpated multiple times during a nested &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; before the listener is called. It is however guaranteed that all subscribers registered before the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; started will be called with the latest state by the time it exits.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is a low-level API. Most likely, instead of using it directly, you’ll use React (or other) bindings. If you commonly use the callback as a hook to react to state changes, you might want to &lt;a href=&quot;https://github.com/reactjs/redux/issues/303#issuecomment-125184409&quot;&gt;write a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;observeStore&lt;/code&gt; utility&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; is also an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;, so you can &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; to changes with libraries like &lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To unsubscribe the change listener, invoke the function returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listener&lt;/code&gt; (Function): The callback to be invoked any time an action has been dispatched, and the state tree might have changed. You may call &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; inside the callback to read the current state tree. It is resonable to expect that the store’s reducer is a pure function, so you may compare references to some deep path in the state tree to learn whether its value has changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;
(Function): Afunction that unsubscribes the change listener.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'Some deep nested property changed from'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;previousValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;1224-replacereducernextreducer&quot;&gt;1.2.2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;replaceReducer(nextReducer)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Replaces the reducer currently used by the store to calculate the state. It is an advanced API. You might need this ifyour app implements code splitting, and you want to load some of the reducers dynamically. You might also need this if you implement a hot reloading mechanis, for Redux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nextReducer&lt;/code&gt; (Function) The next reducer for the store to use.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;123-combinereducersreducers&quot;&gt;1.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers(reducers)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;As yuor app grows more complex, you’ll want to split your &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#reducer&quot;&gt;reducing function&lt;/a&gt; into separate functions, each managing independent parts of the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; helper function turns an object whose values are different reducing functions into a single reducing function you can pass to &lt;code class=&quot;highlighter-rouge&quot;&gt;craeteStore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The resulting reducer calls every child reducer, and gathers their results into a single state object. &lt;strong&gt;The shape of the state object matches the keys of the passed &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consequently, the state object will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;reducer1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;reducer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can control state key names by using different keys for the reducers in the passed object. For example, you may call &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers({ todos: myTodosReducer, counter: myCounterReducer })&lt;/code&gt; for the state shape to be &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;todos,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A popular convention is to name reducers after the state slices they manage, so you can use ES6 property shorthand notation: &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers({ counter, todos })&lt;/code&gt;. This is equivalent to writing &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers({ counter: counter, todos: todos })&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A Note for Flux Users&lt;/strong&gt;: This function helps you organize your reducers to manage their own slices of state, similar to how you would have idfferent Flux Stores to manaeg different state. With Redux, there is just one store, but &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; helps you keep the same logical division between reducers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt; (Object): An object whose values correspond to different reducing functions that need to be combined into one. See the notes below for some rulse every passed reducer must follow.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Earlier documentation suggested the use of the ES6 &lt;code class=&quot;highlighter-rouge&quot;&gt;import * as reducers&lt;/code&gt; syntax to obtain the reducers object. This was the source of a lot of confusion, which is why we now recommend exporting a single reducer obtained using &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers()&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers/index.js&lt;/code&gt; instead. An exmaple is included below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;
(Function): A reducer that invokes every reducer inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt; object, and constructs a state object with the same shape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;
This function is mildly opinionated and is skewed towards helping beginners avoid common pitfalls. This is why it attempts to enforce some rules that you don’t have to follow if you write the root reducer manually.&lt;/p&gt;

&lt;p&gt;Any reducer passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; must satisfy these rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For any action that is not recognized, it must return the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; given to it as the first argument.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It must never return &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. It is too easy to do this by mistake via en early &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement, so &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; throws if you do that instead of letting the error manifest itself somewhere else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; given to it is &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, it must return the initial state for this specific reducer. According to the previous rule, the initial state must not be &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; either. It is handy to specify it with ES6 optional arguments syntax, but you can also explicitly check the first argument for being &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; attempts to check that your reducers conform to some of these rules, you should remember them, and do your best to folow them. &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will check your reducers by passing &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; to them; this is done even if you specify initial state to &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux.createStore(combineReducers(...), initialState)&lt;/code&gt;. Therefore, you &lt;strong&gt;must&lt;/strong&gt; ensure your reducers work properly when receiving &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; as state, even if you never intend for them to actually receive &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; in your own code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// reducers/todos.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  reducers/counter.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INCREMENT'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DECREMENT'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// reducers/index.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./todos'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./counter'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// App.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./reducers/index'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   counter: 0,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   todos: []&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Use Redux'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   counter: 0,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   todos: [ 'Use Redux' ]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This helper is just a convenience! You can write your own &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; that &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;works differently&lt;/a&gt; or even assmble the state object from the child reducers manually and write a root reducing funciton explicitly, like you would write any other function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may call &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; at any level of the reducer hierarchy. It doesn’t have to happen at the top. In fact you may use it again to split the child reducers that get too complicated into independent grandchildren, and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;124-applymiddlewaremiddlewares&quot;&gt;1.2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware(...middlewares)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Middleware is the suggested way to extend Redux with custom functionality. Middleware lets you wrap the store’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; method for fun and profit. The key feature of middleware is that it is composable. Multiple middlewre can be combined together, where each middleware requires no knowledge of what comes before or after in the chain. The most common use case for middleware is to support asynchronous actions without much boilerplate code of a dependency on a library like &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;Rx&lt;/a&gt;. It does so be letting you dispatch &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#async-action&quot;&gt;async actions&lt;/a&gt; in addition to normal actions.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; lets the action creators invert control by dispatching functions. They would receive &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; as an argument and may call it asynchronously. Such functions are called thunks. Another exmaple of middleware is &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt;. It lets you dispatch a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; async action, and dispatches a normal action when the Promise resovles.&lt;/p&gt;

&lt;p&gt;Middleware is not baked into &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; and is not a fundamental part of the Redux architecture, but we consider it useful enough to be supported right in the core. This way, there is asingle standard way to extend &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; in the ecosystem, and different middleware may compete in the expressibeness and utility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;...middleware&lt;/code&gt; (arguments): Functions that conform to the Redux middlware API. Each middleware receives &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; and 	&lt;code class=&quot;highlighter-rouge&quot;&gt;getState&lt;/code&gt; functions as named arguments, and returns a function. That function will be given the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; middleware’s dispatch method, and is expected to return a function of &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; calling &lt;code class=&quot;highlighter-rouge&quot;&gt;next(action)&lt;/code&gt; with a potentially differnt argument, or at a differnt time, or maybe not calling it at all. The last middleware in the cahin will receive the real store’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; methid as the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; parameter, thus endig the chain. So, the middleware signature is &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(getState,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;dispatch)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;action&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;
(Function) A store enhancer that applies the given middleware. The store enahncer signature is &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore =&amp;gt; createStore&lt;/code&gt; but he easiest way to apply it is to pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore()&lt;/code&gt; as the last &lt;code class=&quot;highlighter-rouge&quot;&gt;enhancer&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;TBC&lt;/p&gt;

&lt;h4 id=&quot;125-bindactioncreatorsactioncreators-dispatch&quot;&gt;1.2.5 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindActionCreators(actionCreators, dispatch)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Turns an object whose values are &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#action-creator&quot;&gt;action creators&lt;/a&gt; into an object with the same keys, but with every action creator wrapped into a &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; call so they may be invoked directly.&lt;/p&gt;

&lt;p&gt;Normally you should just call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; directly on your &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; instance. If you use Redux with React, &lt;code class=&quot;highlighter-rouge&quot;&gt;react-redux&lt;/code&gt; will provide you with the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function so you can call it directly, too.&lt;/p&gt;

&lt;p&gt;The olly use case for &lt;code class=&quot;highlighter-rouge&quot;&gt;bindActionCreators&lt;/code&gt; is  when you want to pass some action creators down to a component that isn’t aware of Redux, and you don’t want to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; or the Redux store to it.&lt;/p&gt;

&lt;p&gt;For convenience, you can also pass a single function as the first argument, and get a function in return.&lt;/p&gt;

&lt;p&gt;TBC&lt;/p&gt;

&lt;h4 id=&quot;126-composefunctions&quot;&gt;1.2.6 &lt;code class=&quot;highlighter-rouge&quot;&gt;compose(...functions)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Compose function from right to left.&lt;/p&gt;

&lt;p&gt;This is a functional programming utility and is included in Redux as a convenience. You might want to use it to apply several &lt;a href=&quot;http://redux.js.org/docs/Glossary.html#action-creator&quot;&gt;store enhancers&lt;/a&gt; in a row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(arguments): The functions to compose. Each function is expected to accept a single parameter. Its return value will be provided as an argument to the function standing to the left, and so on. The exception is the right-most argument which can accpet multiple parameters, as it will provide the signature for thre resulting composed function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Function): The final function obtained by composing the given functions from right to left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This example demonstrates how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;compose&lt;/code&gt; to enhance a &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware&lt;/code&gt; and a few developer tools from the &lt;code class=&quot;highlighter-rouge&quot;&gt;redu-devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-thunk'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DevTools&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./containers/DevTools'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../reducers/index'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;DevTools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instrument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;compose&lt;/code&gt; does is let you write deeply nested function transformations without the rightward drift of the code. Don’t give it too much credit!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-change-log&quot;&gt;1.3 Change Log&lt;/h3&gt;

&lt;p&gt;This project adheres to &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every release, along with the migration instructions, is documented on the Github &lt;a href=&quot;https://github.com/reactjs/redux/releases&quot;&gt;Releases&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&quot;14-patrons&quot;&gt;1.4 Patrons&lt;/h3&gt;

&lt;p&gt;The work on Redux was &lt;a href=&quot;https://www.patreon.com/reactdx&quot;&gt;funded by the community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meet some of the outstanding companies and individuals that made it possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/webflow&quot;&gt;Webflow&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ximedes.com/&quot;&gt;Ximedes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://hautelook.github.io/&quot;&gt;HauteLook&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://kenwheeler.github.io/&quot;&gt;Ken Wheeler&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.facebook.com/prototocal.lee&quot;&gt;Chung Yen Li&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/threepointone&quot;&gt;Sunil Pai&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/ccheever&quot;&gt;Charlie Cheever&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/e1g&quot;&gt;Eugene G&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/mattapperson&quot;&gt;Matt Apperson&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/jedwatson&quot;&gt;Jed Watson&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/xander76&quot;&gt;Sasha Aickin&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/whobubble&quot;&gt;Stefan Tennighkeit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/samvincent&quot;&gt;Sam Vincent&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Olegzandr Denman&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;15-feedback&quot;&gt;1.5 Feedback&lt;/h3&gt;

&lt;p&gt;We appreciate feedback from the community. You can post feature requests and bug reports on &lt;a href=&quot;https://productpains.com/product/redux&quot;&gt;Product Pains&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;5-参考资料&quot;&gt;5 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tayiorbeii/egghead.io_redux_course_notes&quot;&gt;Note: Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/shunmian/4.1.1_redux-part-one&quot;&gt;React Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Mon, 24 Oct 2016 00:00:00 +0800</pubDate>
				<link>/04%20web%20development/2016/10/24/Redux-Part-V_Other.html</link>
				<guid isPermaLink="true">/04%20web%20development/2016/10/24/Redux-Part-V_Other.html</guid>
			</item>
		
			<item>
				<title>Redux Part IV：Debugging</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-debugging&quot; id=&quot;markdown-toc-1-debugging&quot;&gt;1 Debugging&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#10-redux-devtools&quot; id=&quot;markdown-toc-10-redux-devtools&quot;&gt;1.0 &lt;code class=&quot;highlighter-rouge&quot;&gt;redux-devtools&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-nothing-happens-when-i-dispatch-an-action&quot; id=&quot;markdown-toc-11-nothing-happens-when-i-dispatch-an-action&quot;&gt;1.1 Nothing happens when I dispatch an action&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111-never-mutate-reducer-arguments&quot; id=&quot;markdown-toc-111-never-mutate-reducer-arguments&quot;&gt;1.1.1 Never mutate reducer arguments&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112-dont-forget-to-call-dispatchaction&quot; id=&quot;markdown-toc-112-dont-forget-to-call-dispatchaction&quot;&gt;1.1.2 Don’t forget to call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#113-make-sure-mapstatetoprops-is-correct&quot; id=&quot;markdown-toc-113-make-sure-mapstatetoprops-is-correct&quot;&gt;1.1.3 Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; is correct&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-something-else-doesnt-work&quot; id=&quot;markdown-toc-12-something-else-doesnt-work&quot;&gt;1.2 Something else doesn’t work&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-参考资料&quot; id=&quot;markdown-toc-5-参考资料&quot;&gt;5 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-debugging&quot;&gt;1 Debugging&lt;/h2&gt;

&lt;h3 id=&quot;10-redux-devtools&quot;&gt;1.0 &lt;code class=&quot;highlighter-rouge&quot;&gt;redux-devtools&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;11-nothing-happens-when-i-dispatch-an-action&quot;&gt;1.1 Nothing happens when I dispatch an action&lt;/h3&gt;

&lt;p&gt;Sometimes, you are trying to dispatch an action,but your view does not update. Why does this ahppen? There may be several reasons for this.&lt;/p&gt;

&lt;h4 id=&quot;111-never-mutate-reducer-arguments&quot;&gt;1.1.1 Never mutate reducer arguments&lt;/h4&gt;

&lt;p&gt;It is tempting to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; passed to you by Redux. Don’t do this!&lt;/p&gt;

&lt;p&gt;Redux assumes that you never mutate the objects it gives to you in the reducer. &lt;strong&gt;Every single time, you must return the new state object.&lt;/strong&gt; Even if you don’t use a library like &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.JS&lt;/a&gt;, you need to completely avoid mutation.&lt;/p&gt;

&lt;p&gt;Immutability is what lets &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; efficiently subscribe to fine-grained updates of your state. It also enables great developer experience featuers such as time travel with &lt;a href=&quot;http://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, a reducer like this is wrong because it mutates the state:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Wrong! This mutates state&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'COMPLETE_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Wrong! This mutates state[action.index].&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It needs to be rewritten like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Return a new array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'COMPLETE_TODO'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Return a new array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Copy the object before mutating&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s more code, but it’s exactly what makes Redux predictable and efficient. If you want to have less code, you can use a helper like &lt;a href=&quot;https://facebook.github.io/react/docs/update.html&quot;&gt;React.addons.update&lt;/a&gt; to write immutable transformations with a terse syntax&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Before:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, to update objects, you’ll need something like &lt;code class=&quot;highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; from Underscore, or better, an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign&lt;/a&gt; polyfill.&lt;/p&gt;

&lt;p&gt;Make sure that you use &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt; correctly. For example, instead of returning something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign(state, newData)&lt;/code&gt; from your reducers, return &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign({}, state, newData)&lt;/code&gt;. This way you don’t override the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also enable the &lt;a href=&quot;http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html&quot;&gt;Object spread operator proposal&lt;/a&gt; for a more succinct syntax:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Before:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that experimental language features are subject to change.&lt;/p&gt;

&lt;p&gt;Also keep an eye out for nested state objects that need to be deeply copied. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt; make a shallow copy of the state. See &lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html#updating-nested-objects&quot;&gt;Updateing Nested Objects&lt;/a&gt; for suggestions on how to deal with nested state objects.&lt;/p&gt;

&lt;h4 id=&quot;112-dont-forget-to-call-dispatchaction&quot;&gt;1.1.2 Don’t forget to call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(action)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;If you define an action creator, calling it will not automatically dispatch an action. For example, this code will do nothing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//TodoActions.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//AddTodo.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./TodoActions'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AddTodo&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Won't work!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fix the issue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It doesn’t work because your action creator is just a function that returns an action. It is up to you to actually dispatch it. We can’t bind your action creators to a particular Store instance during the definition because apps that render on the server need a separate Redux store for every request.&lt;/p&gt;

&lt;p&gt;The fix is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Works! (but you need to grab store somehow)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fix the issue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re somewhere deep in the component hierarchy, it is cumbersome to pass the store down manually. This is why &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; lets you use a &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; &lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;higher-order component&lt;/a&gt; that will, apart from subscribing you to a Redux store, inject &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; into your component’s props.&lt;/p&gt;

&lt;p&gt;The fixed code looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//AddTodo.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-redux'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./TodoActions'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AddTodo&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Works!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fix the issue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In addition to the state, `connect` puts `dispatch` in our props.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AddTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then pass &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; down to other components manually, if you want to.&lt;/p&gt;

&lt;h4 id=&quot;113-make-sure-mapstatetoprops-is-correct&quot;&gt;1.1.3 Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; is correct&lt;/h4&gt;

&lt;p&gt;It’s possible you’re correctly dispatching an action and applying your reducer but the corresponding state is not being correctly translated into props.&lt;/p&gt;

&lt;h3 id=&quot;12-something-else-doesnt-work&quot;&gt;1.2 Something else doesn’t work&lt;/h3&gt;

&lt;p&gt;Ask around on the &lt;strong&gt;#redux&lt;/strong&gt; &lt;a href=&quot;http://reactiflux.com/&quot;&gt;Reactiflux&lt;/a&gt; Discord channel, or &lt;a href=&quot;https://github.com/reactjs/redux/issues&quot;&gt;create an issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you figure it out, &lt;a href=&quot;https://github.com/reactjs/redux/edit/master/docs/Troubleshooting.md&quot;&gt;edit this doecument&lt;/a&gt; as a courtesy to the next eprson having the same problem.&lt;/p&gt;

&lt;h2 id=&quot;5-参考资料&quot;&gt;5 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tayiorbeii/egghead.io_redux_course_notes&quot;&gt;Note: Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/shunmian/4.1.1_redux-part-one&quot;&gt;React Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sun, 23 Oct 2016 00:00:00 +0800</pubDate>
				<link>/04%20web%20development/2016/10/23/Redux-Part-IV_Debugging.html</link>
				<guid isPermaLink="true">/04%20web%20development/2016/10/23/Redux-Part-IV_Debugging.html</guid>
			</item>
		
			<item>
				<title>Redux Part III：FAQ</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-faq&quot; id=&quot;markdown-toc-1-faq&quot;&gt;1 FAQ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-general&quot; id=&quot;markdown-toc-11-general&quot;&gt;1.1 General&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111-when-should-i-use-redux&quot; id=&quot;markdown-toc-111-when-should-i-use-redux&quot;&gt;1.1.1 When should I use Redux?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112-when-should-i-use-redux&quot; id=&quot;markdown-toc-112-when-should-i-use-redux&quot;&gt;1.1.2 When should I use Redux?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#113-can-redux-only-be-used-with-react&quot; id=&quot;markdown-toc-113-can-redux-only-be-used-with-react&quot;&gt;1.1.3 Can Redux only be used with React?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#114-do-i-need-to-have-a-particular-build-tool-to-use-redux&quot; id=&quot;markdown-toc-114-do-i-need-to-have-a-particular-build-tool-to-use-redux&quot;&gt;1.1.4 Do I need to have a particular build tool to use Redux?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-reducers&quot; id=&quot;markdown-toc-12-reducers&quot;&gt;1.2 Reducers&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#121-how-do-i-share-state-between-two-reducers-do-i-have-to-use-combinereducers&quot; id=&quot;markdown-toc-121-how-do-i-share-state-between-two-reducers-do-i-have-to-use-combinereducers&quot;&gt;1.2.1 How do I share state between two reducers? Do I have to use combineReducers?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#122-do-i-have-to-use-the-switch-statement-to-handle-actions&quot; id=&quot;markdown-toc-122-do-i-have-to-use-the-switch-statement-to-handle-actions&quot;&gt;1.2.2 Do I have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement to handle actions?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-organizing-state&quot; id=&quot;markdown-toc-13-organizing-state&quot;&gt;1.3 Organizing State&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#131-do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate&quot; id=&quot;markdown-toc-131-do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate&quot;&gt;1.3.1 Do I have to put all my state into Redux? Should I ever use React’s setState()?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#132-can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state&quot; id=&quot;markdown-toc-132-can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state&quot;&gt;1.3.2 Can I put functions, promises, or other non-serializable items in my store state?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#133-how-do-i-organize-nested-or-duplicate-data-in-my-state&quot; id=&quot;markdown-toc-133-how-do-i-organize-nested-or-duplicate-data-in-my-state&quot;&gt;1.3.3 How do I organize nested or duplicate data in my state?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-store-setup&quot; id=&quot;markdown-toc-14-store-setup&quot;&gt;1.4 Store Setup&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#141-can-or-should-i-create-multiple-stores-can-i-import-my-store-directly-and-use-it-in-components-myself&quot; id=&quot;markdown-toc-141-can-or-should-i-create-multiple-stores-can-i-import-my-store-directly-and-use-it-in-components-myself&quot;&gt;1.4.1 Can or should I create multiple stores? Can I import my store directly, and use it in components myself?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#142-is-it-ok-to-have-more-than-one-middle-ware-chain-in-my-store-enhancer-what-is-the-difference-between-next-and-dispatch-in-a-middleware-function&quot; id=&quot;markdown-toc-142-is-it-ok-to-have-more-than-one-middle-ware-chain-in-my-store-enhancer-what-is-the-difference-between-next-and-dispatch-in-a-middleware-function&quot;&gt;1.4.2 Is it OK to have more than one middle ware chain in my store enhancer? What is the difference between next and dispatch in a middleware function?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#143-how-do-i-subscribe-to-only-a-portion-of-the-state-can-i-get-the-dispatched-action-as-part-of-the-subscription&quot; id=&quot;markdown-toc-143-how-do-i-subscribe-to-only-a-portion-of-the-state-can-i-get-the-dispatched-action-as-part-of-the-subscription&quot;&gt;1.4.3 How do I subscribe to only a portion of the state? Can I get the dispatched action as part of the subscription?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-actions&quot; id=&quot;markdown-toc-15-actions&quot;&gt;1.5 Actions&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#151-why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants&quot; id=&quot;markdown-toc-151-why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants&quot;&gt;1.5.1 Why should type be a string, or at least serializable? Why should my action types be constants&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#152-is-there-always-a-one-to-one-mapping-between-reducers-and-actions&quot; id=&quot;markdown-toc-152-is-there-always-a-one-to-one-mapping-between-reducers-and-actions&quot;&gt;1.5.2 Is there always a one-to-one mapping between reducers and actions?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#153-how-can-i-represent-side-effects-such-as-ajax-calls-why-do-we-need-things-like-action-creators-thunks-and-middleware-to-do-async-behavior&quot; id=&quot;markdown-toc-153-how-can-i-represent-side-effects-such-as-ajax-calls-why-do-we-need-things-like-action-creators-thunks-and-middleware-to-do-async-behavior&quot;&gt;1.5.3 How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#154-should-i-dispatch-multiple-actions-in-a-row-from-one-action-creator&quot; id=&quot;markdown-toc-154-should-i-dispatch-multiple-actions-in-a-row-from-one-action-creator&quot;&gt;1.5.4 Should I dispatch multiple actions in a row from one action creator?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#16-immutable-data&quot; id=&quot;markdown-toc-16-immutable-data&quot;&gt;1.6 Immutable Data&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#161-what-are-the-benefits-immutability&quot; id=&quot;markdown-toc-161-what-are-the-benefits-immutability&quot;&gt;1.6.1 What are the benefits Immutability?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#162-why-is-immutability-required-in-redux&quot; id=&quot;markdown-toc-162-why-is-immutability-required-in-redux&quot;&gt;1.6.2 Why is immutability required in Redux?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#163-why-does-reudxs-use-of-shallow-equality-checking-require-immutability&quot; id=&quot;markdown-toc-163-why-does-reudxs-use-of-shallow-equality-checking-require-immutability&quot;&gt;1.6.3 Why does Reudx’s use of shallow equality checking require immutability?&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#1631-how-do-shallow-and-deep-equality-checking-diff&quot; id=&quot;markdown-toc-1631-how-do-shallow-and-deep-equality-checking-diff&quot;&gt;1.6.3.1 How do Shallow and Deep Equality Checking diff?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1632-how-does-redux-use-shallow-equality-checking&quot; id=&quot;markdown-toc-1632-how-does-redux-use-shallow-equality-checking&quot;&gt;1.6.3.2 How does Redux use shallow equality checking?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1633-how-does-combinereducers-use-shallow-equality-checking&quot; id=&quot;markdown-toc-1633-how-does-combinereducers-use-shallow-equality-checking&quot;&gt;1.6.3.3 How does &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; use shallow equality checking?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1634-how-does-react-redux-use-shallow-equality-checking-&quot; id=&quot;markdown-toc-1634-how-does-react-redux-use-shallow-equality-checking-&quot;&gt;1.6.3.4 How does React-Redux use shallow equality checking ?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1636-why-does-react-redux-shallowly-check-each-value-within-the-props-object-returned-from-mapstatetoprop&quot; id=&quot;markdown-toc-1636-why-does-react-redux-shallowly-check-each-value-within-the-props-object-returned-from-mapstatetoprop&quot;&gt;1.6.3.6 Why does React-Redux shallowly check each value within the props object returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProp&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1637-how-does-react-redux-use-shallow-equality-checking-to-determine-whether-a-component-needs-re-rendering&quot; id=&quot;markdown-toc-1637-how-does-react-redux-use-shallow-equality-checking-to-determine-whether-a-component-needs-re-rendering&quot;&gt;1.6.3.7 How does React-Redux use shallow equality checking to determine whether a component needs re-rendering?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1638-why-will-shallow-equality-checking-not-work-with-mutable-obejcts&quot; id=&quot;markdown-toc-1638-why-will-shallow-equality-checking-not-work-with-mutable-obejcts&quot;&gt;1.6.3.8 Why will shallow equality checking not work with mutable obejcts?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1639-does-shallow-equality-checking-with-a-mutable-object-cause-problems-with-redux&quot; id=&quot;markdown-toc-1639-does-shallow-equality-checking-with-a-mutable-object-cause-problems-with-redux&quot;&gt;1.6.3.9 Does shallow equality checking with a mutable object cause problems with Redux?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#16310-why-does-a-reducer-mutating-the-state-prevent-react-redux-from-re-rendering-a-wrapped-component&quot; id=&quot;markdown-toc-16310-why-does-a-reducer-mutating-the-state-prevent-react-redux-from-re-rendering-a-wrapped-component&quot;&gt;1.6.3.10 Why does a reducer mutating the state prevent React-Redux from re-rendering a wrapped component?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#16311-why-does-a-selector-mutating-and-returning-a-persistent-object-to-mapstatetoprops-prevent-react-redux-from-re-rendering-a-wrapped-component&quot; id=&quot;markdown-toc-16311-why-does-a-selector-mutating-and-returning-a-persistent-object-to-mapstatetoprops-prevent-react-redux-from-re-rendering-a-wrapped-component&quot;&gt;1.6.3.11 Why does a selector mutating and returning a persistent object to &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; prevent React-Redux from re-rendering a wrapped component?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#16312-how-does-immutability-enable-a-shallow-check-to-detect-object-mutations&quot; id=&quot;markdown-toc-16312-how-does-immutability-enable-a-shallow-check-to-detect-object-mutations&quot;&gt;1.6.3.12 How does immutability enable a shallow check to detect object mutations?&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#164-how-can-immutability-in-your-reducers-cause-components-to-render-unecessarily&quot; id=&quot;markdown-toc-164-how-can-immutability-in-your-reducers-cause-components-to-render-unecessarily&quot;&gt;1.6.4 How can immutability in your reducers cause components to render unecessarily?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#165-how-can-immutability-in-mapstatetoprops-cause-components-to-render-unecessarily&quot; id=&quot;markdown-toc-165-how-can-immutability-in-mapstatetoprops-cause-components-to-render-unecessarily&quot;&gt;1.6.5 How can immutability in &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; cause components to render unecessarily?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#166-what-approaches-are-there-for-handling-data-immutably-do-i-have-to-use-immutablejs&quot; id=&quot;markdown-toc-166-what-approaches-are-there-for-handling-data-immutably-do-i-have-to-use-immutablejs&quot;&gt;1.6.6 What approaches are there for handling data immutably? Do I have to use Immutable.JS?&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#1661-using-immutalbejs-with-redux&quot; id=&quot;markdown-toc-1661-using-immutalbejs-with-redux&quot;&gt;1.6.6.1 Using Immutalbe.JS with Redux&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1662-why-should-i-use-an-immutable-focused-library-such-as-immutablejs&quot; id=&quot;markdown-toc-1662-why-should-i-use-an-immutable-focused-library-such-as-immutablejs&quot;&gt;1.6.6.2 Why should I use an immutable-focused library such as Immutable.JS?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1663-why-should-i-choose-immutablejs-as-an-immutable-library&quot; id=&quot;markdown-toc-1663-why-should-i-choose-immutablejs-as-an-immutable-library&quot;&gt;1.6.6.3 Why should I choose Immutable.JS as an immutable library?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1664-what-are-the-issues-with-using-immutablejs&quot; id=&quot;markdown-toc-1664-what-are-the-issues-with-using-immutablejs&quot;&gt;1.6.6.4 What are the issues with using Immutable.JS?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1665-is-immutablejs-worth-the-effort&quot; id=&quot;markdown-toc-1665-is-immutablejs-worth-the-effort&quot;&gt;1.6.6.5 Is Immutable.JS worth the effort?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#1666-what-are-some-opinionated-best-practices-for-using-immutablejs-with-redux&quot; id=&quot;markdown-toc-1666-what-are-some-opinionated-best-practices-for-using-immutablejs-with-redux&quot;&gt;1.6.6.6 What are some opinionated Best Practices for using Immutable.JS with Redux?&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#167-what-are-the-issues-with-using-javascript-for-immutable-operations&quot; id=&quot;markdown-toc-167-what-are-the-issues-with-using-javascript-for-immutable-operations&quot;&gt;1.6.7 What are the issues with using JavaScript for immutable operations?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#17-code-structure&quot; id=&quot;markdown-toc-17-code-structure&quot;&gt;1.7 Code Structure&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#171-what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go&quot; id=&quot;markdown-toc-171-what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go&quot;&gt;1.7.1 What should my file structure look like? How should I group my action creators and reducers in my project? Where should my selectors go?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#172-how-should-i-split-my-logic-between-reducers-and-action-creators-where-should-my-business-logic-go&quot; id=&quot;markdown-toc-172-how-should-i-split-my-logic-between-reducers-and-action-creators-where-should-my-business-logic-go&quot;&gt;1.7.2 How should I split my logic between reducers and action creators? Where should my “business logic” go?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#173-why-should-i-use-action-creators&quot; id=&quot;markdown-toc-173-why-should-i-use-action-creators&quot;&gt;1.7.3 Why should I use action creators?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#18-peformance&quot; id=&quot;markdown-toc-18-peformance&quot;&gt;1.8 Peformance&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#181-how-well-does-redux-scale-in-terms-of-performance-and-architecture&quot; id=&quot;markdown-toc-181-how-well-does-redux-scale-in-terms-of-performance-and-architecture&quot;&gt;1.8.1 How well does Redux “scale” in terms of performance and architecture?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#182-wont-calling-all-my-reducers-for-each-action-be-slow&quot; id=&quot;markdown-toc-182-wont-calling-all-my-reducers-for-each-action-be-slow&quot;&gt;1.8.2 Won’t calling “all my reducers” for each action be slow?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#183-do-i-have-to-deep-clone-my-state-in-a-reducer-isnt-copying-my-state-going-to-be-slow&quot; id=&quot;markdown-toc-183-do-i-have-to-deep-clone-my-state-in-a-reducer-isnt-copying-my-state-going-to-be-slow&quot;&gt;1.8.3 Do I have to deep-clone my state in a reducer? Isn’t copying my state going to be slow?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#184-how-can-i-reducer-the-number-of-store-update-events&quot; id=&quot;markdown-toc-184-how-can-i-reducer-the-number-of-store-update-events&quot;&gt;1.8.4 How can I reducer the number of store update events?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#185-will-having-one-state-tree-cause-memory-problems-will-dispatching-many-actions-take-up-memory&quot; id=&quot;markdown-toc-185-will-having-one-state-tree-cause-memory-problems-will-dispatching-many-actions-take-up-memory&quot;&gt;1.8.5 Will having “one state tree” cause memory problems? Will dispatching many actions take up memory?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#19-design-decisions&quot; id=&quot;markdown-toc-19-design-decisions&quot;&gt;1.9 Design Decisions&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#191-why-doesnt-redux-pass-the-state-and-action-to-subscribers&quot; id=&quot;markdown-toc-191-why-doesnt-redux-pass-the-state-and-action-to-subscribers&quot;&gt;1.9.1 Why doesn’t Redux pass the state and action to subscribers?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#192-why-doesnt-redux-support-using-classes-for-actions-and-reducers&quot; id=&quot;markdown-toc-192-why-doesnt-redux-support-using-classes-for-actions-and-reducers&quot;&gt;1.9.2 Why doesn’t Redux support using classes for actions and reducers?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#193-why-does-the-middleware-signature-use-currying&quot; id=&quot;markdown-toc-193-why-does-the-middleware-signature-use-currying&quot;&gt;1.9.3 Why does the middleware signature use currying?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#194-why-does-applymiddlware-use-a-closure-for-dispatch&quot; id=&quot;markdown-toc-194-why-does-applymiddlware-use-a-closure-for-dispatch&quot;&gt;1.9.4 Why does applyMiddlware use a closure for dispatch?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#195-why-doesnt-combinereducers-include-a-third-argument-with-the-entire-state-when-it-calls-each-reducer&quot; id=&quot;markdown-toc-195-why-doesnt-combinereducers-include-a-third-argument-with-the-entire-state-when-it-calls-each-reducer&quot;&gt;1.9.5 Why doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; include a third argument with the entire state when it calls each reducer?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#196-why-doesnt-mapdispatchtoprops-allow-use-of-return-values-from-getstate-or-mapstatetoprops&quot; id=&quot;markdown-toc-196-why-doesnt-mapdispatchtoprops-allow-use-of-return-values-from-getstate-or-mapstatetoprops&quot;&gt;1.9.6 Why doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; allow use of return values from &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps()&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#110-react-redux&quot; id=&quot;markdown-toc-110-react-redux&quot;&gt;1.10 React Redux&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1101-why-isnt-my-component-re-rendering-or-my-mapstatetoprops-running&quot; id=&quot;markdown-toc-1101-why-isnt-my-component-re-rendering-or-my-mapstatetoprops-running&quot;&gt;1.10.1 Why isn’t my component re-rendering, or my mapStateToProps running?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1102-why-is-my-component-re-renderint-too-often&quot; id=&quot;markdown-toc-1102-why-is-my-component-re-renderint-too-often&quot;&gt;1.10.2 Why is my component re-renderint too often?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1103-how-can-i-speed-up-my-mapstatetoprops&quot; id=&quot;markdown-toc-1103-how-can-i-speed-up-my-mapstatetoprops&quot;&gt;1.10.3 How can I speed up my &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1104-why-dont-i-have-thispropsdispatch-available-in-my-connected-component&quot; id=&quot;markdown-toc-1104-why-dont-i-have-thispropsdispatch-available-in-my-connected-component&quot;&gt;1.10.4 Why don’t I have &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.dispatch&lt;/code&gt; available in my connected component?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1105-should-i-only-connect-my-top-component-or-can-i-connect-multiple-components-in-my-tree&quot; id=&quot;markdown-toc-1105-should-i-only-connect-my-top-component-or-can-i-connect-multiple-components-in-my-tree&quot;&gt;1.10.5 Should I only connect my top component, or can I connect multiple components in my tree?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#111-miscellaneous&quot; id=&quot;markdown-toc-111-miscellaneous&quot;&gt;1.11 Miscellaneous&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1111-are-there-any-larger-real-redux-projects&quot; id=&quot;markdown-toc-1111-are-there-any-larger-real-redux-projects&quot;&gt;1.11.1 Are there any larger, “real” Redux projects?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#1112-how-can-i-implement-authentication-in-redux&quot; id=&quot;markdown-toc-1112-how-can-i-implement-authentication-in-redux&quot;&gt;1.11.2 How can I implement authentication in Redux?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-to-be-read&quot; id=&quot;markdown-toc-2-to-be-read&quot;&gt;2. To be read&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-参考资料&quot; id=&quot;markdown-toc-5-参考资料&quot;&gt;5 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-faq&quot;&gt;1 FAQ&lt;/h2&gt;

&lt;h3 id=&quot;11-general&quot;&gt;1.1 General&lt;/h3&gt;

&lt;h4 id=&quot;111-when-should-i-use-redux&quot;&gt;1.1.1 When should I use Redux?&lt;/h4&gt;

&lt;p&gt;What to learn can be an overwhelming question for a JavaScript developer. It helps to narrow the range of options by learning one thing at a time and focusing on problems you find in your work. Redux is a pattern for managing application state. If you do not have problems with state management, you might find the benefits of Redux harder to understand. Some UI libraries (like React) have their own state management system. If you are using one of these libraries, expecially if you are just learning to use them, we encourage you to learn the capabilities of that built-in system first. It might be all you need to build your applicaton. If your application becomes so complex that you are confused about where state is stored or how state changes, then it is a good time to leran Redux. Experiencing the complexity that Redux seeks to abstract is the best preparation for effective ly applying that abstraction to your work.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://gedd.ski/post/what-not-to-learn/&quot;&gt;Deciding What Not to Learn&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ux.shopify.com/how-to-learn-web-frameworks-9d447cb71e68&quot;&gt;How to learn web frameworks&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/&quot;&gt;Redux vs MobX vs Flux vs … Do you even need that?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=12882816&quot;&gt;Ask HN: Overwhelmed with learning frong-end, how do I proceed?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/acemarke/status/901329101088215044&quot;&gt;Twitter: If you want to teach someone to use an abstraction…&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/739961787295117312&quot;&gt;Twitter: It was never intended to be learned before …&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/739962098030137344&quot;&gt;Twitter: Learning Redux before React?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/raquelxmoss/status/901576285020856320&quot;&gt;Twitter: The first time I used React, people told me I needed Redux…&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/garetmckinley/status/901500556568645634&quot;&gt;Twitter: This ws my experience with Redux…&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;112-when-should-i-use-redux&quot;&gt;1.1.2 When should I use Redux?&lt;/h4&gt;

&lt;p&gt;The need to use Redux should not be taken for granted. As Pete Hunt, one of the early contributors to React, says: You’ll know when you need Flux. If you aren’t sure if you need it, you don’t need it.&lt;/p&gt;

&lt;p&gt;Similarly, DanAbramov, one of the creators of Redux, says: I would like to amend this: don’t use Redux until you have problems with vanilla React.&lt;/p&gt;

&lt;p&gt;In general, use Redux when you have reasonable amounts of data changing over time, you need a single source of truth, and you find that approaches like keeping everything in a top-level React component’s state are no longer sufficient.&lt;/p&gt;

&lt;p&gt;However, it’s also important to understand that using Redux comes with tradeoffs. It’s not designed to be the shortest or fastest way to write code. It’s intended to help answer the question “When did a certain slice of state change, and where did the data come from?”, with predictable behavior It does so by asking you to follow specific constraints in your application: store your application’s state as plain data, describe changes as plain objects, and handle those changes with pure functions that apply updates immutably. This is often the source of complaines about “boilerplate”. These constraints require effort on the part of a developer, but also open up a number of additional possibilities (such as store persistence and synchronization).&lt;/p&gt;

&lt;p&gt;In the end, Redux is just a tool. It’s a great tool, and there’s some great reasons to use it, but there’s also reasons you might not want to use it. Make inforamed decisions about your tools, and understand the tradeoffs involved in each decision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Information&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/introduction/Motivation.html&quot;&gt;Introduction: Motivation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/petehunt/react-howto&quot;&gt;React How-To&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;You Might Not Need Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/swlh/the-case-for-flux-379b7d1982c6&quot;&gt;The Case for Flux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.fullstackreact.com/articles/redux-with-mark-erikson/&quot;&gt;Some Reasons Why Redux is Useful in a React App&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/699241546248536064&quot;&gt;Twitter: Don’t use Redux until…&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/733742952657342464&quot;&gt;Twitter: Redux is designed to be predictable, not concise&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/732912085840089088&quot;&gt;Twitter: Redux is useful to eliminate deep prop passing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/725089243836588032&quot;&gt;Twitter: Don’t use Redux unless you’re unhappy with local component state&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/737036433215610880&quot;&gt;Twitter: You don’t need Redux if your data never changes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/802564042648944642&quot;&gt;Twitter: If your reducer looks boring, don’t use redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/5exfea/feedback_on_my_first_redux_app/dagglqp/&quot;&gt;Reddit: You don’t need Redux if your app just fetches something on a single page&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32461229/why-use-redux-over-facebook-flux&quot;&gt;Stack Overflow: Why use Redux over Facebook Flux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35675339/why-should-i-use-redux-in-this-example&quot;&gt;Stack Overflow: Why should I use Redux in this example?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32021763/what-could-be-the-downsides-of-using-redux-instead-of-flux&quot;&gt;Stack Overflow: What could be the downsides of using Redux instead of Flux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/36631761/when-should-i-add-redux-to-a-react-app&quot;&gt;Stack Overflow: When should I add Redux to a React app?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39260769/redux-vs-plain-react/39261546#39261546&quot;&gt;Stack Overflow: Redux vs plain React?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/acemarke/status/793862722253447168&quot;&gt;Twitter: Redux is a platform for developers to build customized state management with reusable things&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;113-can-redux-only-be-used-with-react&quot;&gt;1.1.3 Can Redux only be used with React?&lt;/h4&gt;

&lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code. That said, it is more useful when combiend with a declarative view implementation that can infer the UI updates from the state changes, such as React or one of the similar libraries available.&lt;/p&gt;

&lt;h4 id=&quot;114-do-i-need-to-have-a-particular-build-tool-to-use-redux&quot;&gt;1.1.4 Do I need to have a particular build tool to use Redux?&lt;/h4&gt;

&lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless ofyour JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all. The &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;counter-vanilla&lt;/a&gt; example demonstrates basic ES5 usage with Redux included as a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. As the relevant pull request says: The new Counter Vanila example is aimed to dispel the myth that Redux requires Webpack, React, hot reloading, sagas, action creators, constants, Babel, npm, CSS moduels, decorators, fluent Lation, an Egghead subscription, a PHD, or an Exceeds Expectations O.W.L. level.&lt;/p&gt;

&lt;p&gt;Nope, it’s just HTML, some artisanal &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, and plain old DOM manipulation. Enjoy!&lt;/p&gt;

&lt;h3 id=&quot;12-reducers&quot;&gt;1.2 Reducers&lt;/h3&gt;

&lt;h4 id=&quot;121-how-do-i-share-state-between-two-reducers-do-i-have-to-use-combinereducers&quot;&gt;1.2.1 How do I share state between two reducers? Do I have to use combineReducers?&lt;/h4&gt;

&lt;p&gt;The suggested structure for a Redux store is to split the state object into multiple “slices” or “domains” by key, and provide a separate reducer funciton to manage each individual data slic. This is similar to how the standard Flux pattern has multiple independent stores, and Redux provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; utility function to make this pattern easier. However, it’s important to note that &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; is not required - it is simply a utility funciton for the common use case of having a single reducer function per state slice, with plain JavaScropt objects for the data.&lt;/p&gt;

&lt;p&gt;Many users later want to try to share data between two reducers, but find that &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; does not allow them to do so. There are several approaches that can be used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If a reducer needs to know data from another slice of state, the state tree shape may need to be reorganized so that a single reducer is handling more of the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may need to write some custom functions for handling some of these actions. This may require replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; with your own top-level reducer function. You can also use a utility such as &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;reducer-reducers&lt;/a&gt; to run &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; to handle morest actions, but also run a more specialized reducer for specific actions that cross state slices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/advanced/AsyncActions.md&quot;&gt;Async action creators&lt;/a&gt; such as &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; have access to the entire state through &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt;. An action creator can retrieve additional data from the state and put it in an action, so that each reducer has enough information to update its own state slice.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, remember that reducers are just functions - you can organize them and subdivide them any way you want, and you are encouraged to break them down into smaller, reusable functions (“reducer composition”). While you do so, you may pass a custom third argument from a parent reducer if a child reducer needs additional data to calculate its next state. You just need to make sure that together they follow the basic rules of reducers: &lt;code class=&quot;highlighter-rouge&quot;&gt;(state,action) =&amp;gt; newState&lt;/code&gt;, and update state immutably rather than mutating it directly.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;API: combineReducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/StructuringReducers.html&quot;&gt;Recipes: Structuring Reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/601&quot;&gt;#601: A concern on combineReducers, when an aciton is related to multiple reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1400&quot;&gt;#1400: Is passing top-level state object to branch reducer an anti-pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34333979/accessing-other-parts-of-the-state-when-using-combined-reducers&quot;&gt;Stack Overflow: Accessing other parts of the state when using combined reducers?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34427851/reducing-an-entire-subtree-with-redux-combinereducers&quot;&gt;stack Overflow: Reducing an entire subtree with redux combineReducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://invalidpatent.wordpress.com/2016/02/18/sharing-state-between-redux-reducers/&quot;&gt;Sharing State Between Redux Reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;122-do-i-have-to-use-the-switch-statement-to-handle-actions&quot;&gt;1.2.2 Do I have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement to handle actions?&lt;/h4&gt;

&lt;p&gt;No,you are welcome to use any approach you’d like to respond to an action in a reducer. The &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement is the most common approach, but it’s fine to use &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, a lookup table of funcitons, or to create a function that abstracts this awat. In fact, while Redux does require that aciton objects contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; field, your reducer logic doesn’t even have to rely on that to handle the action. That said, the standard approach is definitely using a switch statement or a lookup table based on &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/ReducingBoilerplate.html&quot;&gt;Recipes: Reducing Boilerplate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/SplittingReducerLogic.html&quot;&gt;Recipes: Structuring Reducers - Splitting Reducer Logic&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/883&quot;&gt;#883: take away the huge switch block&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1167&quot;&gt;#1167: Reducer without switch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-organizing-state&quot;&gt;1.3 Organizing State&lt;/h3&gt;

&lt;h4 id=&quot;131-do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate&quot;&gt;1.3.1 Do I have to put all my state into Redux? Should I ever use React’s setState()?&lt;/h4&gt;

&lt;p&gt;There is no “right” answer for this. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component’s internal state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using local component state is fine&lt;/strong&gt;. As a developer, it is your job to determine what kinds of state make up your application, and where each piece of state should live. Find a balance that works for you, and go with it.&lt;/p&gt;

&lt;p&gt;Some common rules of thumb for determining what kind of data should be put into Redux:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Do other parts of the application care about this data?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you need to be able to create further derived data based on this oiginal data?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is the same data being used to drive multiple components?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you want to cache the data (ie, use what’s in state if it’s already there instead of re-requesting it)?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a number of community packages that implement various approaches for storing per-component state in a Redux store instead, such as &lt;a href=&quot;https://github.com/tonyhb/redux-ui&quot;&gt;redux-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/tomchentw/redux-component&quot;&gt;redux-component&lt;/a&gt;, &lt;a href=&quot;https://github.com/threepointone/redux-react-local&quot;&gt;redux-react-local&lt;/a&gt; and more. It’s also possible to apply Redux’s principles and concept of reducers to the task of updating local component state as well, along the lines &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState( (previousState) =&amp;gt; reducer(previousState,someAction))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;You Might Not Need Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@adamrackis/finding-state-s-place-with-react-and-redux-e9a586630172&quot;&gt;Finding &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;’s place with React and Redux’&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@zackargyle/a-case-for-setstate-1f1c47cd3f73&quot;&gt;A Case for setState&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c&quot;&gt;How to handle State in React: the missing FAQ&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/where-do-i-belong-a-guide-to-saving-react-component-data-in-state-store-static-and-this-c49b335e2a00&quot;&gt;Where to Hold React Component Data: state, store, static, and this&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://jamesknelson.com/5-types-react-application-state/&quot;&gt;The 5 Types of React Application State&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/159&quot;&gt;#159: Investigate using Redux for pseudo-local component state&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1098&quot;&gt;#1098: Using Redux in reusable React component&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1287&quot;&gt;#1287: How to choose between Redux’s store and React’s state?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1385&quot;&gt;#1385: What are the disadvantages of storing all your state in a single immutable atom?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/749710501916139520&quot;&gt;Twitter: Should I keep something in React component state?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/736310245945933824&quot;&gt;Twitter: Using a reducer to update a component&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://discuss.reactjs.org/t/redux-and-global-state-vs-local-state/4187&quot;&gt;React Forums: Redux and global state vs local state&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/4w04to/when_using_redux_should_all_asynchronous_actions/d63u4o8&quot;&gt;Reddit: “When should I put something into my Redux store?”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35664594/redux-why-is-state-all-in-one-place-even-state-that-isnt-global&quot;&gt;Stack Overflow: Why is state all in one place, even state that isn’t global?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35328056/react-redux-should-all-component-states-be-kept-in-redux-store&quot;&gt;Stack OverflowL Should all component state be kept in Redux store?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md&quot;&gt;Redux Addons Catalog: Component State&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;132-can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state&quot;&gt;1.3.2 Can I put functions, promises, or other non-serializable items in my store state?&lt;/h4&gt;

&lt;p&gt;It is highly recommended that you only put plain serializable objects, arrays, and primitives into your store. It’s technically possible to insert non-serializable items into the store, but doing so can break the ability to persist and rehydrate the contents of a store, as well as interface with time-travel debugging. If you are okay with things like persistence and time-travel debugging potentially not working as intended, then you are totally welcome to put non-serializable items into your Redux store. Ultimately, it’s your application and how you implement it is up to you. As with many other things about Redux, just be sure you understand what tradeoffs are involved.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1248&quot;&gt;#1248: Is it ok and possible to store a react component in a reducer?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1279&quot;&gt;#1279: Have any suggestions for where to put a Map Component in Flux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1390&quot;&gt;#1390: Component Loading&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1407&quot;&gt;#1407: Just sharing a great base class&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1793&quot;&gt;#1793: React Elements in Redux State&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;133-how-do-i-organize-nested-or-duplicate-data-in-my-state&quot;&gt;1.3.3 How do I organize nested or duplicate data in my state?&lt;/h4&gt;

&lt;p&gt;Data with IDs, nesting, or relationships should generally be stored in a “normalized” fashion: each object should be stored once, keyed by ID, and other objects that reference it should only store the ID rather than a copy of the entire object. It may help to think of parts of your store as a database, with individual “tables” per item type. Libraries such as &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizer&lt;/a&gt; and &lt;a href=&quot;https://github.com/tommikaikkonen/redux-orm&quot;&gt;redux-orm&lt;/a&gt; can provide help and abstractions in managing normalized data.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html&quot;&gt;Advanced: Async Actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/introduction/Examples.html#real-world&quot;&gt;Examples: Real World example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/PrerequisiteConcepts.html#normalizing-data&quot;&gt;Recipes: Structuring Reducers - Prerequisite Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/NormalizingStateShape.html&quot;&gt;Recipes: Structuring Reducers - Normalizing State Shape&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/tree-view&quot;&gt;Examples: Tree View&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://somebody32.github.io/high-performance-redux/&quot;&gt;High-Performance Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@adamrackis/querying-a-redux-store-37db8c7f3b0f&quot;&gt;Querying a Redux Store&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/316&quot;&gt;#316: How to create nested reducers?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/815&quot;&gt;#815: Working with Data Structures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/946&quot;&gt;#946: Best way to update related state fields with split reducers?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/994&quot;&gt;#994: How to cut the boilerplate when updating nested entities?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1255&quot;&gt;#1255: Normalizr usage with nested objects in React/Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/pull/1269&quot;&gt;#1269: Add tree view example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1824#issuecomment-228585904&quot;&gt;#1824: Normalising state and garbage collection&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/715507260244496384&quot;&gt;Twitter: state shape should be normalized&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32798193/how-to-handle-tree-shaped-entities-in-redux-reducers&quot;&gt;Stack Overflow: How to handle tree-shaped entities in Redux reducers?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/37264415/how-to-optimize-small-updates-to-props-of-nested-component-in-react-redux&quot;&gt;Stack Overflow: How to optimize small updates to props of nested components in React + Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14-store-setup&quot;&gt;1.4 Store Setup&lt;/h3&gt;

&lt;h4 id=&quot;141-can-or-should-i-create-multiple-stores-can-i-import-my-store-directly-and-use-it-in-components-myself&quot;&gt;1.4.1 Can or should I create multiple stores? Can I import my store directly, and use it in components myself?&lt;/h4&gt;

&lt;p&gt;The original Flux pattern describes having multiple “stores” in an app, each one nolding a dfferent area of domain data. This can introduce issues such as needing to have one store &lt;code class=&quot;highlighter-rouge&quot;&gt;waitFor&lt;/code&gt; another store to update. This is not necessary in Redux because the spearation between data domains is already achieved by splitting a single reducer into smaller reducers.&lt;/p&gt;

&lt;p&gt;As with several other questions, it is possible to create multiple distinct Redux stores in a page, but the intended pattern is to have only a single store. Having a single store enables using the Redux Devtools, makes persisting and rehydrating data simpler, and simplifies the subscription logic.&lt;/p&gt;

&lt;p&gt;Some valid reasons for using multiple stores in Redux might include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Solving a performance issue casues by too frequent updates of some part of the state, when confirmed by profiling the app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Isolating a Redux app as a component in a bigger application, in which case you might want to create a store per root component instance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, creating new stores shouldn’t be your first instinct, expecailly if you come froma Flux background. Try reducer composition first, and only ouse multiple stores if it doesn’t solve your problem.&lt;/p&gt;

&lt;p&gt;Similarly, whil eyou can reference your store instance by importing it directly, this is not a recommended pattern in Redux. If you create a store instance and export it from a module, it will become a singleton. This means it will be harder to isolate a Redux app as a component of a larger app, ti this is ever necessary, or to enabl eserver rendering, because ont he server you want to create separate store instances for every request.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt;, the wrapper classes generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; function do actually look for &lt;code class=&quot;highlighter-rouge&quot;&gt;props.store&lt;/code&gt; if it exists, but it’s best if you wrap your root component in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Provider store={store}&amp;gt;&lt;/code&gt; and let React Redux worry about passing the store down. This way components don’t need to worry about importing a store module, and isolating a Redux app or enabling server rendering is much easier to do later.&lt;/p&gt;

&lt;p&gt;Furhter Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1436&quot;&gt;#1346: Is it bad practice to just have a ‘stores’ directory?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33619775/redux-multiple-stores-why-not&quot;&gt;Stack Overflow: Redux multiple stores, why not?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35667249/accessing-redux-state-in-an-action-creator&quot;&gt;Stack Oveflow: Accessing Redux state in an aciton creator&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/gaearon/eeee2f619620ab7b55673a4ee2bf8400&quot;&gt;Gist: Breaking out of Redux paradigm to isolate apps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;142-is-it-ok-to-have-more-than-one-middle-ware-chain-in-my-store-enhancer-what-is-the-difference-between-next-and-dispatch-in-a-middleware-function&quot;&gt;1.4.2 Is it OK to have more than one middle ware chain in my store enhancer? What is the difference between next and dispatch in a middleware function?&lt;/h4&gt;

&lt;p&gt;Redux middleware act like a linked list. Each middleware function can either call &lt;code class=&quot;highlighter-rouge&quot;&gt;next(action)&lt;/code&gt; to pass an aciton along to the next middleware in line, call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(action)&lt;/code&gt; to restart the processing at the begining of the list, or do nothing at all to stop the action from being processed further.&lt;/p&gt;

&lt;p&gt;This chain of middleware is defined by the arguments passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware&lt;/code&gt; funciton used when creating a store: Defining multiple chains will not work correctly, as they woul dhave distinctly different &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; references and the different chains would effectively be disconnected.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html&quot;&gt;Advanced: Middleware&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/applyMiddleware.html&quot;&gt;API: applyMiddleware&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1051&quot;&gt;#1051: Shortcomings of the current applyMiddleware and composing createStore&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@meagle/understanding-87566abcfb7a&quot;&gt;Understanding Redux Middleware&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.krawaller.se/posts/exploring-redux-middleware/&quot;&gt;Exploring Redux Middlware&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;143-how-do-i-subscribe-to-only-a-portion-of-the-state-can-i-get-the-dispatched-action-as-part-of-the-subscription&quot;&gt;1.4.3 How do I subscribe to only a portion of the state? Can I get the dispatched action as part of the subscription?&lt;/h4&gt;

&lt;p&gt;Redux provides a single &lt;code class=&quot;highlighter-rouge&quot;&gt;store.subscribe&lt;/code&gt; method for notifying listeners that the store has updated. Listener callbacks do not receive the current state as an argument - it is simply an indication that something has changed. The subscriber logic can then call &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; to get the current state value. This API is intended as a low-level primitive with no dependencies or complications, and can be used to build higher-level subscription logic. UI bindings such as React Redux can create a subscription for each connected component. It is also possible to write functions that can intelligently compare the old state vs the new state, and execute additional logic if certain pieces have changed. Example include &lt;a href=&quot;https://github.com/jprichardson/redux-watch&quot;&gt;redux-watch&lt;/a&gt;, &lt;a href=&quot;https://github.com/ashaffer/redux-subscribe&quot;&gt;redux-subscribe&lt;/a&gt; and &lt;a href=&quot;https://github.com/ivantsov/redux-subscriber&quot;&gt;redux-subscriber&lt;/a&gt; which offer different approaches to specifying subscriptions and handling changes. The new state is not passed to the listeners in order to simplify implementing store enhancers such as the Redux RevTools. In addition, subscribers are intended to react to the state value itself, not the action. Middleware can be used if the action is important and needs to be handled specifically.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics/Store.html&quot;&gt;Basics: Store&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/Store.html&quot;&gt;API: Store&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/303&quot;&gt;#303: subscribe API with state as an argument&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/580&quot;&gt;#580&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/922&quot;&gt;#922&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1057&quot;&gt;#1057&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1300&quot;&gt;#1300: Redux is great but major feature is missing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/store.md#store-change-subscriptions&quot;&gt;Redux Addons Catalog: Store Change Subscriptions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;15-actions&quot;&gt;1.5 Actions&lt;/h3&gt;

&lt;h4 id=&quot;151-why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants&quot;&gt;1.5.1 Why should type be a string, or at least serializable? Why should my action types be constants&lt;/h4&gt;

&lt;p&gt;As with state, seriallizable actions enable several of Redux’s defining features, such as time travel debugging, and recording and replaying actions. Using something like a &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; value or using &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; checks for actions themselves would break that. Strings are serializable and easily self-descriptive, and so are a better choice. Note that it is okay to use Symbols, Promises, or other non-serializable values in an action if the action is intended for use by middleware. Actions only need to be serializable by the time they actually reach the store and are passed to the reducers.&lt;/p&gt;

&lt;p&gt;We can’t reliably enforce serializable actions for performance reasons, so Redux only checks that every aciton is a plain object, and that the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; is defined. The rest is up to you, but you might find that keeping everything serializable helps dbug and reproduce issues. Encapsulating and centralizing commmonly used pieces of code is a key concept in programming. While it defining reusable constants makes maintaining code easier. If you put constants in a separate file, you can &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;check your &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements against typos&lt;/a&gt; so you can’t accidentally use the wrong string.&lt;/p&gt;

&lt;p&gt;Further Inforamation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/ReducingBoilerplate.html#actions&quot;&gt;Reducing Boilerplate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/384&quot;&gt;#384: Recommend that Action constants be named in the past tense&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/628&quot;&gt;#628: Solution for simple action creation with less boilerplate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1024&quot;&gt;#1024: Proposal: Declarative reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1167&quot;&gt;#1167: Reducer without switch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/q/34759047/62937&quot;&gt;Stack Overflow: Why doyou need ‘Actions’ as data in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/q/34965856/62937&quot;&gt;Stack Overflow: What is the point of the constants in Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;152-is-there-always-a-one-to-one-mapping-between-reducers-and-actions&quot;&gt;1.5.2 Is there always a one-to-one mapping between reducers and actions?&lt;/h4&gt;

&lt;p&gt;No. We suggest you write independent small reducer fuctions that are each responsible for updates a specific slice of state. We call this pattern “reducer composition”. A given action could be handled by all, some, or none of them. This keeps components decoupled from the actual data changes, as one action may affect different parts of the state tree, and there is no need for the component to be aware of this. Some users do choose to bind them more tightly together, such as the “ducks” file structure, but there is definitely no one-to-one mapping by default, and you should break out of such a paradigm any tiem you feel you want to handle an action in many reducers.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics/Reducers.html&quot;&gt;Basics: Reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/StructuringReducers.html&quot;&gt;Recipes: Structuring Reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/682923564006248448&quot;&gt;Twitter: most common Redux misconception&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1167&quot;&gt;#1167: Reducer without switch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reduxible/reduxible/issues/8&quot;&gt;Reduxible #8: Reducers and action creators aren’t a one-to-one mapping&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35493352/can-i-dispatch-multiple-actions-without-redux-thunk-middleware/35642783&quot;&gt;Stack Overflow: Can I dispatch multiple actions without Redux Thunk middleware?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;153-how-can-i-represent-side-effects-such-as-ajax-calls-why-do-we-need-things-like-action-creators-thunks-and-middleware-to-do-async-behavior&quot;&gt;1.5.3 How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?&lt;/h4&gt;

&lt;p&gt;This is a long and complex topic, with a wide variety of opinions on how code should be organized and what approaches should be used. Any meaningful web app needs to execute complex logic, usually including asynchrounous work such as making AJAX requests. That code is no longer purely a function of its inputs, and the interctions with the outside world are known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29&quot;&gt;“side effects”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redux is inspired by functional programming, and out of the box, has no place for side effects to be executed. In particular, reducer functions must always be pure functions of &lt;code class=&quot;highlighter-rouge&quot;&gt;(state, action) =&amp;gt; newState&lt;/code&gt;. However, Redux’s middleware makes it possible to intercept dispatchd actions and add additional complex behavior around them, including side effects.&lt;/p&gt;

&lt;p&gt;In general, Redux suggests that code with side effects should be part of the action creation process. While that logic can be performed inside of a UI component, it generally makes sense to extract that logic into a reusable function so that the same logic can be called from multiple places - in other words, an action creator function.&lt;/p&gt;

&lt;p&gt;The simplest and most common way to do this is to add the &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; middleware that lets you write action creators with more complex and asynchronous logic. Another widely-used method is &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;Redux Saga&lt;/a&gt; which lets you write more synchronous-looking code using generators, and can act like “background threads” or “daemons” in a Redux app. Yet another approach is &lt;a href=&quot;https://github.com/raisemarketplace/redux-loop&quot;&gt;Redux Loop&lt;/a&gt;, which invertes the process by allowingyour reducers to declare side effects in response to state changes and have them executed separately. Beyond that, there are many other community-developed libraries and ideas, each with their own take on how side effects should be managed.&lt;/p&gt;

&lt;p&gt;Further Inforamtion&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html&quot;&gt;Advanced: Async Actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncFlow.html&quot;&gt;Advanced: Async Flow&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html&quot;&gt;Advanced: Middleare&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@fward/redux-side-effects-and-you-66f2e0842fc3&quot;&gt;Redux SideEffects and You&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.hivejs.org/building-the-ui-2/&quot;&gt;Pure functionality and side effects in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://danmaz74.me/2015/08/19/from-flux-to-redux-async-actions-the-easy-way/&quot;&gt;From Flux to Redux: Async Actions the easy way&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/redux-side-effects.md&quot;&gt;React/Redux Links: “Redux Side Effects” category&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/markerikson/ea4d0a6ce56ee479fe8b356e099f857e&quot;&gt;Gist: Redux-Thunk examples&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/291&quot;&gt;#291: Trying to put API calls in the right place&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/455&quot;&gt;#455: Modeling side effects&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/533&quot;&gt;#533: Simpler introduction to async action creators&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/pull/569&quot;&gt;#569: Proposal: API for explicit side effects&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1139&quot;&gt;#1139: An alternative side effect model based on generators and sagas&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34570758/why-do-we-need-middleware-for-async-flow-in-redux&quot;&gt;Stack Overflow: Why do we need middleware for async flow in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559&quot;&gt;Stack Overflow: How to dispatch a Redux aciton with a timeout&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32982237/where-should-i-put-synchronous-side-effects-linked-to-actions-in-redux/33036344&quot;&gt;Stack Oveflow: Where should I put synchronous side effects linked to actions in redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32925837/how-to-handle-complex-side-effects-in-redux/33036594&quot;&gt;Stack Overflow: How to handle complex side-effects in Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33011729/how-to-unit-test-async-redux-actions-to-mock-ajax-response/33053465&quot;&gt;Stack Overflow: How to unit test aysnc Redux actions to mock ajax response&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35262692/how-to-fire-ajax-calls-in-response-to-the-state-changes-with-redux/35675447&quot;&gt;Stack Overflow: How to fire AJAX calls in response to the state changes with Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/469iyc/help_performing_async_api_calls_with_reduxpromise/&quot;&gt;Reddit: Help performing Async API calls with Redux-Promisse Middleware.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/689639582120415232&quot;&gt;Twitter: possible comparison between sagas, loops, and other approaches&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;154-should-i-dispatch-multiple-actions-in-a-row-from-one-action-creator&quot;&gt;1.5.4 Should I dispatch multiple actions in a row from one action creator?&lt;/h4&gt;

&lt;p&gt;There’s no specific rule for how you shold structure your actions. Using an async middleware like Redux Thunk certainly enables scenarios such as dispatching multiple distinct but related actions in a row, dispatching actions to represent progression of an AJAX request, dispatching actions conditionally based on state, or even dispatching an action and cehcking the updated state immediately afterwards. In general, ask if these actions are related but independent, or should actually be represented as one action. Do what makes sense for your own situation but try to balance the readability of reducers with readability of the action log. For example, an action that includes the whole new state tree would make your reducer a one-liner, but the downside is now you have no history of why the changes are happening, so debugging gets really difficult. On the other hand, if you emit actions in a loop to keep them granular, it’s a sign that you might want to introduce a new aciton type that is handled in a different way. Try to avoid dispatching several times synchronously in a row in the places where you’re concerned about performance. There are a number of addons and approaches that tha can batch up dispatches as well.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/Performance.html#performance-update-events&quot;&gt;FAQ: Performance - Reducing Update Events&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/2017/01/idiomatic-redux-thoughts-on-thunks-sagas-abstraction-and-reusability/#multiple-dispatching&quot;&gt;Idiomatic Redux: Thoughts on THunks, Sagas, Abstraction, and Reusability&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/597&quot;&gt;#597: Valid to dispatch multiple actions from an event handler?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/959&quot;&gt;#959: Multiple actions one dispatch?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33637740/should-i-use-one-or-several-action-types-to-represent-this-async-action/33816695&quot;&gt;Stack Overflow: Should I use one or several action types to represent this async action?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35406707/do-events-and-actions-have-a-11-relationship-in-redux/35410524&quot;&gt;Stack Overflow: Do events and actions ahve a 1:1 relatioship in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33220776/should-actions-like-showing-hiding-loading-screens-be-handled-by-reducers-to-rel/33226443#33226443&quot;&gt;Stack Overflow: Should actions be handled by reducers to related actions or generated by action creators themselves?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/800310164792414208&quot;&gt;Twitter: “Good thread ont eh problems with Redux Thunk…”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;16-immutable-data&quot;&gt;1.6 Immutable Data&lt;/h3&gt;

&lt;h4 id=&quot;161-what-are-the-benefits-immutability&quot;&gt;1.6.1 What are the benefits Immutability?&lt;/h4&gt;

&lt;p&gt;Immutability can bring increased performance to your app, and leads to simpler programming and debugging, as data that never changes is easier to reason about than data that is free to be changed arbitrarily throughout your app. In particular, immutability in the context of a Web app enables sophisticated change detection techniques to be implmented simply and cheaply, ensuring the computationally expensive process of updating the DOM occurs only when it absolutely has to (a cornerstone of React’s performance improvements over other libraries)&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/intro-to-immutable-js/&quot;&gt;Introduction to Immutable.js and Functional Programming Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.jfokus.se/jfokus16/preso/JavaScript-Immutability--Dont-Go-Changing.pdf&quot;&gt;JavaScript Immutability presentation (PDF - see slide 12 for benefits&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/immutable-js/#the-case-for-immutability&quot;&gt;Immutable.js - Immutable Collections for JavaScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/optimizing-performance.html&quot;&gt;React: Optimizing Performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b#.djje0rfys&quot;&gt;JavaScript Application Architecture On The Road to 2015&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;162-why-is-immutability-required-in-redux&quot;&gt;1.6.2 Why is immutability required in Redux?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Both Reudx and React-Redux employ &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#shallow-and-deep-equality-checking&quot;&gt;shallow equality checking&lt;/a&gt;. In particular: Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; utility &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#how-redux-uses-shallow-checking&quot;&gt;shallowly checks for reference changes&lt;/a&gt; caused by the reducers that it calls; React-Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; method generates components that &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#how-react-redux-uses-shallow-checking&quot;&gt;shallowly check reference changes to the root state&lt;/a&gt;, and the return values fromt eh &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; function to see if the wrapped components actually need to-rerender. Such &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#redux-shallow-checking-requires-immutability&quot;&gt;shallow checking requires immutability&lt;/a&gt; to function correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Immutable data management ultimately makes data handling safer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Time-travel debugging requires that reducers be pure functions with no side effects, so that you can correctly jump between different states.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/PrerequisiteConcepts.html&quot;&gt;Recipes: Prerequisite Reducer Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/5ecqqv/why_redux_need_reducers_to_be_pure_functions/dacmmjh/?context=3&quot;&gt;Reddit: Why Redux Needs Reducers To Be Pure Functions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;163-why-does-reudxs-use-of-shallow-equality-checking-require-immutability&quot;&gt;1.6.3 Why does Reudx’s use of shallow equality checking require immutability?&lt;/h4&gt;

&lt;p&gt;Redux’s use of shallow equality checking requires immutability if any connected components are to be updated correctly. To see why, we need to understand the idfference between shallow and deep equality checking in JavaScript&lt;/p&gt;

&lt;h5 id=&quot;1631-how-do-shallow-and-deep-equality-checking-diff&quot;&gt;1.6.3.1 How do Shallow and Deep Equality Checking diff?&lt;/h5&gt;

&lt;p&gt;Shallow equality checking (or reference equality) simply checks that two different varaibles reference the same object; in contrast, deep equality checking (or value equality) must check every value of two objects’ properties.&lt;/p&gt;

&lt;p&gt;A shallow equality check is therefore as simple (and as fast) as &lt;code class=&quot;highlighter-rouge&quot;&gt;a === b&lt;/code&gt;, whereas a deep equality check involves a recursive traversal through the properties of two objects, comparing the value of each property at each step.&lt;/p&gt;

&lt;p&gt;It’s for this improvement in performance that Redux uses shallow equality checking.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/&quot;&gt;Pros and Cons of using immutability with React.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1632-how-does-redux-use-shallow-equality-checking&quot;&gt;1.6.3.2 How does Redux use shallow equality checking?&lt;/h5&gt;

&lt;p&gt;Redux uses shallow equality checking in its &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; function to return either a new mutated copy of the root object, or, if no mutations have been made, the current root state object.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;API: combineReducers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1633-how-does-combinereducers-use-shallow-equality-checking&quot;&gt;1.6.3.3 How does &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; use shallow equality checking?&lt;/h5&gt;

&lt;p&gt;The &lt;a href=&quot;http://redux.js.org/docs/faq/Reducers.html#reducers-share-state&quot;&gt;suggested structure&lt;/a&gt; for a Redux store is to split the state object into multiple “slices” or “domains” by key, and provide a separate reducer function to manage each individual data slice. &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; makes working with this style of structure easier by taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt; argument that’s defined as a hash table comprising a set of key/value pairs, where each key is the name of a state slice, and the corresponding value is the reducer funciton that will act on it. So, for example, if your state shape is &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;todos,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myTodosReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCounterReducer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the keys &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; each refer to a separate state slice;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the values &lt;code class=&quot;highlighter-rouge&quot;&gt;myTodosReducer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;myCounterReducer&lt;/code&gt; are reducer functions, with each acting on the state slice identified by the respective key.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; iterates through each of these key/value pairs. For each iteration, it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;creates a reference to the current state slice referred to by each key;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;calls the appropriate reducer and passes it the slice;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;creates a reference to the possibly-mutated state slice that’s returned by the reducer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it continues through the iterations, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will construct a new state object with the state slices returned from each reducer. This new state object may or may not be different from the current state object. It is here that &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; uses shallow equality checking to determine whether the state has changed.&lt;/p&gt;

&lt;p&gt;Specifically, at each stage of the iteration, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; performs a shallow equality check on the current state slice and the state slice returned from the reducer. If the reducer returns a new object, the shallow equality check will fail, and &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will set a &lt;code class=&quot;highlighter-rouge&quot;&gt;hasChanged&lt;/code&gt; flag to true.&lt;/p&gt;

&lt;p&gt;After the iterations have completed, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will check the state of the &lt;code class=&quot;highlighter-rouge&quot;&gt;hasChanged&lt;/code&gt; flag. If it’s true, the newly-constructed state object will be returned. If it’s false, the current state object is returned.&lt;/p&gt;

&lt;p&gt;This is worth emphasising: If the reducers all return the same &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object passed to them, then &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will return the current root state object, no the newly updated one.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/api/combineReducers.html&quot;&gt;API: combineReducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/Reducers.html#reducers-share-state&quot;&gt;Redux FAQ - How do I share state between two reducers? Do I have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://egghead.io/lessons/javascript-redux-implementing-combinereducers-from-scratch&quot;&gt;Egghead.io: Redux: Implementing combineRedcers() from Scratch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1634-how-does-react-redux-use-shallow-equality-checking-&quot;&gt;1.6.3.4 How does React-Redux use shallow equality checking ?&lt;/h5&gt;

&lt;p&gt;React-Redux uses shallow equality checking to determine whether the component it’s wrapping needs to be re-rendered. To do this, it assumes that the wrapped component is pure: that is, that the component will produce the &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/f4d55840a14601c3a5bdc0c3d741fc5753e87f66/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux&quot;&gt;same results givent eh same props and state&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By assuming the wrapped component is pure, it need only check whether the root state object or the values returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; have changed. If they haven’t, the wrapped componenet does not need re-rendering.&lt;/p&gt;

&lt;p&gt;It detects a change by keeping a reference to the root state object, and a reference to each value in the props object that’s returned from the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;It then runs a shallow equality check on ites reference to the root state object and the state object passed to it, and a separate series of shallow checks on each reference to the props object’s values and those that are returned from running the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; function again.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics/UsageWithReact.html&quot;&gt;React-Redux Bindings&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;API: React-Redux’s connect function and &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/blob/f4d55840a14601c3a5bdc0c3d741fc5753e87f66/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux&quot;&gt;Troubleshooting: My views aren’t updating when something changes outside of Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1636-why-does-react-redux-shallowly-check-each-value-within-the-props-object-returned-from-mapstatetoprop&quot;&gt;1.6.3.6 Why does React-Redux shallowly check each value within the props object returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProp&lt;/code&gt;?&lt;/h5&gt;

&lt;p&gt;React-Redux performs a shallow equality check on each value within the props object, not on the props object itself. It does so because the props object is actually a hash of prop names and their values (or selector functions that are used to retrieve or generate the values), such as in this example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prop value&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;visibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// selector&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TodoApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As such, a shallow equality check of the props object returned from repeated calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; would always fail, as a new object woul dbe returned each time.&lt;/p&gt;

&lt;p&gt;React-Redux therefore maintains separate references to each value in the returned props object.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f#.gh07cm24f&quot;&gt;React.js pure render performance anti-pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1637-how-does-react-redux-use-shallow-equality-checking-to-determine-whether-a-component-needs-re-rendering&quot;&gt;1.6.3.7 How does React-Redux use shallow equality checking to determine whether a component needs re-rendering?&lt;/h5&gt;

&lt;p&gt;Each time React-Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; function is called, it will perform a shallow equality check on its stored reference to the root state objet, and the current root stte object passed to it from the store. If the check passed, the root state object has not been updated, and so there is no need to nre-render the component, or even call &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the check fails, however, the root state object has been updated, and so &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; to see if the props for the wrapped component have been updated. It does this by performing a shallow equality check on each value within the object individually, and will only trigger a re-render if one of those checks fails. In the example below, if &lt;code class=&quot;highlighter-rouge&quot;&gt;state.todos&lt;/code&gt; and the value returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;getVisibleTodos()&lt;/code&gt; do not change on succesive calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt;, then the component will not re-render.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prop value&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;visibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// selector&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TodoApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Conversely, in this next example (below), the component will always re-render, as the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; is always a new object, regardless of whether or not its values change:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// AVOID - will always cause a re-render&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// todos always references a newly-created object&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;visibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TodoApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the shallow equality check fails between the new values returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; and the previous values that React-Redux kept a reference to , then a re-rendering of the component will be triggered.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/&quot;&gt;Practical Redux, Part 6: Connected Lists, Forms, and Performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f#.sb708slq6&quot;&gt;React.js Pure Render Performance Anti-Pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://somebody32.github.io/high-performance-redux/&quot;&gt;High Performance Redux Apps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1816&quot;&gt;#1816: Component connected to state with &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/300&quot;&gt;#300: Potential connect() optimization&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1638-why-will-shallow-equality-checking-not-work-with-mutable-obejcts&quot;&gt;1.6.3.8 Why will shallow equality checking not work with mutable obejcts?&lt;/h5&gt;

&lt;p&gt;Shallow equality checking cannot be used to detect if a function mutates an object passed into it if that object is mutable. This is because two variables that reference the same object will always be equal, regardless of whether the object’s values changes or not, as they’re both referencing the same object. Thus, the following will always return true:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutateObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'newValue'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'originalValue'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutateObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnVal&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;gt; true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The shallow check of &lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;returnValue&lt;/code&gt; simply checks whether both variables reference the same object, which they do. &lt;code class=&quot;highlighter-rouge&quot;&gt;mutateObj()&lt;/code&gt; may return a mutated version of &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;, but it;s still the same object as that passed int. The fact that its values have been changed within &lt;code class=&quot;highlighter-rouge&quot;&gt;mutateObj&lt;/code&gt; matters not at all to a shallow check.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/&quot;&gt;Pros and Cons of using immutability with React.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1639-does-shallow-equality-checking-with-a-mutable-object-cause-problems-with-redux&quot;&gt;1.6.3.9 Does shallow equality checking with a mutable object cause problems with Redux?&lt;/h5&gt;

&lt;p&gt;Shallow equality checking with a mutable object will not cause probelms with Redux, but &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#shallow-checking-problems-with-react-redux&quot;&gt;it will cause problems with libraries that depend on the store, such as React-Redux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, it the state slice passed to a reducer by &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; is a mutable object, the reducer can modify it directly and return it.&lt;/p&gt;

&lt;p&gt;If it does, the shallow equality check that &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; eprfroms will always pass, as the values state slice returned by the reducer may have been mutated, but the object itself has not - it’s still the same object that was passed to the reducer.&lt;/p&gt;

&lt;p&gt;Accordingly, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; willnot set its &lt;code class=&quot;highlighter-rouge&quot;&gt;hasChanged&lt;/code&gt; flag, even though the state has changed. If none of the other reducers return anew, updated state slice, the &lt;code class=&quot;highlighter-rouge&quot;&gt;hasChanged&lt;/code&gt; flag will remain set to false, causing &lt;code class=&quot;highlighter-rouge&quot;&gt;combienReducers&lt;/code&gt; to return the existing root state object.&lt;/p&gt;

&lt;p&gt;The store will still be updated with the new values for the root state, but because the root state object itself is still the same object, libraries that bind to Redux, such as React-Redux, will not be aware of the state’s mutation, and so will not trigger a wrapped component’s re-rendering.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot;&gt;Recipes: Immutable Update Patterns&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments&quot;&gt;Troubleshooting: Never mutate reducer arguments&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;16310-why-does-a-reducer-mutating-the-state-prevent-react-redux-from-re-rendering-a-wrapped-component&quot;&gt;1.6.3.10 Why does a reducer mutating the state prevent React-Redux from re-rendering a wrapped component?&lt;/h5&gt;

&lt;p&gt;If a Redux reducer directly mutates, and returns, the state object passed into it, the values of the root state object will change, but the object itself will not.&lt;/p&gt;

&lt;p&gt;Because React-Redux performs a shallow check on the root state object to determine if its wrapped componenets need re-rendering or not, it will not be able to detect the state mutation, and so will not trigger a re-rendering.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/blob/f4d55840a14601c3a5bdc0c3d741fc5753e87f66/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux&quot;&gt;Troubleshooting: My views aren’t updating when something changes outside of Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;16311-why-does-a-selector-mutating-and-returning-a-persistent-object-to-mapstatetoprops-prevent-react-redux-from-re-rendering-a-wrapped-component&quot;&gt;1.6.3.11 Why does a selector mutating and returning a persistent object to &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; prevent React-Redux from re-rendering a wrapped component?&lt;/h5&gt;

&lt;p&gt;If one of the values of the props object returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; is an object that persistes across calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; (such as, potentially, the root state object), yet is directly mutated and returned by a selector function, React-Redux will not be able to detect the mutation, and so will not trigger a re-render of the wrapped component.&lt;/p&gt;

&lt;p&gt;As we’ve seen, the values in the mutable object returned by the selector function may have changed, but the object itself has not, and shallow equality checking nonly compares the objects themselves, not their values.&lt;/p&gt;

&lt;p&gt;For example, the following &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; funciton will never trigger a re-render:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// State object held in the Redux store&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;accessCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'keith'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Selector function&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessCount&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mutate the state object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mapStateToProps&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The object returned from getUser() is always&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the same object, so this wrapped&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// component will never re-render, even though it's been&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// mutated&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;userRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userRecord&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;gt; true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that, conversely, if an immutable object is used, the &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#immutability-issues-with-react-redux&quot;&gt;component may re-render when it should not&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/&quot;&gt;Practical Redux, Part 6: Connected Lists, Forms, and Performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1948&quot;&gt;#1948: Is getMappedItems an anti-pattern in mapStateToProps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;16312-how-does-immutability-enable-a-shallow-check-to-detect-object-mutations&quot;&gt;1.6.3.12 How does immutability enable a shallow check to detect object mutations?&lt;/h5&gt;

&lt;p&gt;If an object is immutable, any changes that need to be made to it within a function must be made to a copy of the object. This mutated copy is a separate object from that passed into the function, and so when it is returned, a shallow check will identify it as being a different object from that passed int and so will fail.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/&quot;&gt;Pros and Cons using immutability with React.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;164-how-can-immutability-in-your-reducers-cause-components-to-render-unecessarily&quot;&gt;1.6.4 How can immutability in your reducers cause components to render unecessarily?&lt;/h4&gt;

&lt;p&gt;You cannot mutate an immutable object: insead, you must mutate a copy of it, leaving the original intact.&lt;/p&gt;

&lt;p&gt;That’s perfectly OK when you mutate the copy, but in the context of a reducer, if you return a copy hasn’t been mutated, Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; function will still think that the state needs to be updated, as you’re returning an entirely different object formt he state slice object that was passed in.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will then return this new root state object to the store. The new object will have the same values as the current root state object, but because it’s a different object, it will cause the store to be udpated, which will ultimately cause all connected components to be re-rendered unnecessarily.&lt;/p&gt;

&lt;p&gt;To prevent this from happening, you must always return the state slice object that’s passed into a reducer if the reducer does not mutate the state.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f#.5hmnwygsy&quot;&gt;React.js pure render performance anti-pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.toptal.com/react/react-redux-and-immutablejs&quot;&gt;Building Efficient UI with React and Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;165-how-can-immutability-in-mapstatetoprops-cause-components-to-render-unecessarily&quot;&gt;1.6.5 How can immutability in &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; cause components to render unecessarily?&lt;/h4&gt;

&lt;p&gt;Certain immutable operations, such as an Array filter, will always return a new object, even if the values themselves have not changed.&lt;/p&gt;

&lt;p&gt;If such an operation is used as a selector function in &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;, the shallow equality check that React-Redux performs on each value in the props object that’s returned will always fail, as the selector is returning a new object each time.&lt;/p&gt;

&lt;p&gt;As such, even though the values of that new object have not changed, the wrapperd component will always be re-rendered.&lt;/p&gt;

&lt;p&gt;For example, the following will always trigger a re-render:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// A JavaScript array's 'filter' method treats the array as immutable,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and returns a filtered copy of the array.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisibleTodos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'do todo 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'do todo 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// getVisibleTodos() always returns a new array, and so the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 'visibleToDos' prop will always reference a different array,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// causing the wrapped component to re-render, even if the array's&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// values haven't changed&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;visibleToDos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisibleTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Call mapStateToProps(state) again with exactly the same arguments&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibleToDos&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;gt; { &quot;completed&quot;: false, &quot;text&quot;: &quot;do todo 1&quot; }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibleToDos&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;gt; { &quot;completed&quot;: false, &quot;text&quot;: &quot;do todo 1&quot; }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibleToDos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibleToDos&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;gt; false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that, conversely, if the values in your props object refer to mutable objects, &lt;a href=&quot;http://redux.js.org/docs/faq/ImmutableData.html#shallow-checking-stops-component-re-rendering&quot;&gt;your component may not render when it should&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f#.b8bpx1ncj&quot;&gt;React.js pure render performance anti-pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.toptal.com/react/react-redux-and-immutablejs&quot;&gt;Building Efficient UI with React and Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@AlexFaunt/immutablejs-worth-the-price-66391b8742d4#.a3alci2g8&quot;&gt;ImmutableJS: worth the price?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;166-what-approaches-are-there-for-handling-data-immutably-do-i-have-to-use-immutablejs&quot;&gt;1.6.6 What approaches are there for handling data immutably? Do I have to use Immutable.JS?&lt;/h4&gt;

&lt;p&gt;You do not need to use Immutable.JS with Redux. Plain JavaScript, if written correctly, is perfectly capable of providing mimmutability without having t ouse an immutable-focused library.&lt;/p&gt;

&lt;p&gt;However, guaranteeing immutability with JavaScript is difficult, and it can be easy to mutate an object accidentally, causing bugs in your appthat are extremely difficult to locate. For this reason, using an immutable update utility library such as Immutable.JS can significantly improve the reliability of your app, and make your app’s development much easier.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1422&quot;&gt;#1185: Question: Should I use immutable data structures?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/intro-to-immutable-js/&quot;&gt;Introduction to Immutable.js and Functional Programming Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1661-using-immutalbejs-with-redux&quot;&gt;1.6.6.1 Using Immutalbe.JS with Redux&lt;/h5&gt;

&lt;h5 id=&quot;1662-why-should-i-use-an-immutable-focused-library-such-as-immutablejs&quot;&gt;1.6.6.2 Why should I use an immutable-focused library such as Immutable.JS?&lt;/h5&gt;

&lt;h5 id=&quot;1663-why-should-i-choose-immutablejs-as-an-immutable-library&quot;&gt;1.6.6.3 Why should I choose Immutable.JS as an immutable library?&lt;/h5&gt;

&lt;h5 id=&quot;1664-what-are-the-issues-with-using-immutablejs&quot;&gt;1.6.6.4 What are the issues with using Immutable.JS?&lt;/h5&gt;

&lt;h5 id=&quot;1665-is-immutablejs-worth-the-effort&quot;&gt;1.6.6.5 Is Immutable.JS worth the effort?&lt;/h5&gt;

&lt;h5 id=&quot;1666-what-are-some-opinionated-best-practices-for-using-immutablejs-with-redux&quot;&gt;1.6.6.6 What are some opinionated Best Practices for using Immutable.JS with Redux?&lt;/h5&gt;

&lt;h4 id=&quot;167-what-are-the-issues-with-using-javascript-for-immutable-operations&quot;&gt;1.6.7 What are the issues with using JavaScript for immutable operations?&lt;/h4&gt;

&lt;p&gt;JavaScript was never designed to provide guaranteed immutable operations. Accordingly, there are several issues you need to be aware of it you choose to use it for your immutable operations in your Redux app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accidental Object Mutation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With JavaScript, you can accidentally mutate an object (such as the Redux state tree) quite easily without realising it. For example, updating deeply nested properties, creating a new reference to an object instead of a new object, or performing a shallow copy rather than a deep copy, can all lead to inadvertent object mutation, and can trip up even the most exeprienced JavaScript coder.&lt;/p&gt;

&lt;p&gt;To avoid these issues, ensure you follow the recommended &lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot;&gt;immutable update patterns for ES6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verbose Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Updating complex nested state trees can lead to verbose code that is tedious to write and difficult to debug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Operating on JavaScript objects and arrays in an immutable way can be slow, particularly as your state tree grows larger.&lt;/p&gt;

&lt;p&gt;Remember, to change an immutable object, you must mutate a copy of it, and copying large objects can be slow as every property must be copied.&lt;/p&gt;

&lt;p&gt;In contrast, immutable libraries such as Immutable.JS can employ sophisticated optimization techniques such as &lt;a href=&quot;http://www.slideshare.net/mohitthatte/a-deep-dive-into-clojures-data-structures-euroclojure-2015&quot;&gt;structural sharing&lt;/a&gt;, which effectively returns a new object tha treuses much of the existing object being copied from.&lt;/p&gt;

&lt;p&gt;For copying very large objects, &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;plain JavaScript can be over 100 times slower&lt;/a&gt; than an optimized immutable library.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot;&gt;Immutable Update Patterns for ES6&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.a2jimoiaf&quot;&gt;Immutable.js, persistent data structures and structural sharing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/mohitthatte/a-deep-dive-into-clojures-data-structures-euroclojure-2015&quot;&gt;A deep dive into Clojure’s data structures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/intro-to-immutable-js/&quot;&gt;Introduction to Immutable.js and Functional Programming Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://t4d.io/javascript-and-immutability/&quot;&gt;JavaScript and Immutability&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/&quot;&gt;Immutable Javascript using ES6 and beyond&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/&quot;&gt;Pros and Cons of using immutability with Reat.js - React Kung Fu&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;17-code-structure&quot;&gt;1.7 Code Structure&lt;/h3&gt;

&lt;h4 id=&quot;171-what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go&quot;&gt;1.7.1 What should my file structure look like? How should I group my action creators and reducers in my project? Where should my selectors go?&lt;/h4&gt;

&lt;p&gt;Since Redux is just a data store library, it has no direct opinion on how your project should be structured. However, there are a few common patterns that most Redux developers tend to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rails-style&lt;/strong&gt;: separate foleders for “actions”, “constans”, “reducers”, “containers”, and “componenets”;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain-style&lt;/strong&gt;: separate folders per feature or domain, possibly with sub-folders per file type;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ducks&lt;/strong&gt;: similar to domain style, but explictly tying together actions and reducers, often by defining them in the same file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s generally suggested that selectors are defined alongside reducers and exported, and then reused elsewhere (such as in &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;) funcitons, in async action creators, or sagas) to colocate all the code that knows about the actual shape of the state tree in the reducer files.&lt;/p&gt;

&lt;p&gt;While it ultimately doesn’t matter how you lay out your code on disk, it’s important to remember that actions and reducers shouldn’t considered in isolation. It’s entirely possible (and encouraged) for a reducer defined in one folder to respond to an action defined in another folder.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/Actions.html#actions-reducer-mappings&quot;&gt;FAQ: Actions - “1:1 mapping between reduers and actions?”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/&quot;&gt;How to Scale React Applications&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/168648012&quot;&gt;Scaling React Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e&quot;&gt;Redux Best Practices&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://jaysoo.ca/2016/02/28/organizing-redux-application/&quot;&gt;Rules For Structuring (Redux) Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://marmelab.com/blog/2015/12/17/react-directory-structure.html&quot;&gt;A Better File Structure for React/Redux Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://engineering.kapost.com/2016/01/organizing-large-react-applications/&quot;&gt;Organizing Large React Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@msandin/strategies-for-organizing-code-2c9d690b6f33&quot;&gt;Four Strategies for Organizing Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://randycoulman.com/blog/2016/09/13/encapsulating-the-redux-state-tree/&quot;&gt;Encapsulating the Redux State Tree&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://randycoulman.com/blog/2016/09/20/redux-reducer-selector-asymmetry/&quot;&gt;Redux Reducer/Selector Asymmetry&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://randycoulman.com/blog/2016/09/27/modular-reducers-and-selectors/&quot;&gt;Modular Reducers and Selectors&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@mmazzarolo/my-journey-toward-a-maintainable-project-structure-for-react-redux-b05dfd999b5&quot;&gt;My journey towards a maintainable project structure for React/Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/react-redux-architecture.md#project-file-structure&quot;&gt;React/Redux Links: Architecture - Project File Structure&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/839&quot;&gt;#839: Emphasize defining selectors alongside reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/943&quot;&gt;#943: Reducer querying&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/mxstbr/react-boilerplate/issues/27&quot;&gt;React Boilerplate #27: Application Structure&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32634320/how-to-structure-redux-components-containers/32921576&quot;&gt;Stack Overflow: How to structure Redux components/containers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/783428282666614784&quot;&gt;Twitter: There is no ultimate file structure for Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;172-how-should-i-split-my-logic-between-reducers-and-action-creators-where-should-my-business-logic-go&quot;&gt;1.7.2 How should I split my logic between reducers and action creators? Where should my “business logic” go?&lt;/h4&gt;

&lt;p&gt;There’s no single clear answer to exactly what pieces of logic should go in a reducer or an action creator. Some developers prefer to have “fat” action creators, with “thin” reducers that simply take the data in an action and blindly merge it into the corresponding state. Others try to emphasize keeping actions as small as possible, and minimize the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; in an action creator. (For purposes of this question, other async approaches such as sagas and observables fall in the “action creator” category.)&lt;/p&gt;

&lt;p&gt;There are some potential benefits from putting more logic into your reducers. It’s likely that the action types would be more semantic and more meaningful (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;USER_UPDATED&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;SET_STATE&lt;/code&gt;). In addition, having more logic in reducers means that more functionality will be affected by time travel debugging.&lt;/p&gt;

&lt;p&gt;This comment sums up the dichotomy nicely:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now, the probelm is what to put in the action creator and what in the reducer, the choice between fat and thin action objects. If you put all the logic in the action creator, you end up with fat action objects that basically declare the updates to the state. Reducers become pure, dumb, add-this, remove that, update these functions. They will be easy to compose. But not much of your business logic will be there. If you put more logic in the reducer, you end up with nice, thin action object, most of your data logic in one place, but your reducers are harder to compose since you might need info from other branches. You end up with large reducers or reducers that take additional arguments from higher up in state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Find the balance between these two extremes, and you will master Redux.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@jeffbski/where-do-i-put-my-business-logic-in-a-react-redux-application-9253ef91ce1&quot;&gt;Where do I put my business logic in a React/Redux application?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/&quot;&gt;How to Scale React Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/#thick-and-thin-reducers&quot;&gt;The Tao of Redux, Part 2- practice and Philosophy. Thick and thin reducers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/384#issuecomment-127393209&quot;&gt;How putting too much logic in action creators could affect debugging&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/384#issuecomment-127393209&quot;&gt;#384: The more that’s in a reducer, the more you can replay via time travel&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1165&quot;&gt;#1165: Where to put business logic/ validation?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1171&quot;&gt;#1171: Recommendations for best practices regarding action-creators, reducers, and selectors&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35667249/accessing-redux-state-in-an-action-creator/35674575&quot;&gt;Stack Overflow: Accessing Redux state in an action creator&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;173-why-should-i-use-action-creators&quot;&gt;1.7.3 Why should I use action creators?&lt;/h4&gt;

&lt;p&gt;Redux does not require action creators. You are free to create actions in any way that is best for you, including simply passing an object literal to &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;. Action creators emerged from the &lt;a href=&quot;https://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html#actions-and-actioncreators&quot;&gt;Flux architecture&lt;/a&gt; and have been adopted by the Redux community because they offer several benefits.&lt;/p&gt;

&lt;p&gt;Action creators are more maintainable. Updates to an action can be made in one place and applied everywhere. All instances of an action are guaranteed to have the same shape and the same default values.&lt;/p&gt;

&lt;p&gt;Action creators are testable. The correctness of an inline action must be verified mannually. Like any function, tests for an action creator can be written once and run automatically. Action creators are easier to document. The action creator’s parameters enumerate the actio’s dependencies. And centralization of the action definition provides a convenient place for documentation comments. When actions are written inline, this information is harder to capture and communicate.&lt;/p&gt;

&lt;p&gt;Action creators are a more powerful abstraction. Creating an action often involves transforming data or making AJAX requests. Action creators provide a unifrom interface to this varied logic. This abstraction frees a component to dispatch an action without being complicated by the dtails of that action’s creation.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/&quot;&gt;Idiomatic Redux: Why use action creators&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/54k8js/redbox_redux_action_creation_made_simple/d8493z1/?context=4&quot;&gt;Reddit: Redbox - Reux action creation made simple&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;18-peformance&quot;&gt;1.8 Peformance&lt;/h3&gt;

&lt;h4 id=&quot;181-how-well-does-redux-scale-in-terms-of-performance-and-architecture&quot;&gt;1.8.1 How well does Redux “scale” in terms of performance and architecture?&lt;/h4&gt;

&lt;p&gt;While there’s no single definitive answer to this, most of the time this should not be a concern in either case.&lt;/p&gt;

&lt;p&gt;The work done by Redux generally falls into a few areas: processing actions in a middleware and reducers (including object duplication for immutable updates), notifying subscribers after actions are dispatched, and updating UI components based on the state changes. While it’s certainly possible for each of these to become a performance concern in sufficiently complex situations, there’s nothing inherently slow or inefficient about how Redux is implemented. In fact, React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows noticeable improvements over earlier versions.&lt;/p&gt;

&lt;p&gt;Redux may not be as efficient out of the box when compared to other libraries. For amximum rendering performance in a React application, state should be stored in a normalized shape, many individual components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items (allowing the list items to look up their own data by ID). This minimizes the overall amount of rendering to be done. Use of memoized selector functions is also an important performance consideration. As for architecture, anecdotal evidence is that Redux works well for varying project and team sizes. Redux is currently used by hundreds of companies and thousands of developers, with several hundred thousand monthly installations from NPM. One developer reported:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;for scale, we have ~500 action types, ~400 reducer cases, ~150 components, 5 middlewares, ~200 actions, ~2300 tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/NormalizingStateShape.html&quot;&gt;Recipes: Structring Reducers - Normalizing State Shape&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/&quot;&gt;How to Scale React Applications&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/168648012&quot;&gt;Scaling React Applications&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://somebody32.github.io/high-performance-redux/&quot;&gt;High-Performance Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.rangle.io/react-and-redux-performance-with-reselect/&quot;&gt;Improving React and Redux Perf with Reselect&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/310&quot;&gt;#310: Who uses Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1751&quot;&gt;#1751: Performance issues with large collections&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/269&quot;&gt;React Redux #269: Connect could be used with a custom subscribe method&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/407&quot;&gt;React Redux #407: Rewrite connect to offer an advanced API&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/pull/416&quot;&gt;React Redux #416: Rewrite connect for better performance and extensibility&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/mweststrate/redux-todomvc/pull/1&quot;&gt;Redux vs MobX TodoMVC Benchmark: #1&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/47m9h5/whats_the_best_place_to_keep_the_initial_state/&quot;&gt;Reddit: What’s the best place to keep the initial state?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/48k852/help_designing_redux_state_for_a_single_page/&quot;&gt;Reddit: Help designing Redux state for a single page app&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/41wdqn/redux_performance_issues_with_a_large_state_object/&quot;&gt;Reddit: Redux performance issues with a large state object?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/javascript/comments/49box8/reactredux_for_ultra_large_scale_apps/&quot;&gt;Reddit: React/Redux for Ultra Large Scale apps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/NickPresta/status/684058236828266496&quot;&gt;Twitter: Redux scaling&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/720219615041859584&quot;&gt;Twitter: Redux vs Mob X benchmark graph - Redux state shape matters&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/37264415/how-to-optimize-small-updates-to-props-of-nested-component-in-react-redux&quot;&gt;Stack Overflow: How to optimize small updates to props of nested components?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/markerikson/53735e4eb151bc228d6685eab00f5f85&quot;&gt;Chat log: React/Redux perf - updating a 10K -item Todo list&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/markerikson/6056565dd65d1232784bf42b65f8b2ad&quot;&gt;Chat log: React/Redux perf - single connection vs many connections&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;182-wont-calling-all-my-reducers-for-each-action-be-slow&quot;&gt;1.8.2 Won’t calling “all my reducers” for each action be slow?&lt;/h4&gt;

&lt;p&gt;It’s important to note that a Redux store really only has a single reducer function. The store passes the current state and dispatched action to that one reducer funciton, and lets the reducer handle things appropriately.&lt;/p&gt;

&lt;p&gt;Obviously, trying to handle every possible action in a single funciton does not scale well, simply in terms of function size and readability, so it makes sense to split the actual work into spearate functions that can be called by the top-level reducer. In particular, the common suggested pattern is to have a separate sub-reducer function that is responsible for managing updates to a particular slice of state at a specific key. The &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers()&lt;/code&gt; that comes with Redux is one of the many possible ways to achieve this. It’s also highly suggested to keep your store state as flat and as normalized as possible. Ultimately, though, you are in charge of organizing your reducer logic any way you want.&lt;/p&gt;

&lt;p&gt;However, even if you happen to have many different reducer functions composed together, and even with deeply nested state, reducer speed is unlikely to be a problem. JavaScript engines are capable of running a very large number of function calls per second, and most of your reducers are probably just using a &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement and returning the existing state by default in response to most actions.&lt;/p&gt;

&lt;p&gt;If you actuallly are concerned about reducer performance, you can use a utility such as &lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;redux-ignore&lt;/a&gt; or &lt;a href=&quot;https://github.com/chrisdavies/reduxr-scoped-reducer&quot;&gt;redux-scoped-reducer&lt;/a&gt; to ensure that only certain reducers listen to specific actions. You can also use &lt;a href=&quot;https://github.com/michaelcontento/redux-log-slow-reducers&quot;&gt;redux-log-slow-reducers&lt;/a&gt; to do some performance benchmarking.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/912&quot;&gt;#912: Proposal: action filter utility&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1303&quot;&gt;#1303: Redux Performance with Large Store and Frequent Updates&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35667775/state-in-redux-react-app-has-a-property-with-the-name-of-the-reducer/35674297&quot;&gt;#Stack OVerflow: State in Redux app has the name of the reducer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34494866/how-does-redux-deals-with-deeply-nested-models/34495397&quot;&gt;Stack Overflow: How does Redux deal with deeply nested models&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;183-do-i-have-to-deep-clone-my-state-in-a-reducer-isnt-copying-my-state-going-to-be-slow&quot;&gt;1.8.3 Do I have to deep-clone my state in a reducer? Isn’t copying my state going to be slow?&lt;/h4&gt;

&lt;p&gt;Immutably updating state generally means making shallow copies, not deep copies. Shallow copies are much faster than deep copies, because fewer objects and fields have to be copied, and it effectively comes down to moving some pointers around.&lt;/p&gt;

&lt;p&gt;However, you do need to create a copied and updated object for each level of nesting that is affected. Alghtough that shouldn’t be particularly expensive, it’s another good reason why you should keep your state normalized and shallow if possible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Common Redux misconception: you need to deeply clone the state. Reality: if something inside doesn’t change, keep its reference the same!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/PrerequisiteConcepts.html&quot;&gt;Recipes: Structuring Reducers - Prerequisite Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot;&gt;Recipes: Structuring Reducers - Immutable Update Patterns&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/454&quot;&gt;#454: Handling big states in reducer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/758&quot;&gt;#758: Why can’t state be mutated&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/994&quot;&gt;#994: How to cut the boilerplate when updating nested entities?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/688087202312491008&quot;&gt;Twitter: common misconception - deep cloning&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.zsoltnagy.eu/cloning-objects-in-javascript/&quot;&gt;Cloning Objects in JavaScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;184-how-can-i-reducer-the-number-of-store-update-events&quot;&gt;1.8.4 How can I reducer the number of store update events?&lt;/h4&gt;

&lt;p&gt;Redux notifies subscribers after each successfully dispatched action (i.e. an action reached the store and was ahndled by reducers). In some cases, it may be useful to cut down on the number of times subscribers are called, particularly if an action creator dispatches multiple distinct actions in a row.&lt;/p&gt;

&lt;p&gt;If you use React, note that you can improve perfromance of multiple synchronous dispatches by wrapping them in &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.unstable_batchedUpdates()&lt;/code&gt;, but his API is experimental and may be removed in any React release so don’t rely on it too heavily. Take a look at &lt;a href=&quot;https://github.com/tshelburne/redux-batched-actions&quot;&gt;redux-batched-actions&lt;/a&gt;(a higher order reducer that lets you dispatch several actions as if it was one and “unpack” them in the reducer), &lt;a href=&quot;https://github.com/tappleby/redux-batched-subscribe&quot;&gt;redux-batched-subscribe&lt;/a&gt;(a store enhancer that lets you debounce subscriber calls for multiple dispatches), or &lt;a href=&quot;https://github.com/manaflair/redux-batch&quot;&gt;redux-batch&lt;/a&gt;(a store enhancer that handles dispatching an array of actions with a single subscriber notification).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/125&quot;&gt;#125: Strategy for avoiding cascading renders&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/542&quot;&gt;#542: Idea: batching actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/911&quot;&gt;#911: Batching actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/pull/1813&quot;&gt;#1813: Use a loop to support dispatching arrays&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/263&quot;&gt;React Redux #263: Huge performance issue when dispatching hundreds of actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/store.md#store-change-subscriptions&quot;&gt;Redux Addons Catalog: Store - Change Subscriptions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;185-will-having-one-state-tree-cause-memory-problems-will-dispatching-many-actions-take-up-memory&quot;&gt;1.8.5 Will having “one state tree” cause memory problems? Will dispatching many actions take up memory?&lt;/h4&gt;

&lt;p&gt;First, in terms of raw memory usage, Redux is no different than any other JavaScript library. The only difference is that all the various object references are nested together into one tree, instead of maybe saved in various independent model instances such as in Backbone. Second, a typical Redux app would probably have somewhat less memory usage than an equivalent Backbone app because Redux encourages use of plain JavaScript objects and arrays rather than creating instances of Models and Collections. Finally, Redux only holds onto a single state tree reference at a time. Objects that are no longer referenced in that tree will be garbage collected, as usual.&lt;/p&gt;

&lt;p&gt;Redux does not store a history of actions itself. However, the Redux DevTools do store actions so they can be replayed, but those are generally only enabled during development, and not used in production.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html&quot;&gt;Docs: Async Actions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35627553/is-there-any-way-to-commit-the-state-in-redux-to-free-memory/35634004&quot;&gt;Stack Overflow: Is there any way to “commit” the state in Redux to free memory&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39943762/can-a-redux-store-lead-to-a-memory-leak/40549594#40549594&quot;&gt;Stack Overflow: Can a Redux store lead to a memory leak?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42489557/redux-and-all-the-application-state/42491766#42491766&quot;&gt;Stack Overflow: Redux and ALL the application state&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44956071/memory-usage-concern-with-controlled-components?noredirect=1&amp;amp;lq=1&quot;&gt;Stack Overflow: Memory Usage Concern with Controlled Components&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/47m9h5/whats_the_best_place_to_keep_the_initial_state/&quot;&gt;Reddit: What’s the bes place to keep initial state?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;19-design-decisions&quot;&gt;1.9 Design Decisions&lt;/h3&gt;

&lt;h4 id=&quot;191-why-doesnt-redux-pass-the-state-and-action-to-subscribers&quot;&gt;1.9.1 Why doesn’t Redux pass the state and action to subscribers?&lt;/h4&gt;

&lt;h4 id=&quot;192-why-doesnt-redux-support-using-classes-for-actions-and-reducers&quot;&gt;1.9.2 Why doesn’t Redux support using classes for actions and reducers?&lt;/h4&gt;

&lt;h4 id=&quot;193-why-does-the-middleware-signature-use-currying&quot;&gt;1.9.3 Why does the middleware signature use currying?&lt;/h4&gt;

&lt;h4 id=&quot;194-why-does-applymiddlware-use-a-closure-for-dispatch&quot;&gt;1.9.4 Why does applyMiddlware use a closure for dispatch?&lt;/h4&gt;

&lt;h4 id=&quot;195-why-doesnt-combinereducers-include-a-third-argument-with-the-entire-state-when-it-calls-each-reducer&quot;&gt;1.9.5 Why doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; include a third argument with the entire state when it calls each reducer?&lt;/h4&gt;

&lt;h4 id=&quot;196-why-doesnt-mapdispatchtoprops-allow-use-of-return-values-from-getstate-or-mapstatetoprops&quot;&gt;1.9.6 Why doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; allow use of return values from &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps()&lt;/code&gt;?&lt;/h4&gt;

&lt;h3 id=&quot;110-react-redux&quot;&gt;1.10 React Redux&lt;/h3&gt;

&lt;h4 id=&quot;1101-why-isnt-my-component-re-rendering-or-my-mapstatetoprops-running&quot;&gt;1.10.1 Why isn’t my component re-rendering, or my mapStateToProps running?&lt;/h4&gt;

&lt;p&gt;Accidentally mutating or modifying your state directly is by far the most common reason why components do not re-render after an action has been dispatched. Redux expects that your reducers will update their state “immutably”, which effectively means always making copies of your data, and applying your changes to the copies. If you return the same object from a reducer, Redux assumes that nothing has been change, even if you made changes to its contents. Similarly, React Redux tries to improve performance by doing shallow equality reference checks on incoming props in &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt;, and if all references are the same, returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to skip actually updating your original component.&lt;/p&gt;

&lt;p&gt;It’s important to remember that whenever you update a nested value, you must also return new copies of anything above it in your state tree. If you have &lt;code class=&quot;highlighter-rouge&quot;&gt;state.a.b.c.d&lt;/code&gt;, and you want to make an update to &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;, you would also need to return new copies of &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;. This &lt;a href=&quot;http://arqex.com/wp-content/uploads/2015/02/trees.png&quot;&gt;state tree mutation diagram&lt;/a&gt; demonstrates how a change deep in a tree requires changes all the way up.&lt;/p&gt;

&lt;p&gt;Note that “updating data immutably” does no mean that you must use &lt;code class=&quot;highlighter-rouge&quot;&gt;Immutable.js&lt;/code&gt;, although that is certainly an option. You can do immutable updates to plain JS objects and arrays using several different approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Copying objects using functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;_.extend()&lt;/code&gt;, and array functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;concat()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The array spread operator in ES6, and the similar object spread operator that is proposed for a future version of JavaScript.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Utility libraries that wrap immutable update logic into simpler functions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/Troubleshooting.html&quot;&gt;Toubleshooting&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/troubleshooting.md&quot;&gt;React Redux: Troubleshooting&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html&quot;&gt;Recipes: Using the Object Spread Operator&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/PrerequisiteConcepts.html&quot;&gt;Recipes: Structuring Reducers - Prerequisite Concepts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot;&gt;Recipes: Structuring Reducers - Immutable Update Patterns&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/&quot;&gt;Pros and Cons of Using Immutability with React&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/immutable-data.md&quot;&gt;React/Redux Links - Immutable Data&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1262&quot;&gt;#1262: Immutable data + bad performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/235&quot;&gt;React Redux #235: Predictate funciton for updating component&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/291&quot;&gt;React Redux #291: Should mapStateToProps be called every time an action is dispatched?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35592078/cleaner-shorter-way-to-update-nested-state-in-redux&quot;&gt;Stack Overflow: Cleaner/shorter way to update nested state in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/amcdnl/7d93c0c67a9a44fe5761#gistcomment-1706579&quot;&gt;Gist: state mutations&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1102-why-is-my-component-re-renderint-too-often&quot;&gt;1.10.2 Why is my component re-renderint too often?&lt;/h4&gt;

&lt;p&gt;React Redux implements several optimizations to ensure your actual component only re-renders when actually necessary. One of those is a shallow equality check on the combined props object generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; arguments passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt;. Unfortunately, shallow equality does no thelp in cases where new array or object instances are created each time &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; is called. A typical example might be mapping over an array of IDs and returning the matching object reference, such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though the array might contain the exact same object references each time, the array itself is a different references, so the shallow equality check fails and React Redux would re-render the wrapped component.&lt;/p&gt;

&lt;p&gt;The extra re-renders could be resolved by saving the array of objects into the state using a reducer, caching the mapped array using &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt;, or implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; in the component by hand and oing a more in-depth props comparison using a funciton such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_.isEqual&lt;/code&gt;. Be careful to not make your custom &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; more expensive than the rendering itself! Always use a profiler to check your assumptions about performance.&lt;/p&gt;

&lt;p&gt;For non-connected components, you may want to check what props are being passed in. A common issue is having a parent componenet re-bind a callback inside its render fucntion, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Child onClick={this.handleClick.bind(this)} /&amp;gt;&lt;/code&gt;. That creates a new funciton reference every time the parent re-renders. It’s generally good practice to only bind callbacks once in the parent component’s constructor.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/Performance.html#performance-scaling&quot;&gt;FAQ: Performance - Scaling&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://benchling.engineering/deep-dive-react-perf-debugging/&quot;&gt;A Deep Dive into React Perf Debugging&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f&quot;&gt;React.js pure render performance anti-pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.rangle.io/react-and-redux-performance-with-reselect/&quot;&gt;Improving React and Redux Performance with Reselect&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://randycoulman.com/blog/2016/09/13/encapsulating-the-redux-state-tree/&quot;&gt;Encapsulating the Redux State Tree&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/react-performance.md&quot;&gt;React/Redux Links: React/Redux Peformance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34782249/can-a-react-redux-app-really-scale-as-well-as-say-backbone-even-with-reselect&quot;&gt;Stack Overflow: Can a React Redux app scale as well as Backbone?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/devtools.md#component-update-monitoring&quot;&gt;Redux Addons Catalog: DevTools - Component Update Monitoring&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1103-how-can-i-speed-up-my-mapstatetoprops&quot;&gt;1.10.3 How can I speed up my &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;?&lt;/h4&gt;

&lt;p&gt;While React Redux does work to minimize the number of times that your &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; function is called, it’s still a good idea to ensure that your &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; runs quickly and also minimizes the amount of work it does. THe common recommended approach is to create memoized “selector” functions using &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt;. These selectors can be combined and composed together, adn selectors later in a pipeline will only run if their inputs have changed. This means you can create selectors that do things like filtering or sorting, and ensure that the real work only happens if needed.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/recipes/ComputingDerivedData.html&quot;&gt;Recipes: Computed Derived Data&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.rangle.io/react-and-redux-performance-with-reselect/&quot;&gt;Improving React and Redux Peformance with Reselect&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/815&quot;&gt;#815: Working with Data Structures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/reselect/issues/47&quot;&gt;Reselect #47: Memoizing Hierarchical Selectors&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1104-why-dont-i-have-thispropsdispatch-available-in-my-connected-component&quot;&gt;1.10.4 Why don’t I have &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.dispatch&lt;/code&gt; available in my connected component?&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; function takes two primary arugments, both optinal. The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;, is a function you provide to pull data from the store when it changes, and pass those values as props to your component. The second, &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchProps&lt;/code&gt;, is a funciton you provide to make use of the store’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function, usually by creating pre-bound versions of action creators that will automatically dispatch their actions as soon as they are called.&lt;/p&gt;

&lt;p&gt;If you don not provide your own &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; function when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;, React Redux will provide a default version, which simply returns the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function as a prop. That means that if you do provide your own function, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is not automatically provided. If you still want it available as a prop, you need to explicitly return it yourself in your &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;React Redux API: connect()&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/89&quot;&gt;React Redux #89: can I wrap multi actionCreators into one props with name&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/145&quot;&gt;React Redux #145: consider always passing down dipsatch regardless of what &lt;code class=&quot;highlighter-rouge&quot;&gt;mapDispatchToProps&lt;/code&gt; does&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/issues/255&quot;&gt;React Redux #255: &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.dispatch&lt;/code&gt; is undefined if using mapDispatchToProps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34458261/how-to-get-simple-dispatch-from-this-props-using-connect-w-redux/34458710]&quot;&gt;Stack Overflow: How to get simple dispatch from &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; using connect w/ Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1105-should-i-only-connect-my-top-component-or-can-i-connect-multiple-components-in-my-tree&quot;&gt;1.10.5 Should I only connect my top component, or can I connect multiple components in my tree?&lt;/h4&gt;

&lt;p&gt;Early Redux documentation advised that you should only have a few connected components near the top of your component tree. However, time and eexperience has shown that that generally requires a few components to know too much about the data requirements of all their descendatns, and forces them to pass down a confusing number of props.&lt;/p&gt;

&lt;p&gt;The current suggested best practice is to categorize your components as &lt;code class=&quot;highlighter-rouge&quot;&gt;presentational&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; components, and extract a connected container component whereever it makes sense:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Emphasizing “one container component at the top” in Redux examples was a mistake. Don’t take this as amaxim. Try to keep your presentation components separate. Create container components by connecting them when it’s convenient. Whenever you feel like you’re duplicating code in parent components to provide data for same kinds of children, time to extract a container. Generally as soon as you fell a parent knows too much about “personal” data or actions of its children, time to extarct a container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, benchmarks have shown that more connected components generally leads to better performance than fewer connected components. In general, try to find a balance between understandable data flow and areas of responsibility with your components.&lt;/p&gt;

&lt;p&gt;Further Information&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics/UsageWithReact.html&quot;&gt;Baiscs: Usage with React&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/faq/Performance.html#performance-scaling&quot;&gt;FAQ: Performance - Scaling&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;Presentational and Container Components&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://somebody32.github.io/high-performance-redux/&quot;&gt;High-Performance Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/react-redux-architecture.md#redux-architecture&quot;&gt;React/Redux Links: Architecture - Redux Architecture&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/react-performance.md#redux-performance&quot;&gt;React/Redux Links: Performance - Redux Performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov/status/668585589609005056&quot;&gt;Twitter: emphasizing “one container” was a mistake&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/419&quot;&gt;#419: Recommended usage of connect&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/756&quot;&gt;#756: Container vs component?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux/issues/1176&quot;&gt;#1176: Redux+React with only stateless components&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34992247/can-a-dumb-component-use-render-redux-container-component&quot;&gt;Stack Overflow: can a dumb component use a Redux container&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;111-miscellaneous&quot;&gt;1.11 Miscellaneous&lt;/h3&gt;

&lt;h4 id=&quot;1111-are-there-any-larger-real-redux-projects&quot;&gt;1.11.1 Are there any larger, “real” Redux projects?&lt;/h4&gt;

&lt;p&gt;Yes, lots of them! to name just a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/necolas/status/727538799966715904&quot;&gt;Twitter’s mobile stie&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Automattic/wp-calypso&quot;&gt;Wordpress’s new admin Page&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jlongster/debugger.html&quot;&gt;Firfox’s new debugger&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/mozilla/tofino&quot;&gt;Mozilla’s experimental browser testbed&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/zeit/hyperterm&quot;&gt;The HyperTerm terminal application&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many, many more! The Redux Addons Catalog has &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md&quot;&gt;a list of Redux-based applications and examples&lt;/a&gt; that points to a variety of actual applications, large and small.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/introduction/Examples.html&quot;&gt;Introduction: Example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/496db2/large_open_source_reactredux_projects/&quot;&gt;Reddit: Large open source react/redux projects?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10710240&quot;&gt;HN: Is there any huge web application built using Redux?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1112-how-can-i-implement-authentication-in-redux&quot;&gt;1.11.2 How can I implement authentication in Redux?&lt;/h4&gt;

&lt;p&gt;Authentication is essentail to any real application. When going about authentication you must keep in mind that nothing changes with how you should organize your appplication and you should implement authentication in the same way you would any other feature. It is relatively straightforward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create action constants for &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_SUCCESS, &lt;/code&gt;LOGIN_FAILURE`, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create action creators that take in credentials, a flag that signifies whether authentication succeeded, a token, or an error message as the payload.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an async action creator with Redux Thunk middlware or any middleware you see fit to fire network request to an API that returns a token if the credentials are valid. Then save the token in the local storage or show a response to the user if it failed. You can perform these side effects from the action creators  you wrote in the previous step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a reducer that returns the next state for each possible authentication case (&lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_SUCCESS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_FAILURE&lt;/code&gt;, etc).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/2016/01/04/secure-your-react-and-redux-app-with-jwt-authentication/&quot;&gt;Authentication with JWT by Auth0&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@MattiaManzati/tips-to-handle-authentication-in-redux-2-introducing-redux-saga-130d6872fbe7&quot;&gt;Tips to Handle Authentication in Redux&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/joshgeller/react-redux-jwt-auth-example&quot;&gt;react-redux-jwt-auth-example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/use-cases.md#authentication&quot;&gt;Redux Addons Catalog: Use Cases - Authentication&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-to-be-read&quot;&gt;2. To be read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://benchling.engineering/deep-dive-react-perf-debugging/&quot;&gt;A Deep Dive into React Perf Debugging&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/devtools.md#component-update-monitoring&quot;&gt;Redux Addons Catalog: DevTools - Component Update Monitoring&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#why-is-my-component-re-renderint-too-often&quot;&gt;1.10.2 Why is my component re-renderint too often?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-参考资料&quot;&gt;5 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tayiorbeii/egghead.io_redux_course_notes&quot;&gt;Note: Get Started with Redux&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/shunmian/4.1.1_redux-part-one&quot;&gt;React Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sat, 22 Oct 2016 00:00:00 +0800</pubDate>
				<link>/04%20web%20development/2016/10/22/Redux-Part-III_FAQ.html</link>
				<guid isPermaLink="true">/04%20web%20development/2016/10/22/Redux-Part-III_FAQ.html</guid>
			</item>
		
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>SHUNMIAN</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
			<item>
				<title>CircleCI</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-circle-ci&quot; id=&quot;markdown-toc-1-circle-ci&quot;&gt;1. Circle CI&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-what-is-circle-ci&quot; id=&quot;markdown-toc-11-what-is-circle-ci&quot;&gt;1.1 What is Circle CI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-how-to-integrate-circle-ci-to-your-repository&quot; id=&quot;markdown-toc-12-how-to-integrate-circle-ci-to-your-repository&quot;&gt;1.2 How to integrate Circle CI to your repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-circle-ci&quot;&gt;1. Circle CI&lt;/h2&gt;

&lt;h3 id=&quot;11-what-is-circle-ci&quot;&gt;1.1 What is Circle CI&lt;/h3&gt;

&lt;p class=&quot;img_middle_lg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-24 Continous Integartion/2018-05-16-CircleCI/What is CircleCI.png&quot; alt=&quot;Vim summary&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-how-to-integrate-circle-ci-to-your-repository&quot;&gt;1.2 How to integrate Circle CI to your repository&lt;/h3&gt;

&lt;p&gt;TBC.&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;《CircleCI Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Wed, 16 May 2018 00:00:00 +0800</pubDate>
				<link>/-24%20continous%20integration/2018/05/16/CircleCI.html</link>
				<guid isPermaLink="true">/-24%20continous%20integration/2018/05/16/CircleCI.html</guid>
			</item>
		
			<item>
				<title>Kubernetes介绍</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-docker-介绍&quot; id=&quot;markdown-toc-1-docker-介绍&quot;&gt;1. Docker 介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-docker-介绍&quot;&gt;1. Docker 介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/103&quot;&gt;《软件测试52讲》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;《Jest Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 10 May 2018 00:00:00 +0800</pubDate>
				<link>/-26%20container/2018/05/10/Kubernetes.html</link>
				<guid isPermaLink="true">/-26%20container/2018/05/10/Kubernetes.html</guid>
			</item>
		
			<item>
				<title>Docker介绍</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-docker-基础&quot; id=&quot;markdown-toc-1-docker-基础&quot;&gt;1. Docker 基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-白话容器技术基础&quot; id=&quot;markdown-toc-11-白话容器技术基础&quot;&gt;1.1 白话容器技术基础&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#110-docker和kubernetes的前世今生&quot; id=&quot;markdown-toc-110-docker和kubernetes的前世今生&quot;&gt;1.1.0 Docker和Kubernetes的前世今生&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-container&quot; id=&quot;markdown-toc-11-container&quot;&gt;1.1 Container&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-kubernetes集群的搭建与实践&quot; id=&quot;markdown-toc-12-kubernetes集群的搭建与实践&quot;&gt;1.2 Kubernetes集群的搭建与实践&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-容器编排与kubernetes核心特性剖析&quot; id=&quot;markdown-toc-13-容器编排与kubernetes核心特性剖析&quot;&gt;1.3 容器编排与Kubernetes核心特性剖析&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-kubernates开源社区与生态&quot; id=&quot;markdown-toc-14-kubernates开源社区与生态&quot;&gt;1.4 Kubernates开源社区与生态&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-summary&quot; id=&quot;markdown-toc-2-summary&quot;&gt;2 Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-docker-基础&quot;&gt;1. Docker 基础&lt;/h2&gt;

&lt;p&gt;从过去以物理机和虚拟机为主体的开发运维环境，向以容器为核心的基础设施的转变过程，并不是一次温和的改革，而是涵盖了对网络，存储，调度，操作系统，分布式原理等各个方面的容器化理解和改造。&lt;/p&gt;

&lt;p&gt;这就导致了很多初学者，对于容器技术栈表现出来的这些难题，要么知识储备不足，要么杂乱无章，无法形成体系。&lt;/p&gt;

&lt;p&gt;对于Linux内核，分布式系统，网络，存储等方方面面的积累，并不会在Docker或者Kubernetes的文档中交代清楚。可偏偏就是它们，才是真正掌握容器技术体系的精髓所在，是每一位技术从业者需要细心修炼的”内功”。&lt;/p&gt;

&lt;h3 id=&quot;11-白话容器技术基础&quot;&gt;1.1 白话容器技术基础&lt;/h3&gt;

&lt;h4 id=&quot;110-docker和kubernetes的前世今生&quot;&gt;1.1.0 Docker和Kubernetes的前世今生&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Paas: 应用托管，即在虚拟机上部署1个Cloud Foundry项目，然后在本地输入&lt;code&gt;cf push &quot;我的应用&quot;&lt;/code&gt;, 就能把本地应用部署到云上。Cloud Foundry，就是这样一种Paas(其他相近的还包括Heroku, Pivotal)。Paas的核心组件就是一套应用的打包和分发机制。Cloud Foundry 为每种主流编程语言都定义了一种打包格式，而&lt;code&gt;cf push&lt;/code&gt;的作用，基本上等同于用户把应用的可执行文件和启动脚本打进一个压缩包内，上传到云上Cloud Foundry的存储中。接着，Cloud Foundry会通过调度器选择一个可以运行这个应用的虚拟机，然后通知这个酒气上的Agent把应用压缩包下载下来启动。由于需要在一个虚拟机上启动很多个来自不同用户的应用，Cloud Foundry会调用操作系统的Cgroups和Namespace机制为每一个应用单独创建一个称作”沙盒”的隔离环境，然后在”沙盒”中启动这些应用进程。这样，就实现了把多个用户的应用互不干涉地在虚拟机里批量自动运行起来的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker项目，其实就是一个这样的沙盒，和Cloud Foundry并没有不同，除了&lt;strong&gt;镜像&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;CloudFoundry的打包配置，需要不断是错。它导致虽然 &lt;code&gt;cf push&lt;/code&gt;确实能一键部署，但是为了实现这个一键部署，用户为每个应用打包的工作可谓一波三折，费尽心机。&lt;strong&gt;而Docker镜像解决的，恰恰就是打包这个根本性的问题。&lt;/strong&gt;假设你的应用在本地运行，环境是CentOS 7.2 操作系统的所有文件和目录，那么只要用CentOS 7.2的ISO做一个2压缩包，再把你的应用可执行文件也压缩进去，那么无论在哪里解压这个压缩包，都可以得到与你本地测试时一样的环境。当然，你的应用也在里面！这就是Docker镜像最厉害的地方: 只要有这个压缩包在手，你就可以使用某种技术创建一个沙盒，在沙盒中解压这个压缩包，然后就可以运行你的程序了。&lt;/p&gt;

&lt;p&gt;有了Docker镜像这个利器，Paas里最核心的打包系统一下子就没了用武之地，最让用户抓狂的大包裹成页随之消失了。&lt;/p&gt;

&lt;p&gt;所以你只需要提供一个下载好的操作系统文件与目录，然后使用它制作一个压缩包即可，这个命令就是&lt;code&gt;$docker build 我的镜像&lt;/code&gt;; 一旦镜像制作完成，用户就可以让Docker创建一个沙盒来解压这个镜像，然后在沙盒中运行自己的应用，这个命令就是&lt;code&gt;$docker run 我的镜像&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以，Docker项目给PaaS世界带来的”降维打击”，其实是提供了一种非常便利的打包机制。这种机制直接打爆了应用运行所需要的整个操作系统，从而保证了本地环境和云端环境的高度一致，避免了用户通过“试错”来匹配两种不同运行环境之间差异的痛苦过程。&lt;/p&gt;

&lt;p&gt;但是Docker还缺一项Paas的功能，即大规模部署应用的职责。2014年Docker雄心勃勃的推出了原生容器集群管理项目Swarm, 不仅将这波”Caas(Container as a service)”推向了一个前所未有的高潮，更是寄托了整个Docker公司重新定义PaaS的宏伟愿望。&lt;/p&gt;

&lt;p&gt;无开源不生态，无生态不商业。&lt;/p&gt;

&lt;p&gt;Swarm项目完全使用Docker项目原本的容器管理API来完成&lt;strong&gt;集群管理&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;单机Docker项目: &lt;code&gt;docker run 我的项目&lt;/code&gt;；
多机Docker项目: &lt;code&gt;docker run -H 我的Swarm集群API地址 我的容器&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以在部署了Swarm的多机环境下，用户只需要使用原先的Docker指令创建一个容器，这个请求就会被Swarm拦截下来处理，然后通过具体的调度算法找到一个合适的Docker Daemon运行起来。而此时大红大紫到不差钱的Docker公司，开始及时得借助这波浪潮通过并购来完善自己的平台层能力。其中一个最成功的案例，莫过于对Fig项目的收购。要知道，Fig项目基本上只是靠两个人全职开发和维护的，可它却是当时Github上热度堪比Docker项目的明星。&lt;/p&gt;

&lt;p&gt;Fig项目之所以受欢迎，在于它在开发者面前第一次提出了&lt;strong&gt;容器编排(Container Orchestration)&lt;/strong&gt;的概念，即假如现在用户需要部署的是应用容器A,数据库容器B,负载均衡容器C,那么Fig就允许用户把A,B,C三个容器定义在一个配置文件中，并且可以指定它们之间的关联关系，比如容器A需要访问数据库容器B(参考&lt;a href=&quot;https://circleci.com/docs/2.0/workflows/&quot;&gt;CircleCI config.yml&lt;/a&gt;)。接下来，你只需要执行&lt;code&gt;fig up&lt;/code&gt;，Fig就会把这些容器的定义和配置交给Docker API按照访问逻辑一次创建，你的一系列容器就都启动了；而容器A与B之间的关联关系，也会交给Docker的Link功能通过写入hosts文件的方式进行配置。更重要的是，你还可以在Fig的配置文件里定义各种容器的副本个数等编排参数，再加上Swarm的集群管理能力，一个活脱脱的PaaS呼之欲出。Fig项目被收购后改名为&lt;strong&gt;Compose&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Docker的&lt;strong&gt;Compose&lt;/strong&gt;, &lt;strong&gt;Swarm&lt;/strong&gt;和&lt;strong&gt;Machine&lt;/strong&gt;三件套，在重新定义PaaS的方向上走出了最关键的一步。&lt;/p&gt;

&lt;p&gt;Docker公司最后选择对抗来自整个云计算产业的压力，是将开源项目与商业产品精密绑定，打造了一个极端封闭的技术生态。而这，违背了Docker项目与开发者保持亲密关系的初衷。相比之下，Kubernetes社区，正是以一种更加温和的方式，承接了Docker项目的未尽事业，即: 以开发者为核心，构建一个相对民主和开放的容器生态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;容器技术的兴起源于PaaS技术的普及；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker公司发布的Docker项目具有里程碑式的意义；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker项目通过“容器镜像”，解决了应用打包这个根本性难题；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;容器本身没有价值，有价值的是“容器编排”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;11-container&quot;&gt;1.1 Container&lt;/h3&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-26_Container/2018-05-01-Docker/virtual-machine-vs-docker.png&quot; alt=&quot;Virtual Machine vs Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;B比A更准确。用户运行在容器里的应用进程，跟宿主机上的其他进程一样，都由宿主机操作系统统一管理，只不过这些被隔离的进程拥有额外设置过的Namespace参数。而Docker项目在这里扮演的角色，更多的是旁路式的辅助和管理工作。在后续分享CRI和容器运行时的时候还会介绍到，像Docker这样的角色甚至可以去。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;宿主机和容器之间的兼容性。既然容器只是运行在宿主机上的一种特殊的进程，那么多个容器之间使用的就还是同一个宿主机的操作系统内核。尽管可以在容器里通过Mount Namesapce 单独挂载其他不同版本的操作系统文件，但这并不能改变共享宿主机内核的事实。这意味着Windoes宿主机不能运行Linux容器；低版本的Linux宿主机不能运行高版本的Linux容器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在Linux内核中，有很多资源和对象是不能被Namespace化的，最典型的例子就是时间。如果你的容器中的程序使用&lt;code&gt;settimeofday(2)&lt;/code&gt;系统调用修改了时间，整个宿主机的时间都会被随之修改。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界”:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cgroups(Linux Control Group)&lt;/strong&gt;，制造约束。限制一个进程组能够使用资源的上限，包括CPU，内存，磁盘，网络带宽等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt;，修改进程视图。将进程划分为一个独立空间，使其觉得自己是各自PID Namespace里的第1号进程，只能看到各自Mount Namespace里挂载的目录和文件，只能访问到各自Network Namespace里的网络设备，就仿佛运行在一个个”容器”里面，与世隔绝。容器是个&lt;strong&gt;单进程&lt;/strong&gt;模型，用户的应用进程实际上就是容器里PID=1的进程，也是其他后续创建的所有进程的父进程。这就意味着，在一个容器中，你没办法同时运行两个不同的应用，除非你能事先找到一个公共的PID=1的程序来充当两个不同应用的父进程，这也是为什么很多人都会用systemd或者supervisord这样的软件来代替应用本身作为容器的启动进程。在后面分享&lt;strong&gt;容器设计模式&lt;/strong&gt;时，还会推荐其他更好的解决办法。这是因为容器本身的设计，就是希望&lt;strong&gt;容器和应用能够同生命周期&lt;/strong&gt;，这个概念对后续的容器编排非常重要。否则，一旦出现类似于&lt;strong&gt;容器是正常运行的，但是里面的应用早已经挂了&lt;/strong&gt;的情况，编排系统处理起来就非常麻烦了。关于单进程举个例子，比如一个镜像里集成了jdk，netstate,ping等，虽然容器启动时里面是一个java进程，但是我可以进到容器里面执行各种命令，比如netstate等，那这些命令在容器的运行过程中是在运行吗？实在运行，但它们不受docker的控制，就像野孩子。所以单进程意思不是只能运行一个进程，而是只有一个进程是可控的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;12-kubernetes集群的搭建与实践&quot;&gt;1.2 Kubernetes集群的搭建与实践&lt;/h3&gt;

&lt;h3 id=&quot;13-容器编排与kubernetes核心特性剖析&quot;&gt;1.3 容器编排与Kubernetes核心特性剖析&lt;/h3&gt;

&lt;h3 id=&quot;14-kubernates开源社区与生态&quot;&gt;1.4 Kubernates开源社区与生态&lt;/h3&gt;

&lt;h2 id=&quot;2-summary&quot;&gt;2 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-26_Container/2018-05-01-Docker/kubernetes-skill-map.jpg&quot; alt=&quot;kubernetes Skill Map&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/103&quot;&gt;《软件测试52讲》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;《Jest Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 01 May 2018 00:00:00 +0800</pubDate>
				<link>/-26%20container/2018/05/01/Docker.html</link>
				<guid isPermaLink="true">/-26%20container/2018/05/01/Docker.html</guid>
			</item>
		
			<item>
				<title>Jest</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-test-框架原型&quot; id=&quot;markdown-toc-1-test-框架原型&quot;&gt;1. Test 框架原型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-基本数据结构测试&quot; id=&quot;markdown-toc-11-基本数据结构测试&quot;&gt;1.1 基本数据结构测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-异步测试&quot; id=&quot;markdown-toc-12-异步测试&quot;&gt;1.2 异步测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-group测试&quot; id=&quot;markdown-toc-13-group测试&quot;&gt;1.3 Group测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-mock测试&quot; id=&quot;markdown-toc-14-mock测试&quot;&gt;1.4 Mock测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-test-coveraage-report-intepration&quot; id=&quot;markdown-toc-15-test-coveraage-report-intepration&quot;&gt;1.5 Test Coveraage Report Intepration&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-test-框架原型&quot;&gt;1. Test 框架原型&lt;/h2&gt;

&lt;h3 id=&quot;11-基本数据结构测试&quot;&gt;1.1 基本数据结构测试&lt;/h3&gt;

&lt;h3 id=&quot;12-异步测试&quot;&gt;1.2 异步测试&lt;/h3&gt;

&lt;h3 id=&quot;13-group测试&quot;&gt;1.3 Group测试&lt;/h3&gt;

&lt;h3 id=&quot;14-mock测试&quot;&gt;1.4 Mock测试&lt;/h3&gt;

&lt;p&gt;TBC.&lt;/p&gt;

&lt;h3 id=&quot;15-test-coveraage-report-intepration&quot;&gt;1.5 Test Coveraage Report Intepration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Statements:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Branches:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functions:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lines:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;《Jest Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Mon, 16 Apr 2018 00:00:00 +0800</pubDate>
				<link>/-23%20test/2018/04/16/Jest.html</link>
				<guid isPermaLink="true">/-23%20test/2018/04/16/Jest.html</guid>
			</item>
		
			<item>
				<title>Test Foundation</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-test-基础&quot; id=&quot;markdown-toc-1-test-基础&quot;&gt;1. Test 基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-自动化测试&quot; id=&quot;markdown-toc-11-自动化测试&quot;&gt;1.1 自动化测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-test-coverage&quot; id=&quot;markdown-toc-12-test-coverage&quot;&gt;1.2 Test Coverage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-software-defect-report软件缺陷报告&quot; id=&quot;markdown-toc-13-software-defect-report软件缺陷报告&quot;&gt;1.3 Software Defect Report(软件缺陷报告)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-tdd&quot; id=&quot;markdown-toc-14-tdd&quot;&gt;1.4 TDD&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-gui自动化测试&quot; id=&quot;markdown-toc-2-gui自动化测试&quot;&gt;2. GUI自动化测试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-web&quot; id=&quot;markdown-toc-21-web&quot;&gt;2.1 Web&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#211-脚本与数据的解耦--page-object模型&quot; id=&quot;markdown-toc-211-脚本与数据的解耦--page-object模型&quot;&gt;2.1.1 脚本与数据的解耦 + Page Object模型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#212-gui自动化过程中的测试数据&quot; id=&quot;markdown-toc-212-gui自动化过程中的测试数据&quot;&gt;2.1.2 GUI自动化过程中的测试数据&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#213-page-code-gen--data-gen--headless&quot; id=&quot;markdown-toc-213-page-code-gen--data-gen--headless&quot;&gt;2.1.3 Page Code Gen + Data Gen + Headless&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#214-gui测试稳定性&quot; id=&quot;markdown-toc-214-gui测试稳定性&quot;&gt;2.1.4 GUI测试稳定性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#215-gui测试报告&quot; id=&quot;markdown-toc-215-gui测试报告&quot;&gt;2.1.5 GUI测试报告&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#216-gui自动化测试策略&quot; id=&quot;markdown-toc-216-gui自动化测试策略&quot;&gt;2.1.6 GUI自动化测试策略&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-移动端&quot; id=&quot;markdown-toc-22-移动端&quot;&gt;2.2 移动端&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#221-移动应用测试方法与思路&quot; id=&quot;markdown-toc-221-移动应用测试方法与思路&quot;&gt;2.2.1 移动应用测试方法与思路&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#222-appium&quot; id=&quot;markdown-toc-222-appium&quot;&gt;2.2.2 Appium&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-api自动化测试&quot; id=&quot;markdown-toc-3-api自动化测试&quot;&gt;3. API自动化测试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-常用api测试工具简介&quot; id=&quot;markdown-toc-31-常用api测试工具简介&quot;&gt;3.1 常用API测试工具简介&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-微服务模式下api测试&quot; id=&quot;markdown-toc-32-微服务模式下api测试&quot;&gt;3.2 微服务模式下API测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-代码级测试&quot; id=&quot;markdown-toc-4-代码级测试&quot;&gt;4. 代码级测试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-代码级测试的基本理念与方法&quot; id=&quot;markdown-toc-41-代码级测试的基本理念与方法&quot;&gt;4.1 代码级测试的基本理念与方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-静态方法&quot; id=&quot;markdown-toc-42-静态方法&quot;&gt;4.2 静态方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#43-动态方法&quot; id=&quot;markdown-toc-43-动态方法&quot;&gt;4.3 动态方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#431-unit-test&quot; id=&quot;markdown-toc-431-unit-test&quot;&gt;4.3.1 Unit Test&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#432-integrated-test&quot; id=&quot;markdown-toc-432-integrated-test&quot;&gt;4.3.2 Integrated Test&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-性能测试&quot; id=&quot;markdown-toc-5-性能测试&quot;&gt;5. 性能测试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-测试的基本方法与应用领域&quot; id=&quot;markdown-toc-51-测试的基本方法与应用领域&quot;&gt;5.1 测试的基本方法与应用领域&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-前端性能测试工具原理与行业常用工具简介&quot; id=&quot;markdown-toc-52-前端性能测试工具原理与行业常用工具简介&quot;&gt;5.2 前端性能测试工具原理与行业常用工具简介&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#53-后端性能测试工具原理与行业常用工具简介&quot; id=&quot;markdown-toc-53-后端性能测试工具原理与行业常用工具简介&quot;&gt;5.3 后端性能测试工具原理与行业常用工具简介&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-测试数据准备&quot; id=&quot;markdown-toc-6-测试数据准备&quot;&gt;6. 测试数据准备&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#61-build-pattern&quot; id=&quot;markdown-toc-61-build-pattern&quot;&gt;6.1 Build Pattern&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#62-统一测试数据平台&quot; id=&quot;markdown-toc-62-统一测试数据平台&quot;&gt;6.2 统一测试数据平台&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-测试基础架构&quot; id=&quot;markdown-toc-7-测试基础架构&quot;&gt;7. 测试基础架构&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#71-selenium-grid-for-gui&quot; id=&quot;markdown-toc-71-selenium-grid-for-gui&quot;&gt;7.1 Selenium Grid for GUI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#72-测试执行环境的架构设计&quot; id=&quot;markdown-toc-72-测试执行环境的架构设计&quot;&gt;7.2 测试执行环境的架构设计&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#73-大型全球化电商的测试基础架构设计&quot; id=&quot;markdown-toc-73-大型全球化电商的测试基础架构设计&quot;&gt;7.3 大型全球化电商的测试基础架构设计&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-测试新技术&quot; id=&quot;markdown-toc-8-测试新技术&quot;&gt;8. 测试新技术&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#81-探索式测试&quot; id=&quot;markdown-toc-81-探索式测试&quot;&gt;8.1 探索式测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#82-精准测试&quot; id=&quot;markdown-toc-82-精准测试&quot;&gt;8.2 精准测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#83-渗透测试&quot; id=&quot;markdown-toc-83-渗透测试&quot;&gt;8.3 渗透测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#84-基于模型的测试&quot; id=&quot;markdown-toc-84-基于模型的测试&quot;&gt;8.4 基于模型的测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9-深入浅出大型网站的架构设计&quot; id=&quot;markdown-toc-9-深入浅出大型网站的架构设计&quot;&gt;9. 深入浅出大型网站的架构设计&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#91-高性能架构设计&quot; id=&quot;markdown-toc-91-高性能架构设计&quot;&gt;9.1 高性能架构设计&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#92-高可用架构设计&quot; id=&quot;markdown-toc-92-高可用架构设计&quot;&gt;9.2 高可用架构设计&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#93-伸缩性架构设计&quot; id=&quot;markdown-toc-93-伸缩性架构设计&quot;&gt;9.3 伸缩性架构设计&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-参考资料&quot; id=&quot;markdown-toc-10-参考资料&quot;&gt;10 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-test-基础&quot;&gt;1. Test 基础&lt;/h2&gt;

&lt;p&gt;“测试不受重视”到”测试和开发同等重要”。
Googele等一线互联网巨头主导”去QE(Quality Engineer)， 开发自己测试”的全新模式。&lt;/p&gt;

&lt;p&gt;趋势:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;“自动化测试为辅”到”自动化测试为主”;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;产品发布从”月”为单位到现在”天”甚至”小时”， 留给测试的时间不多。因此要掌握设计开发测试基础架构的关键技术，特别是&lt;strong&gt;高并发测试执行基础架构&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统性思考如何将数据的准备工具化，服务化，最终实现平台化。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;测试方式(用户登录为例):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;等价类划分(已注册用户，用户名密码对； 已注册用户，用户名对，密码错； 已注册用户，用户名错，密码对)；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;边界值分析；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示功能性测试(已注册用户, 用户名密码对是否可正确登录)；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;隐式功能性测试(用户名密码是否在后台加密， 登录网络请求是否加密)；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;什么是好的测试用例？ ”好的“测试用例是一个玩呗的几何，它能够覆盖所有等价类以及各种边界值，而更能否发现缺陷无关。如果把测试软件看做一个池塘，软件缺陷就是池塘中的鱼，建立测试用例集的过程就是在编织一张渔网。”好的“测试用例集就是一张能够覆盖整个池塘的大渔网，只要池塘里有鱼，就一定能捞上来。如果渔网本身是完整且合格的，那么捞不到鱼，就证明池塘中没有鱼，而渔网的好坏与池塘中是否有鱼无关。所以好的测试用例必须是完备的等价类的集合(可通过&lt;strong&gt;等价类划分&lt;/strong&gt;，&lt;strong&gt;边界值分析&lt;/strong&gt;和&lt;strong&gt;错误推测&lt;/strong&gt;三种方法实现)。&lt;/p&gt;

&lt;p&gt;以考试成绩(0 - 100 int)输入项为例(60分及格)&lt;/p&gt;

&lt;p&gt;等价类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有效等价类 1: 0~59之间的任意整数;&lt;/li&gt;
  &lt;li&gt;有效等价类 2: 60~100之间的任意整数;&lt;/li&gt;
  &lt;li&gt;无效等价类 1: 小于0的负数;&lt;/li&gt;
  &lt;li&gt;无效等价类 2: 大于100的整数;&lt;/li&gt;
  &lt;li&gt;无效等价类 3: 0~100之间的任何浮点数;&lt;/li&gt;
  &lt;li&gt;无效等价类 4: 其他任意非数字字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;边界值: -1, 0, 1, 59, 60, 61, 99, 100, 101&lt;/p&gt;

&lt;h3 id=&quot;11-自动化测试&quot;&gt;1.1 自动化测试&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;自动化测试： 把人堆软件的测试工作，转化为由代码执行测试。其本质是写一段代码去测试另一段代码，所以实现自动化测试用例本身不属于开发工作，需要投入大量的时间和精力，并且已经开发完成的用例还必须随着被测对象的改变而不断更新，你还需要为此付出维护测试用例的成本。当你发现自动化测试用例的维护成本高于其节省的测试成本时，自动化测试就失去了价值与意义，你也就需要在是否使用自动化测试上权衡取舍了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;优势&lt;/p&gt;

&lt;p&gt;劣势
1 自动化测试远比手动测试脆弱，无法应对被测系统的变化，业界一直有句玩笑话”开发手一抖，自动化测试忙一宿”，这也从侧面反映了自动化测试用例的维护成本居高不下的事实。其根本原因在于自动化测试用例是hard coded，不具备任何”智能”应对变化。&lt;/p&gt;

&lt;p&gt;2 自动化测试用例的开发工作量远大于单次的手工测试。&lt;/p&gt;

&lt;h3 id=&quot;12-test-coverage&quot;&gt;1.2 Test Coverage&lt;/h3&gt;

&lt;p&gt;统计代码覆盖率的根本目的是找出潜在的遗漏测试用例，并有针对性的进行补充，同时还可以识别出代码中那些由于需求变更等原因造成的不可达的废弃代码。&lt;/p&gt;

&lt;p&gt;高的代码覆盖率不一定能保证软件的质量，但是低的代码覆盖率一定不能保证软件的质量。&lt;/p&gt;

&lt;p&gt;实现代码覆盖率的统计，最基本的方法就是注入(Instrumentation)。简单地说，注入就是在被测代码中自动插入用于覆盖率统计的探针(Probe)代码，并保证插入的探针代码不会给原代码带来任何影响。&lt;/p&gt;

&lt;h3 id=&quot;13-software-defect-report软件缺陷报告&quot;&gt;1.3 Software Defect Report(软件缺陷报告)&lt;/h3&gt;

&lt;h3 id=&quot;14-tdd&quot;&gt;1.4 TDD&lt;/h3&gt;

&lt;p&gt;TDD：先根据需求写测试用例，然后开发。TDD优点:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;保证开发功能一定是符合实际需求的；&lt;/li&gt;
  &lt;li&gt;测试用例即文档, 可以将测试用例直接输出为文档，例如JavaDoc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-gui自动化测试&quot;&gt;2. GUI自动化测试&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;传统Web浏览器的GUI测试，业内主流的开源方案采用Selenium, 商业方案采用Micro Focus的UFT(前身是HP的QTP); 前端网站性能测试WebPagetes；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于移动端的原生应用，通常采用主流的Appium, 它对iOS环境集成了XCUITest, 对Android环境集成了UIAutomator和Espresso.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;21-web&quot;&gt;2.1 Web&lt;/h3&gt;

&lt;h4 id=&quot;211-脚本与数据的解耦--page-object模型&quot;&gt;2.1.1 脚本与数据的解耦 + Page Object模型&lt;/h4&gt;

&lt;h4 id=&quot;212-gui自动化过程中的测试数据&quot;&gt;2.1.2 GUI自动化过程中的测试数据&lt;/h4&gt;

&lt;h4 id=&quot;213-page-code-gen--data-gen--headless&quot;&gt;2.1.3 Page Code Gen + Data Gen + Headless&lt;/h4&gt;

&lt;h4 id=&quot;214-gui测试稳定性&quot;&gt;2.1.4 GUI测试稳定性&lt;/h4&gt;

&lt;h4 id=&quot;215-gui测试报告&quot;&gt;2.1.5 GUI测试报告&lt;/h4&gt;

&lt;h4 id=&quot;216-gui自动化测试策略&quot;&gt;2.1.6 GUI自动化测试策略&lt;/h4&gt;

&lt;h3 id=&quot;22-移动端&quot;&gt;2.2 移动端&lt;/h3&gt;

&lt;h4 id=&quot;221-移动应用测试方法与思路&quot;&gt;2.2.1 移动应用测试方法与思路&lt;/h4&gt;

&lt;h4 id=&quot;222-appium&quot;&gt;2.2.2 Appium&lt;/h4&gt;

&lt;h2 id=&quot;3-api自动化测试&quot;&gt;3. API自动化测试&lt;/h2&gt;

&lt;h3 id=&quot;31-常用api测试工具简介&quot;&gt;3.1 常用API测试工具简介&lt;/h3&gt;

&lt;p&gt;cURL 和 Postman&lt;/p&gt;

&lt;h3 id=&quot;32-微服务模式下api测试&quot;&gt;3.2 微服务模式下API测试&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;测试脚手架代码的自动化生成；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;部分测试输入数据的自动生成；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response 验证的自动化;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于SoapUI或者Postman的自动化脚本生成&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-代码级测试&quot;&gt;4. 代码级测试&lt;/h2&gt;

&lt;h3 id=&quot;41-代码级测试的基本理念与方法&quot;&gt;4.1 代码级测试的基本理念与方法&lt;/h3&gt;

&lt;p&gt;静态方法指不运行代码(通常是linter)，动态方法指运行代码。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;人工静态方法，本质上通过开发人员代码走查(Code Review)、结对编程(Pair Programming)、同行评审(Peer Review)来完成的，理论上可以发现所有的代码错误，但也因为其对“测试人员”的过渡依赖，局限性非常大；&lt;/li&gt;
  &lt;li&gt;自动静态方法(linter)，主要的手段是代码静态扫描，可以发现语法特征错误、边界行为特征错误和经验特征错误这三类“有特征”的错误；&lt;/li&gt;
  &lt;li&gt;人工动态方法，就是传统意义上的单元测试，是发现算法错误和部分算法错误的最佳方式；&lt;/li&gt;
  &lt;li&gt;自动动态方法，其实就是自动化的边界测试，主要覆盖边界行为特征错误。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;42-静态方法&quot;&gt;4.2 静态方法&lt;/h3&gt;
&lt;p&gt;linter&lt;/p&gt;

&lt;h3 id=&quot;43-动态方法&quot;&gt;4.3 动态方法&lt;/h3&gt;
&lt;h4 id=&quot;431-unit-test&quot;&gt;4.3.1 Unit Test&lt;/h4&gt;

&lt;p&gt;驱动代码 -&amp;gt; 被测试函数 –&amp;gt; 桩代码/Mock代码(两者区别请见&lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;《Mock 代码不是桩代码》（Mocks Aren’t Stubs)&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;脚手架代码生成的自动化;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;部分测试输入数据的自动化生成;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自动桩代码的生成;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被测代码的自动化静态分析;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试覆盖率的自动统计与分析。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;432-integrated-test&quot;&gt;4.3.2 Integrated Test&lt;/h4&gt;

&lt;p&gt;从测试用例设计和测试代码结构来看，代码级集成测试和单元测试非常相似，它们都是对被测试函数以不同的输入参数组合进行调用并验证结果，只不过代码级集成测试的关注点，更多的是软件模块之间的接口调用和数据传递。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;集成测试与单元测试的最大区别只是，集成测试中被测试函数的内部调用的其他函数必须是真实的，不允许使用桩代码代替，而单元测试中允许使用桩代码来模拟内部调用的其他函数&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;5-性能测试&quot;&gt;5. 性能测试&lt;/h2&gt;

&lt;h3 id=&quot;51-测试的基本方法与应用领域&quot;&gt;5.1 测试的基本方法与应用领域&lt;/h3&gt;

&lt;p&gt;根据在实际项目中的实践经验，我把常用的性能测试方法分为七大类：后端性能测试（Back-end Performance Test）、前端性能测试（Front-end Performance Test）、代码级性能测试（Code-level Performance Test）、压力测试（Load/Stress Test）、配置测试（Configuration Test）、并发测试（Concurrence Test），以及可靠性测试（Reliability Test）。接下来，我将详细为你介绍每一种测试方法。&lt;/p&gt;

&lt;h3 id=&quot;52-前端性能测试工具原理与行业常用工具简介&quot;&gt;5.2 前端性能测试工具原理与行业常用工具简介&lt;/h3&gt;

&lt;p&gt;WebPagetest&lt;/p&gt;

&lt;p&gt;极客时间版权所有: https://time.geekbang.org/column/article/17935&lt;/p&gt;

&lt;h3 id=&quot;53-后端性能测试工具原理与行业常用工具简介&quot;&gt;5.3 后端性能测试工具原理与行业常用工具简介&lt;/h3&gt;

&lt;p&gt;api性能测试(LoadRunner JMeter).&lt;/p&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-23_Test/2018-04-01-Test Foundation/性能测试.png&quot; alt=&quot;regular expression&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-测试数据准备&quot;&gt;6. 测试数据准备&lt;/h2&gt;

&lt;h3 id=&quot;61-build-pattern&quot;&gt;6.1 Build Pattern&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;// old way of prepare settings as test data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldReceiveNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDisplayTransactionAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldReceiveNotification&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDisplayTransactionAmount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withShouldReceiveNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shoudlReceive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldReceiveNotification&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shoudlReceive&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withShouldDisplayTransactionAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDisplayTransactionAmount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDisplay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// use default value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withShouldReceiveNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// just customized this field, all the rest are using default values.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;62-统一测试数据平台&quot;&gt;6.2 统一测试数据平台&lt;/h3&gt;

&lt;h2 id=&quot;7-测试基础架构&quot;&gt;7. 测试基础架构&lt;/h2&gt;

&lt;h3 id=&quot;71-selenium-grid-for-gui&quot;&gt;7.1 Selenium Grid for GUI&lt;/h3&gt;
&lt;p&gt;GUI测试架构(Selenium Grid): 从本质上讲，Selenium Grid 是一种可以并发执行 GUI 测试用例的测试执行机的集群环境，采用的是 HUB 和 Node 模式。目前 Selenium Grid 已经有 Docker 的版本了，你有没有考虑过可以在云端，比如 PCF、GCP、AWS 上搭建 Selenium Grid 呢？在我看来，这将是未来的主流方案。&lt;/p&gt;

&lt;h3 id=&quot;72-测试执行环境的架构设计&quot;&gt;7.2 测试执行环境的架构设计&lt;/h3&gt;
&lt;p&gt;从广义上讲，测试执行环境除了包括测试执行机以外，还包括测试执行机的维护、集群的容量规划、测试发起的控制、测试用例的组织以及测试用例的版本控制等等。这也就是我要和你的测试基础架构的定义。&lt;/p&gt;

&lt;h3 id=&quot;73-大型全球化电商的测试基础架构设计&quot;&gt;7.3 大型全球化电商的测试基础架构设计&lt;/h3&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/-23_Test/2018-04-01-Test Foundation/完整的测试架构.png&quot; alt=&quot;regular expression&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-测试新技术&quot;&gt;8. 测试新技术&lt;/h2&gt;

&lt;h3 id=&quot;81-探索式测试&quot;&gt;8.1 探索式测试&lt;/h3&gt;

&lt;h3 id=&quot;82-精准测试&quot;&gt;8.2 精准测试&lt;/h3&gt;

&lt;h3 id=&quot;83-渗透测试&quot;&gt;8.3 渗透测试&lt;/h3&gt;

&lt;h3 id=&quot;84-基于模型的测试&quot;&gt;8.4 基于模型的测试&lt;/h3&gt;

&lt;h2 id=&quot;9-深入浅出大型网站的架构设计&quot;&gt;9. 深入浅出大型网站的架构设计&lt;/h2&gt;

&lt;h3 id=&quot;91-高性能架构设计&quot;&gt;9.1 高性能架构设计&lt;/h3&gt;

&lt;h3 id=&quot;92-高可用架构设计&quot;&gt;9.2 高可用架构设计&lt;/h3&gt;

&lt;h3 id=&quot;93-伸缩性架构设计&quot;&gt;9.3 伸缩性架构设计&lt;/h3&gt;

&lt;h2 id=&quot;10-参考资料&quot;&gt;10 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/103&quot;&gt;《软件测试52讲》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;《Jest Documentation》&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sun, 01 Apr 2018 00:00:00 +0800</pubDate>
				<link>/-23%20test/2018/04/01/Test-Foundation.html</link>
				<guid isPermaLink="true">/-23%20test/2018/04/01/Test-Foundation.html</guid>
			</item>
		
			<item>
				<title>Vim</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-vim-总结&quot; id=&quot;markdown-toc-1-vim-总结&quot;&gt;1. Vim 总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-vim-总结&quot;&gt;1. Vim 总结&lt;/h2&gt;

&lt;p class=&quot;img_middle_lg&quot;&gt;&lt;img src=&quot;/assets/images/posts/20_TextEditor/2017-10-01-Vim/vim-cheat-sheet-advanced.png&quot; alt=&quot;Vim summary&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/vim-commands-cheat-sheet/&quot;&gt;《Vim Masterclass》&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sun, 01 Oct 2017 00:00:00 +0800</pubDate>
				<link>/-20%20text%20editor/2017/10/01/Vim.html</link>
				<guid isPermaLink="true">/-20%20text%20editor/2017/10/01/Vim.html</guid>
			</item>
		
			<item>
				<title>iOS 2D Game - SpriteKit入门(一)</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-spritekit-概览&quot; id=&quot;markdown-toc-1-spritekit-概览&quot;&gt;1. SpriteKit 概览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot; id=&quot;markdown-toc-2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sknode&quot; id=&quot;markdown-toc-21-sknode&quot;&gt;2.1 SKNode&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#211-skscene&quot; id=&quot;markdown-toc-211-skscene&quot;&gt;2.1.1 SKScene&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#212-skspritenode&quot; id=&quot;markdown-toc-212-skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#213-sklabelnode&quot; id=&quot;markdown-toc-213-sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#214-skemitternode&quot; id=&quot;markdown-toc-214-skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-skphysicsworld--skphysicsbody&quot; id=&quot;markdown-toc-22-skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#221-skphysicsworld&quot; id=&quot;markdown-toc-221-skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#222-skphysicsbody&quot; id=&quot;markdown-toc-222-skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-skaction&quot; id=&quot;markdown-toc-23-skaction&quot;&gt;2.3. SKAction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3其它类&quot; id=&quot;markdown-toc-3其它类&quot;&gt;3.其它类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-总结&quot; id=&quot;markdown-toc-4-总结&quot;&gt;4 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-spritekit-概览&quot;&gt;1. SpriteKit 概览&lt;/h2&gt;

&lt;p&gt;SpriteKit是Apple官方的2D游戏框架， 让开发者在iOS 和OS 平台上更高效的开发2D游戏。&lt;/p&gt;

&lt;p&gt;学习SpriteKit， 最权威的资料应该是苹果官方文档 -
&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html&quot;&gt;SpriteKit Programming Guide&lt;/a&gt;。 该文档很全面但是不适合初学者。 对于初学者， 理解SpriteKit背后的设计rationale才能更好的应用它。 那么SpriteKit的设计rationale是什么呢？&lt;/p&gt;

&lt;p&gt;对于一个2D游戏来说， 设计应该分为三个部分(以超级马里奥为例):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;View: 即视图显示，用于展示各个Sprite(精灵)，例如马里奥图片和子弹图片;&lt;/li&gt;
  &lt;li&gt;Physics Model:即物理模型， 包括质量， 体积(2D游戏是面积)， 密度， 碰撞， 地球引力等， 例如超级马里奥碰到水管会弹回来， 往上跳会下落。&lt;/li&gt;
  &lt;li&gt;Action:即 物理模型受到的外部作用力。例如超级马里奥里的空中台阶自己来回移动(开发者给其施加一个永恒的来回运动的作用力)。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这三个方面分别对应SpriteKit里面的SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction。&lt;/p&gt;

&lt;h2 id=&quot;2-sknodeskphysicsworld--skphysicsbodyskaction理解&quot;&gt;2. SKNode，SKPhysicsWorld &amp;amp; SKPhysicsBody，SKAction理解&lt;/h2&gt;
&lt;h3 id=&quot;21-sknode&quot;&gt;2.1 SKNode&lt;/h3&gt;

&lt;p&gt;SKNode 是 SpriteKit 显示视图的Building Block。它能提供一个游戏视图的基本属性和方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKNode Class

属性:
.zPosition              // 视图的z方向的距离，用于标定重叠视图的显示顺序;
.xScale                 // x方向的视图放大倍数;
.yScale                 // y方向的视图放大倍数;
.alpha                  // 视图的alpha值;
.hidden                 // 视图是否隐藏;

方法:
-addChild:              // 增加子SKNode，与UIView 的 -addSubView: 类似;
-removeFromParent:      // 从父SKNode移除，与 UIView的removeFromSuperview 类似;
-runAction:             // 运行一个SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们一般不直接用它，它下面有几个子类，其中最常见的是以下4个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SKEffectNode: 用于缓存，渲染，加滤镜于图片。它的子类SKScene 用于展示所有的SKNode，是游戏场景;&lt;/li&gt;
  &lt;li&gt;SKSpriteNode: 用于展示精灵，如超级马里奥图片;&lt;/li&gt;
  &lt;li&gt;SKLabelNode: 用于展示单行文本，如游戏时间;&lt;/li&gt;
  &lt;li&gt;SKEmitterNode: 用于展示粒子，例如喷射火焰的岩浆;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们就这四个类做一个简单的介绍。&lt;/p&gt;

&lt;h4 id=&quot;211-skscene&quot;&gt;2.1.1 SKScene&lt;/h4&gt;
&lt;p&gt;SKScene 是游戏关口(level)，游戏中的一个场景，例如马里奥的第一关和第二关分别是两个SKCene实例。在这个场景中，包含了所有其他SKNode(或者其子类)，比如马里奥(SKSpriteNode)，游戏时间(SKLabelNode)，喷射火焰的岩浆(SKEmitterNode)。它的主要属性和方法有:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKScene Class

属性:
.view                   // 关口的父视图，是一个SKView，用来展示各个SKScene关口;
.physicsWorld           // 世界的物理模型，是一个SKPhysicsWorld实例，这个后面会介绍;

方法:
-initWithSize:          // 初始化方法;
+SceneWithSize:         // 初始化类工厂方法;
-didMoveToView:         // 当SKScene实例被SKView展示时调用，类似UIView的-didMoveToSuperview;
-addChild:              // 增加子SKNode，如马里奥(SKSpriteNode);&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;212-skspritenode&quot;&gt;2.1.2 SKSpriteNode&lt;/h4&gt;
&lt;p&gt;SKSpriteNode是用来展示sprite，那么何为sprite呢，sprite有什么作用呢? Wiki中是这样定义的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sprite: two-dimensional image or animation that is integrated into a larger scene.Initially including just graphical objects handled &lt;strong&gt;separately&lt;/strong&gt; from the memory bitmap of a video display，this now includes various manners of graphical overlays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sprite是从整个display独立出来渲染的2D图片。如何理解这句话呢，在sprite出现之前，2D游戏要渲染一帧图片(比如马里奥在一个蓝天白云的背景前)，需要把整个图片(马里奥+背景)计算完后再渲染，其中背景的渲染在每一帧中都重复。sprite的出现正是为了避免这一重复。马里奥是一个sprite，他在一个固定的背景前跳跃，只需要将马里奥的每一帧渲染出来叠在背景(背景不需要重复计算渲染)即可，这就是为什么sprite被称为从整个display独立出来渲染的2D图片。sprite的思想在几十年前就已经有了，SpriteKit只是沿袭了2D游戏设计中运用sprite这一思想，用SKSpriteNode来表示sprite类。我们来看下SKSpriteNode的属性和方法&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKSpriteNode Class

属性:
.size                       // 大小;
.physicsBody                // 物体的物理模型，是一个SKPhysicsBody实例，这个后面会介绍;

方法:
+spriteNodeWithImageNamed:  // 类工厂方法，用图片创建sprite;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;213-sklabelnode&quot;&gt;2.1.3 SKLabelNode&lt;/h4&gt;
&lt;p&gt;SKLabelNode是SpriteKit用来展示text，它的方法和属性如下。有一点需要注意的是它只能显示单行文本。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKLabelNode Class

属性:
.fontSize               // 字体大小;
.color                  // 字体颜色;
.fontName               // 字体名字;

方法:
-initWithFontNamed:     // 通过字体名字初始化方法;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;214-skemitternode&quot;&gt;2.1.4 SKEmitterNode&lt;/h4&gt;
&lt;p&gt;SKEmitterNode是SpriteKit用来展示粒子系统的，下面介绍下它的常见使用方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;subclass一个SpriteKit Particles Files ( ctrl + N –&amp;gt; iOS，Resources，SpriteKit Particles Files –&amp;gt; choose 1 of the eight template –&amp;gt; save，你会得到一个.sks 和.png 文件，点击.sks文件:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_1.png&quot; alt=&quot;SKEmitterNode_1&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_2.png&quot; alt=&quot;SKEmitterNode_2&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_3.png&quot; alt=&quot;SKEmitterNode_3&quot; /&gt;
 &lt;img src=&quot;/assets/images/posts/2016-02-20/SKEmitterNode_4.png&quot; alt=&quot;SKEmitterNode_4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在.sks文件右侧调整各参数，例如有粒子平均产生率(BirthRate) 单位是个/秒。右边的range是一个分布，在平均产生率上 ±  range/2 分布。particle texture 是粒子的纹路，你可以选择自己加入的图片文件。&lt;/li&gt;
  &lt;li&gt;调整完成后如何在code中调用.sks文件呢:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKEmitterParticle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSKeyedUnarchiver&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unarchiveObjectWithFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;FireParticle&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;sks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;particleBirthRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fireParticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt; 用NSBundle读取.sks 文件，然后可以进一步修改其属性。这样就完成了SpriteKit Particles Files 的子类化和应用。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;22-skphysicsworld--skphysicsbody&quot;&gt;2.2 SKPhysicsWorld &amp;amp; SKPhysicsBody&lt;/h3&gt;
&lt;p&gt;SpriteKit 里表示物理模型的有两个类，SKPhysicsWorld &amp;amp; SKPhysicsBody，前者属于SKScene，后者属于SKNode其他子类。SKPhysicsWorld 和 SKPhysicsBody 都继承与NSObject。我们先来看看SKPhysicsWorld。&lt;/p&gt;

&lt;h4 id=&quot;221-skphysicsworld&quot;&gt;2.2.1 SKPhysicsWorld&lt;/h4&gt;
&lt;p&gt;对于一个物理世界来说，例如我们的地球，有一些属性决定了我们日常生活的基础，如重力加速度。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsWorld Class

属性:
.gravity:                   // 重力加速度了， 通过CGVectorMaker(0，-9.8)获得现实生活一个重力加速度。第一个参数是x轴，向右为正，第二个参数是y轴，向上为正;
.contactDelegate            // SKPhyicsContactDelegate 实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;又比如物体碰撞后的处理者，可以理解为物体碰撞后有一个裁判需要对此进行处理，在SpriteKit中是SKPhyicsContactDelegate。而SKPhysicsWorld 的contactDelegate属性就指向这样一个delegate，也就是说由物理世界充当裁判的角色。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsContactDelegate Class

方法:
-didBeginContact:       // 碰撞开始;
-didEndContact:         // 碰撞结束;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于SKPhysicsContactDelegate两个方法的使用我们后面介绍。&lt;/p&gt;

&lt;h4 id=&quot;222-skphysicsbody&quot;&gt;2.2.2 SKPhysicsBody&lt;/h4&gt;
&lt;p&gt;SKPhysicsBody代表物理模型里的物体，它有质量，体积(2D 游戏里是面积)，密度，线速度，角速度，自旋速度等。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKPhysicsBody Class

属性:
.mass                       // 质量，单位kg;
.area                       // 面积，单位m*m;
.density                    // 密度，单位kg/m*m;
.friction                   // 表面粗糙度，0.0-1.0;
.restitution                // 碰撞时，反射速度/入射速度，0.0-1.0;
.linearDamping              // 物体线速度受液体或者气体(空气)摩擦的影响， 0.0-1.0;
.dynamic                    // YES，动态; NO，静态，与SKPhysicsWorld相连，不受碰撞影响;
.categoryBitMask            // 自身的contact &amp;amp; collision ID;
.contactTestBitMask         // 外界contact测试的ID集合;
.collisionBitMask           // 外界collision的ID集合;

方法:
+bodyWithRectangleOfSize:   // 创建Volume-physicsBody的一种类工厂方法;
+bodyWithEdgeLoopFromRect:  // 创建Edge-physicsBody的一种类工厂方法;
-applyImpulse:              // 被施加外部瞬时力;
-applyForce:                // 被施加外部永恒力;
-runAction:                 // 运行一个SKAction实例;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;.dynamics 是一个BOOL，设置为NO时，静止(可以理解为与SKPhyisicsWorld相连)，位置不受碰撞前后影响， 例如马里奥里的乌龟壳，碰到水管后反弹，水管静止，这里水管的dynamic就是NO， 乌龟壳的dynmaics就是YES。&lt;/p&gt;

&lt;p&gt;要创建一个在框里永远碰撞而不停下的ball，应设置如下friction，restituition， linearDamping:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restitution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearDamping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;SKPhysicsBody的创建分为两种，一种是Volume-physicsBody，就是有体积(2D里是面积)的物体，有体积意味着有质量，受牛顿定律影响;另一种是只有边缘没有体积的Edge-physicsBody，如上面那个装永动球的箱子，我们只关心箱子的边框，用 +bodyWithEdgeLoopFromRect: 创建它并设置其dynamics = NO 即可。&lt;/p&gt;

&lt;p&gt;下面重点要介绍的是接触和碰撞。
SpriteKit为每个物体在接触和碰撞时设定了一个身份证——categoryBitMask，该属性唯一标定了接触和碰撞时每个物体的身份，是一个32 bit的数，我们下面先看code再解释:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们设置了3种uint32_t的静态常量，分别代表马里奥，子弹，乌龟。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.categoryBitMask = MariaCategory;
tortoise.categoryBitMask = TortoiseCategory;
bullet.categoryBitMask = BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后分别给maria，tortoise以及bullte的categoryBitMask设置为相应值。同时我们需要在以下情形中判断contact发生并作出相应，如马里奥碰到乌龟，马里奥die;子弹碰到乌龟，乌龟die:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;maria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MariaCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactTestBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面将maria感兴趣的contact ID集设置为乌龟，乌龟设置为子弹和马里奥，子弹设置为乌龟。用32位非常便于取或操作，同时也限定了一个游戏场景里的碰撞接触的身份证只能有32个。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameScene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContactDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicsWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didBeginContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKPhysicsContact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//我们来简单举一个子弹打到乌龟，乌龟die的contact测试。
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SKPhysicsBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BulletCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryBitMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TortoiseCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bodyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;tortoise die: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tortoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样当子弹打到乌龟，GameScene 作为SKPhysicsContactDelegate就会响应-didBeginContact: 方法，然后判断情形，如果是，则打印出来”tortoise die:tortoise的object信息”。&lt;/p&gt;

&lt;p&gt;了解了categoryBitMask 和contactTestBitMask， 我们再来看collisionBitMask就简单了，它表示物体之间会不会intersect，也是32位数。默认是32个1，表示与任何物体碰撞都不会穿过那个物体。如果你需要将某个物体穿过另一个物体，比如子弹打到马里奥，直接穿过(当然游戏中不可能发生):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objec&quot; data-lang=&quot;objec&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;maria.collisionBitMask = ~BulletCategory;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后力的施加我们在SKAction里介绍。&lt;/p&gt;

&lt;h3 id=&quot;23-skaction&quot;&gt;2.3. SKAction&lt;/h3&gt;
&lt;p&gt;SKAction表示一个动作，由SKNode得 -runAction: 方法执行，它有几十个方法。下面列出几个比较典型的， 它的实例化大部分都是类工厂方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SKAction Class

初始化方法:
+moveByX:y:duration:                    // 移动一个SKNode;
+rotationByAngule:duration:             // 转动一个SKNode;
+hide                                   // 隐藏一个SKNode， 对应的还有 +unhide;
+applyForce:duration:                   // 施加力;
+playSoundFileNamed:waitForCompletion:  // 播放音频文件;
+removeFromParent                       // 将SKNode从父node里移除;
+waitForDuration:                       // 等待的动作，在SKAction group和sequence里用到;

+group:                                 // 组合几个SKAction，从时间起点，这几个SKAction同时开始;
+sequence:                              // 串联几个SKAction，从时间起始点，下一个的开始在上一个结束后才执行;
+repeatActionForever:                   // 永远重复SKAction;
-reversedAction:                        // 逆向一个SKAction，如原来从左到右2秒，现在从右到左两秒;

+runBlock:queque:                       // 在队列里执行SKAction;
+customActionWithDuration:actionBlock:  // 定制SKAction;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;例如马里奥中需要一个空中台阶，“”从左到右2秒，等待0.5秒，从右到左2秒，等待0.5秒 ”的sequence永远运行下去，code如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveByX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reversedAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRight&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToLeft&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatActionForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveToRightAndLeftForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3其它类&quot;&gt;3.其它类&lt;/h2&gt;
&lt;p&gt;在SKView中，场景的不同切换要用到SKTransition，self指一个scene:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKTransition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doorsOpenHorizontalWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winScene&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doorOpenTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;4-总结&quot;&gt;4 总结&lt;/h2&gt;
&lt;p&gt;以上对于SKSpriteKit里的大部分常用类及其用法做了介绍，相信读者能够自己画出SKSpriteKit的类图关系，再回过头来跟着online的SKSpriteKit的tutorial做一遍的时候，自然就了然于心。后面还有一篇从各个小topic来看SKSpriteKit。&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Dec 2016 00:00:00 +0800</pubDate>
				<link>/01%20objective-c/2016/12/30/SpriteKit.html</link>
				<guid isPermaLink="true">/01%20objective-c/2016/12/30/SpriteKit.html</guid>
			</item>
		
			<item>
				<title>MIT_6824 (一)： Introduction (MapReduce)</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-introduction&quot; id=&quot;markdown-toc-1-introduction&quot;&gt;1 Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-outline&quot; id=&quot;markdown-toc-11-outline&quot;&gt;1.1 Outline&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; id=&quot;markdown-toc-&quot;&gt;#&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1 Introduction&lt;/h2&gt;

&lt;h3 id=&quot;11-outline&quot;&gt;1.1 Outline&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Reading: &lt;a href=&quot;http://nil.csail.mit.edu/6.824/2016/papers/mapreduce.pdf&quot;&gt;MapReduce(2004)&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lab 1: &lt;a href=&quot;http://nil.csail.mit.edu/6.824/2016/labs/lab-1.html&quot;&gt;MapReduce&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lecture:  &lt;a href=&quot;https://www.youtube.com/watch?v=hBWfjkGKRas&amp;amp;index=1&amp;amp;list=PLkcQbKbegkMqiWf7nF8apfMRL4P4sw8UL&quot;&gt;Video&lt;/a&gt;, &lt;a href=&quot;http://nil.csail.mit.edu/6.824/2016/notes/l01.txt&quot;&gt;Notes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other Materials: &lt;a href=&quot;https://www.douban.com/note/364922549/&quot;&gt;MapReduce related papers&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;#&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/03 Java/2016-11-11-Spring Framework/Spring Summary.png&quot; alt=&quot;Spring Summary.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.distributed-systems.net/index.php/books/distributed-systems-3rd-edition-2017/&quot;&gt;《Distributed System》&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/schedule.html&quot;&gt;MIT 6.824&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/chaozh/MIT-6.824&quot;&gt;MIT 6.824 作业&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ts25504.github.io/2016/08/16/MIT-6-824%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/&quot;&gt;MIT-6.824学习之路&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Google三剑客: &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&quot;&gt;MapReduce&lt;/a&gt;, &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&quot;&gt;BigTable&lt;/a&gt;, &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&quot;&gt;GFS&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 11 Dec 2016 00:00:00 +0800</pubDate>
				<link>/-09%20distributed%20system/2016/12/11/MIT_6824-(%E4%B8%80)-Introduction.html</link>
				<guid isPermaLink="true">/-09%20distributed%20system/2016/12/11/MIT_6824-(%E4%B8%80)-Introduction.html</guid>
			</item>
		
			<item>
				<title>Distributed System (八)： Security</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-summary&quot; id=&quot;markdown-toc-1-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/03 Java/2016-12-09-Distributed System_08_Security/Security Summary.png&quot; alt=&quot;Spring Summary.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.distributed-systems.net/index.php/books/distributed-systems-3rd-edition-2017/&quot;&gt;《Distributed System》&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/schedule.html&quot;&gt;MIT 6.824&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/chaozh/MIT-6.824&quot;&gt;MIT 6.824 作业&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ts25504.github.io/2016/08/16/MIT-6-824%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/&quot;&gt;MIT-6.824学习之路&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 09 Dec 2016 00:00:00 +0800</pubDate>
				<link>/-09%20distributed%20system/2016/12/09/Distributed-System-(%E5%85%AB)-Security.html</link>
				<guid isPermaLink="true">/-09%20distributed%20system/2016/12/09/Distributed-System-(%E5%85%AB)-Security.html</guid>
			</item>
		
			<item>
				<title>Distributed System (七)： Fault Tolerance</title>
				<description>&lt;p class=&quot;article_content_title&quot;&gt;目录&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-summary&quot; id=&quot;markdown-toc-1-summary&quot;&gt;1 Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-参考资料&quot; id=&quot;markdown-toc-2-参考资料&quot;&gt;2 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;hr-short-left&quot; /&gt;

&lt;h2 id=&quot;1-summary&quot;&gt;1 Summary&lt;/h2&gt;

&lt;p class=&quot;img_middle_hg&quot;&gt;&lt;img src=&quot;/assets/images/posts/03 Java/2016-12-08-Distributed System_07_Fault Tolerance/Fault Tolerance.png&quot; alt=&quot;Spring Summary.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-参考资料&quot;&gt;2 参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.distributed-systems.net/index.php/books/distributed-systems-3rd-edition-2017/&quot;&gt;《Distributed System》&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/schedule.html&quot;&gt;MIT 6.824&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/chaozh/MIT-6.824&quot;&gt;MIT 6.824 作业&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ts25504.github.io/2016/08/16/MIT-6-824%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/&quot;&gt;MIT-6.824学习之路&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 08 Dec 2016 00:00:00 +0800</pubDate>
				<link>/-09%20distributed%20system/2016/12/08/Distributed-System-(%E4%B8%83)-Fault-Tolerance.html</link>
				<guid isPermaLink="true">/-09%20distributed%20system/2016/12/08/Distributed-System-(%E4%B8%83)-Fault-Tolerance.html</guid>
			</item>
		
	</channel>
</rss>
